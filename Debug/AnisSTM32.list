
AnisSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b4  080066b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066bc  080066bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08006734  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006734  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002412  00000000  00000000  0003224d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000355e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031cc  00000000  00000000  00036488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012202  00000000  00000000  00039654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a66  00000000  00000000  0004b856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001412bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf8  00000000  00000000  0014130c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800641c 	.word	0x0800641c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800641c 	.word	0x0800641c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <startTimer>:

uint16_t timer_val;


void startTimer(TIM_HandleTypeDef *timer, CLOCK* clock)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	clock-> timCounterms = 0;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80005b4:	2036      	movs	r0, #54	; 0x36
 80005b6:	f000 ff2c 	bl	8001412 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(timer);
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f002 fca2 	bl	8002f04 <HAL_TIM_Base_Start_IT>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <tick>:

void tick(CLOCK* clock)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	clock-> timCounterms++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <printFullTime>:

void printFullTime(CLOCK* clock)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
	int hours, minuts, seconds;

	hours = clock -> timCounterms/3600;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <printFullTime+0x70>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	441a      	add	r2, r3
 80005fc:	12d2      	asrs	r2, r2, #11
 80005fe:	17db      	asrs	r3, r3, #31
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
	minuts = (clock -> timCounterms - hours*3600)/60;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	4914      	ldr	r1, [pc, #80]	; (800065c <printFullTime+0x74>)
 800060c:	fb01 f303 	mul.w	r3, r1, r3
 8000610:	4413      	add	r3, r2
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <printFullTime+0x78>)
 8000614:	fb82 1203 	smull	r1, r2, r2, r3
 8000618:	441a      	add	r2, r3
 800061a:	1152      	asrs	r2, r2, #5
 800061c:	17db      	asrs	r3, r3, #31
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	613b      	str	r3, [r7, #16]
    seconds = clock -> timCounterms - hours*3600 - minuts*60;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <printFullTime+0x74>)
 800062a:	fb01 f303 	mul.w	r3, r1, r3
 800062e:	18d1      	adds	r1, r2, r3
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	4613      	mov	r3, r2
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	60fb      	str	r3, [r7, #12]

	printf("%d seconds = %d hours : %d minutes : %d seconds\n\r", clock -> timCounterms, hours, minuts, seconds);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <printFullTime+0x7c>)
 800064c:	f004 f9e0 	bl	8004a10 <iprintf>
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	91a2b3c5 	.word	0x91a2b3c5
 800065c:	fffff1f0 	.word	0xfffff1f0
 8000660:	88888889 	.word	0x88888889
 8000664:	08006434 	.word	0x08006434

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fd5e 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f80f 	bl	8000692 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f97c 	bl	8000970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000678:	f000 f94a 	bl	8000910 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800067c:	f000 f910 	bl	80008a0 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000680:	f000 f858 	bl	8000734 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000684:	f000 f8b0 	bl	80007e8 <MX_TIM3_Init>
//    /* USER CODE END WHILE */
//
//    /* USER CODE BEGIN 3 */
//  }

  mainloop();
 8000688:	f000 f9f6 	bl	8000a78 <mainloop>
 800068c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}

08000692 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b096      	sub	sp, #88	; 0x58
 8000696:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2244      	movs	r2, #68	; 0x44
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f9ad 	bl	8004a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b8:	f001 f8ba 	bl	8001830 <HAL_PWREx_ControlVoltageScaling>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c2:	f000 f9d3 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e0:	230a      	movs	r3, #10
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f8f1 	bl	80018dc <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000700:	f000 f9b4 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fcb9 	bl	8002094 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000728:	f000 f9a0 	bl	8000a6c <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3758      	adds	r7, #88	; 0x58
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_TIM2_Init+0xb0>)
 800075a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_TIM2_Init+0xb0>)
 8000762:	f240 321f 	movw	r2, #799	; 0x31f
 8000766:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_TIM2_Init+0xb0>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 262;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_TIM2_Init+0xb0>)
 8000770:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000774:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM2_Init+0xb0>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_TIM2_Init+0xb0>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000782:	4818      	ldr	r0, [pc, #96]	; (80007e4 <MX_TIM2_Init+0xb0>)
 8000784:	f002 fc2e 	bl	8002fe4 <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 f96d 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <MX_TIM2_Init+0xb0>)
 80007a2:	f003 fa41 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 f95e 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM2_Init+0xb0>)
 80007c8:	f002 fd82 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80007d2:	f000 f94b 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM2_Init+0xb0>)
 80007d8:	f000 fae4 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000008c 	.word	0x2000008c

080007e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]
 800080a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_TIM3_Init+0xb0>)
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <MX_TIM3_Init+0xb4>)
 8000810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_TIM3_Init+0xb0>)
 8000814:	f240 321f 	movw	r2, #799	; 0x31f
 8000818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_TIM3_Init+0xb0>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 262;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_TIM3_Init+0xb0>)
 8000822:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_TIM3_Init+0xb0>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_TIM3_Init+0xb0>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000834:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_TIM3_Init+0xb0>)
 8000836:	f002 fbd5 	bl	8002fe4 <HAL_TIM_PWM_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 f914 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_TIM3_Init+0xb0>)
 8000854:	f003 f9e8 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800085e:	f000 f905 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000862:	2360      	movs	r3, #96	; 0x60
 8000864:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM3_Init+0xb0>)
 800087a:	f002 fd29 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000884:	f000 f8f2 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM3_Init+0xb0>)
 800088a:	f000 fa8b 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000d8 	.word	0x200000d8
 800089c:	40000400 	.word	0x40000400

080008a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM6_Init+0x68>)
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <MX_TIM6_Init+0x6c>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_TIM6_Init+0x68>)
 80008b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_TIM6_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_TIM6_Init+0x68>)
 80008c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80008ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_TIM6_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_TIM6_Init+0x68>)
 80008d4:	f002 fabe 	bl	8002e54 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008de:	f000 f8c5 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_TIM6_Init+0x68>)
 80008f0:	f003 f99a 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008fa:	f000 f8b7 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000124 	.word	0x20000124
 800090c:	40001000 	.word	0x40001000

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART2_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000954:	f003 fa0e 	bl	8003d74 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f885 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000170 	.word	0x20000170
 800096c:	40004400 	.word	0x40004400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <MX_GPIO_Init+0xf4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <MX_GPIO_Init+0xf4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_GPIO_Init+0xf4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xf4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f000 fed5 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <MX_GPIO_Init+0xf8>)
 8000a0a:	f000 fd1d 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a0e:	2340      	movs	r3, #64	; 0x40
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fd0e 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a32:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f000 fcff 	bl	8001448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2028      	movs	r0, #40	; 0x28
 8000a50:	f000 fcc3 	bl	80013da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f000 fcdc 	bl	8001412 <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000800 	.word	0x48000800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <mainloop>:
int cmdcount = 0;
int cmdprint = 0;
CLOCK clock;

void mainloop()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	startTimer(&htim6, &clock);
 8000a7c:	4905      	ldr	r1, [pc, #20]	; (8000a94 <mainloop+0x1c>)
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <mainloop+0x20>)
 8000a80:	f7ff fd90 	bl	80005a4 <startTimer>

	while (1)
	{
		if (commTask())
 8000a84:	f000 f834 	bl	8000af0 <commTask>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0fa      	beq.n	8000a84 <mainloop+0xc>
		{
			handleCommand();
 8000a8e:	f000 f8ad 	bl	8000bec <handleCommand>
		if (commTask())
 8000a92:	e7f7      	b.n	8000a84 <mainloop+0xc>
 8000a94:	20000260 	.word	0x20000260
 8000a98:	20000124 	.word	0x20000124

08000a9c <_write>:
		}
	}
}


int _write(int fd, char* ptr, int len) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <_write+0x28>)
 8000ab4:	f003 f9ac 	bl	8003e10 <HAL_UART_Transmit>
    return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000170 	.word	0x20000170

08000ac8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d102      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tick(&clock);
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ada:	f7ff fd75 	bl	80005c8 <tick>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000124 	.word	0x20000124
 8000aec:	20000260 	.word	0x20000260

08000af0 <commTask>:



int commTask()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000af6:	1db9      	adds	r1, r7, #6
 8000af8:	230a      	movs	r3, #10
 8000afa:	2201      	movs	r2, #1
 8000afc:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <commTask+0xe8>)
 8000afe:	f003 fa1b 	bl	8003f38 <HAL_UART_Receive>
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d020      	beq.n	8000b4e <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <commTask+0xe8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d011      	beq.n	8000b3e <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <commTask+0xe8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2208      	movs	r2, #8
 8000b20:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000b22:	e00c      	b.n	8000b3e <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <commTask+0xec>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	492c      	ldr	r1, [pc, #176]	; (8000bdc <commTask+0xec>)
 8000b2c:	600a      	str	r2, [r1, #0]
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <commTask+0xf0>)
 8000b30:	1899      	adds	r1, r3, r2
 8000b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <commTask+0xe8>)
 8000b3a:	f003 f969 	bl	8003e10 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <commTask+0xec>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <commTask+0xf4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbec      	blt.n	8000b24 <commTask+0x34>
		}

		return 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e03f      	b.n	8000bce <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	2b0d      	cmp	r3, #13
 8000b52:	d023      	beq.n	8000b9c <commTask+0xac>
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b0a      	cmp	r3, #10
 8000b58:	d020      	beq.n	8000b9c <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <commTask+0xf4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b63      	cmp	r3, #99	; 0x63
 8000b60:	dd05      	ble.n	8000b6e <commTask+0x7e>
		{
			cmdcount = 0;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <commTask+0xf4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <commTask+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <commTask+0xf4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	491b      	ldr	r1, [pc, #108]	; (8000be4 <commTask+0xf4>)
 8000b76:	600a      	str	r2, [r1, #0]
 8000b78:	79b9      	ldrb	r1, [r7, #6]
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <commTask+0xf0>)
 8000b7c:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e025      	b.n	8000bce <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <commTask+0xec>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	4914      	ldr	r1, [pc, #80]	; (8000bdc <commTask+0xec>)
 8000b8a:	600a      	str	r2, [r1, #0]
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <commTask+0xf0>)
 8000b8e:	1899      	adds	r1, r3, r2
 8000b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b94:	2201      	movs	r2, #1
 8000b96:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <commTask+0xe8>)
 8000b98:	f003 f93a 	bl	8003e10 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <commTask+0xec>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <commTask+0xf4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbec      	blt.n	8000b82 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bac:	2202      	movs	r2, #2
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <commTask+0xf8>)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <commTask+0xe8>)
 8000bb2:	f003 f92d 	bl	8003e10 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <commTask+0xf4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <commTask+0xf0>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <commTask+0xf4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <commTask+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
	return 1;
 8000bcc:	2301      	movs	r3, #1
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000170 	.word	0x20000170
 8000bdc:	2000025c 	.word	0x2000025c
 8000be0:	200001f4 	.word	0x200001f4
 8000be4:	20000258 	.word	0x20000258
 8000be8:	08006468 	.word	0x08006468

08000bec <handleCommand>:

void handleCommand()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	f107 0208 	add.w	r2, r7, #8
 8000bf8:	4920      	ldr	r1, [pc, #128]	; (8000c7c <handleCommand+0x90>)
 8000bfa:	4821      	ldr	r0, [pc, #132]	; (8000c80 <handleCommand+0x94>)
 8000bfc:	f003 ff96 	bl	8004b2c <siscanf>
 8000c00:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d034      	beq.n	8000c72 <handleCommand+0x86>
  {
	  return;
  }

  if (strcmp(cmd, "full") == 0)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	491d      	ldr	r1, [pc, #116]	; (8000c84 <handleCommand+0x98>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fade 	bl	80001d0 <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d02c      	beq.n	8000c74 <handleCommand+0x88>
  {
	  //turning_on_led();
  }
  else if (strcmp(cmd, "half") == 0)
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	491a      	ldr	r1, [pc, #104]	; (8000c88 <handleCommand+0x9c>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fad5 	bl	80001d0 <strcmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <handleCommand+0x88>
  {
	  //half_brightness();
  }
  else if(strcmp(cmd, "blink") == 0)
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4916      	ldr	r1, [pc, #88]	; (8000c8c <handleCommand+0xa0>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff facc 	bl	80001d0 <strcmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d01a      	beq.n	8000c74 <handleCommand+0x88>
  {
	  //start_blink();
  }
  else if(strcmp(cmd, "off") == 0)
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4913      	ldr	r1, [pc, #76]	; (8000c90 <handleCommand+0xa4>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fac3 	bl	80001d0 <strcmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d011      	beq.n	8000c74 <handleCommand+0x88>
  {
	  //turning_off_led();
  }
  else if(strcmp(cmd, "time") == 0)
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	490f      	ldr	r1, [pc, #60]	; (8000c94 <handleCommand+0xa8>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff faba 	bl	80001d0 <strcmp>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <handleCommand+0x7e>
  {
	  printFullTime(&clock);
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <handleCommand+0xac>)
 8000c64:	f7ff fcc0 	bl	80005e8 <printFullTime>
 8000c68:	e004      	b.n	8000c74 <handleCommand+0x88>
  }
  else
  {
	  printf("Invalid command\r\n");
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <handleCommand+0xb0>)
 8000c6c:	f003 ff56 	bl	8004b1c <puts>
 8000c70:	e000      	b.n	8000c74 <handleCommand+0x88>
	  return;
 8000c72:	bf00      	nop
  }
}
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	0800646c 	.word	0x0800646c
 8000c80:	200001f4 	.word	0x200001f4
 8000c84:	08006474 	.word	0x08006474
 8000c88:	0800647c 	.word	0x0800647c
 8000c8c:	08006484 	.word	0x08006484
 8000c90:	0800648c 	.word	0x0800648c
 8000c94:	08006490 	.word	0x08006490
 8000c98:	20000260 	.word	0x20000260
 8000c9c:	08006498 	.word	0x08006498

08000ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d10c      	bne.n	8000d14 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_TIM_PWM_MspInit+0x68>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_TIM_PWM_MspInit+0x68>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_TIM_PWM_MspInit+0x68>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d12:	e018      	b.n	8000d46 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d113      	bne.n	8000d46 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_TIM_PWM_MspInit+0x68>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_TIM_PWM_MspInit+0x68>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_TIM_PWM_MspInit+0x68>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	201d      	movs	r0, #29
 8000d3c:	f000 fb4d 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d40:	201d      	movs	r0, #29
 8000d42:	f000 fb66 	bl	8001412 <HAL_NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40000400 	.word	0x40000400

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_TIM_Base_MspInit+0x44>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d113      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_TIM_Base_MspInit+0x48>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <HAL_TIM_Base_MspInit+0x48>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_TIM_Base_MspInit+0x48>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2036      	movs	r0, #54	; 0x36
 8000d88:	f000 fb27 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d8c:	2036      	movs	r0, #54	; 0x36
 8000d8e:	f000 fb40 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40001000 	.word	0x40001000
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d11d      	bne.n	8000e02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dde:	2320      	movs	r3, #32
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dee:	2301      	movs	r3, #1
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 fb24 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e00:	e020      	b.n	8000e44 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_TIM_MspPostInit+0xac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d11b      	bne.n	8000e44 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e24:	2310      	movs	r3, #16
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e34:	2302      	movs	r3, #2
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_TIM_MspPostInit+0xb0>)
 8000e40:	f000 fb02 	bl	8001448 <HAL_GPIO_Init>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40000400 	.word	0x40000400
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ac      	sub	sp, #176	; 0xb0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2288      	movs	r2, #136	; 0x88
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fdc1 	bl	8004a00 <memset>
  if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <HAL_UART_MspInit+0xb0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d13b      	bne.n	8000f00 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fb21 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff fde4 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f000 faa4 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	37b0      	adds	r7, #176	; 0xb0
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f942 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM3_IRQHandler+0x10>)
 8000f6a:	f002 f892 	bl	8003092 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000d8 	.word	0x200000d8

08000f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000f7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f80:	f000 fc24 	bl	80017cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f88:	f000 fc20 	bl	80017cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM6_DAC_IRQHandler+0x10>)
 8000f96:	f002 f87c 	bl	8003092 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000124 	.word	0x20000124

08000fa4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
	}

return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001006:	605a      	str	r2, [r3, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f003 fc98 	bl	80049ac <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20018000 	.word	0x20018000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	20000264 	.word	0x20000264
 80010b0:	20000280 	.word	0x20000280

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f003 fc57 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff faad 	bl	8000668 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800111c:	080066c4 	.word	0x080066c4
  ldr r2, =_sbss
 8001120:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001124:	2000027c 	.word	0x2000027c

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>
	...

0800112c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_Init+0x3c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_Init+0x3c>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001142:	2003      	movs	r0, #3
 8001144:	f000 f93e 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001148:	2000      	movs	r0, #0
 800114a:	f000 f80f 	bl	800116c <HAL_InitTick>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	e001      	b.n	800115e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800115a:	f7ff fda1 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115e:	79fb      	ldrb	r3, [r7, #7]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40022000 	.word	0x40022000

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_InitTick+0x6c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d023      	beq.n	80011c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_InitTick+0x70>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_InitTick+0x6c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f949 	bl	800142e <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10f      	bne.n	80011c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d809      	bhi.n	80011bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f913 	bl	80013da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_InitTick+0x74>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e007      	b.n	80011cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e004      	b.n	80011cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e001      	b.n	80011cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000268 	.word	0x20000268

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000268 	.word	0x20000268

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e17f      	b.n	8001758 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8171 	beq.w	8001752 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d005      	beq.n	8001488 <HAL_GPIO_Init+0x40>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d130      	bne.n	80014ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014be:	2201      	movs	r2, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 0201 	and.w	r2, r3, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d118      	bne.n	8001528 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	6939      	ldr	r1, [r7, #16]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80ac 	beq.w	8001752 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <HAL_GPIO_Init+0x330>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	4a5e      	ldr	r2, [pc, #376]	; (8001778 <HAL_GPIO_Init+0x330>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6613      	str	r3, [r2, #96]	; 0x60
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_GPIO_Init+0x330>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001612:	4a5a      	ldr	r2, [pc, #360]	; (800177c <HAL_GPIO_Init+0x334>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800163c:	d025      	beq.n	800168a <HAL_GPIO_Init+0x242>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_GPIO_Init+0x338>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01f      	beq.n	8001686 <HAL_GPIO_Init+0x23e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <HAL_GPIO_Init+0x33c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d019      	beq.n	8001682 <HAL_GPIO_Init+0x23a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <HAL_GPIO_Init+0x340>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0x236>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_GPIO_Init+0x344>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00d      	beq.n	800167a <HAL_GPIO_Init+0x232>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <HAL_GPIO_Init+0x348>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d007      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <HAL_GPIO_Init+0x34c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_GPIO_Init+0x22a>
 800166e:	2306      	movs	r3, #6
 8001670:	e00c      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001672:	2307      	movs	r3, #7
 8001674:	e00a      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001676:	2305      	movs	r3, #5
 8001678:	e008      	b.n	800168c <HAL_GPIO_Init+0x244>
 800167a:	2304      	movs	r3, #4
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x244>
 800167e:	2303      	movs	r3, #3
 8001680:	e004      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001682:	2302      	movs	r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x244>
 800168a:	2300      	movs	r3, #0
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	f002 0203 	and.w	r2, r2, #3
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	4093      	lsls	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169c:	4937      	ldr	r1, [pc, #220]	; (800177c <HAL_GPIO_Init+0x334>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ce:	4a32      	ldr	r2, [pc, #200]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f8:	4a27      	ldr	r2, [pc, #156]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_GPIO_Init+0x350>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_GPIO_Init+0x350>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_GPIO_Init+0x350>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_GPIO_Init+0x350>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae78 	bne.w	8001458 <HAL_GPIO_Init+0x10>
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800
 8001788:	48000c00 	.word	0x48000c00
 800178c:	48001000 	.word	0x48001000
 8001790:	48001400 	.word	0x48001400
 8001794:	48001800 	.word	0x48001800
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
 80017a8:	4613      	mov	r3, r2
 80017aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ac:	787b      	ldrb	r3, [r7, #1]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f806 	bl	80017fc <HAL_GPIO_EXTI_Callback>
  }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_PWREx_GetVoltageRange+0x18>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800183e:	d130      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184c:	d038      	beq.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2232      	movs	r2, #50	; 0x32
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001874:	e002      	b.n	800187c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3b01      	subs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d102      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x60>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f2      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189c:	d110      	bne.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e00f      	b.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	d007      	beq.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018b8:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83

080018dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e3ca      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4b97      	ldr	r3, [pc, #604]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f8:	4b94      	ldr	r3, [pc, #592]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80e4 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_RCC_OscConfig+0x4a>
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	f040 808b 	bne.w	8001a34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f040 8087 	bne.w	8001a34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x62>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e3a2      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_RCC_OscConfig+0x7c>
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001956:	e005      	b.n	8001964 <HAL_RCC_OscConfig+0x88>
 8001958:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001964:	4293      	cmp	r3, r2
 8001966:	d223      	bcs.n	80019b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fd55 	bl	800241c <RCC_SetFlashLatencyFromMSIRange>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e383      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197c:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a72      	ldr	r2, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	496d      	ldr	r1, [pc, #436]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800199a:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	4968      	ldr	r1, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e025      	b.n	80019fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4960      	ldr	r1, [pc, #384]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ce:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	495b      	ldr	r1, [pc, #364]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fd15 	bl	800241c <RCC_SetFlashLatencyFromMSIRange>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e343      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019fc:	f000 fc4a 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	4950      	ldr	r1, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_RCC_OscConfig+0x278>)
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fba3 	bl	800116c <HAL_InitTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d052      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	e327      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d032      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a3c:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fbe0 	bl	800120c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a50:	f7ff fbdc 	bl	800120c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e310      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4931      	ldr	r1, [pc, #196]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	492c      	ldr	r1, [pc, #176]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e01a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fbad 	bl	800120c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fba9 	bl	800120c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e2dd      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1da>
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d074      	beq.n	8001bce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x21a>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d10e      	bne.n	8001b0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d064      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d160      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e2ba      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x24a>
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e026      	b.n	8001b74 <HAL_RCC_OscConfig+0x298>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2e:	d115      	bne.n	8001b5c <HAL_RCC_OscConfig+0x280>
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a02      	ldr	r2, [pc, #8]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x298>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	080064b8 	.word	0x080064b8
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	4ba0      	ldr	r3, [pc, #640]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a9f      	ldr	r2, [pc, #636]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b9d      	ldr	r3, [pc, #628]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a9c      	ldr	r2, [pc, #624]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb46 	bl	800120c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fb42 	bl	800120c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e276      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b96:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2a8>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb32 	bl	800120c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb2e 	bl	800120c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e262      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bbe:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x2d0>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d060      	beq.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x310>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d116      	bne.n	8001c1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	4b7c      	ldr	r3, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x328>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e23f      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	4973      	ldr	r1, [pc, #460]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	e040      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d023      	beq.n	8001c6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff faed 	bl	800120c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fae9 	bl	800120c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e21d      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b62      	ldr	r3, [pc, #392]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	495f      	ldr	r1, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
 8001c68:	e018      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fac9 	bl	800120c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fac5 	bl	800120c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1f9      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01c      	beq.n	8001cea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff faa4 	bl	800120c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff faa0 	bl	800120c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1d4      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ef      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3ec>
 8001ce8:	e01b      	b.n	8001d22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf0:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fa87 	bl	800120c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff fa83 	bl	800120c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1b7      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ef      	bne.n	8001d02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80a6 	beq.w	8001e7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d118      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fa4a 	bl	800120c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7ff fa46 	bl	800120c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e17a      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x508>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4d8>
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db2:	e029      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d115      	bne.n	8001de8 <HAL_RCC_OscConfig+0x50c>
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	4b9c      	ldr	r3, [pc, #624]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a9b      	ldr	r2, [pc, #620]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df8:	4b98      	ldr	r3, [pc, #608]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a97      	ldr	r2, [pc, #604]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d016      	beq.n	8001e3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff f9fc 	bl	800120c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7ff f9f8 	bl	800120c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e12a      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ed      	beq.n	8001e18 <HAL_RCC_OscConfig+0x53c>
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f9e5 	bl	800120c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff f9e1 	bl	800120c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e113      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5c:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ed      	bne.n	8001e46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b7a      	ldr	r3, [pc, #488]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a79      	ldr	r2, [pc, #484]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80fe 	beq.w	8002082 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	f040 80d0 	bne.w	8002030 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d130      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d127      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d11f      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed0:	2a07      	cmp	r2, #7
 8001ed2:	bf14      	ite	ne
 8001ed4:	2201      	movne	r2, #1
 8001ed6:	2200      	moveq	r2, #0
 8001ed8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d113      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d06e      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d069      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0ad      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f34:	f7ff f96a 	bl	800120c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f966 	bl	800120c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e09a      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x784>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f6a:	3a01      	subs	r2, #1
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f74:	0212      	lsls	r2, r2, #8
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f7c:	0852      	lsrs	r2, r2, #1
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0552      	lsls	r2, r2, #21
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f88:	0852      	lsrs	r2, r2, #1
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	0652      	lsls	r2, r2, #25
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f94:	0912      	lsrs	r2, r2, #4
 8001f96:	0452      	lsls	r2, r2, #17
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	4930      	ldr	r1, [pc, #192]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2d      	ldr	r2, [pc, #180]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb8:	f7ff f928 	bl	800120c <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff f924 	bl	800120c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e058      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fde:	e050      	b.n	8002082 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e04f      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d148      	bne.n	8002082 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002008:	f7ff f900 	bl	800120c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f8fc 	bl	800120c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e030      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x734>
 800202e:	e028      	b.n	8002082 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d023      	beq.n	800207e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_OscConfig+0x780>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_RCC_OscConfig+0x780>)
 800203c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff f8e3 	bl	800120c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	e00c      	b.n	8002064 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff f8df 	bl	800120c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d905      	bls.n	8002064 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
 800205c:	40021000 	.word	0x40021000
 8002060:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ec      	bne.n	800204a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4905      	ldr	r1, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x7b4>)
 8002078:	4013      	ands	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
 800207c:	e001      	b.n	8002082 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	feeefffc 	.word	0xfeeefffc

08002094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0e7      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d910      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b72      	ldr	r3, [pc, #456]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4970      	ldr	r1, [pc, #448]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0cf      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d010      	beq.n	8002106 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d908      	bls.n	8002106 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4960      	ldr	r1, [pc, #384]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04c      	beq.n	80021ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d121      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0a6      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e09a      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800214a:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08e      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215a:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e086      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4943      	ldr	r1, [pc, #268]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217c:	f7ff f846 	bl	800120c <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7ff f842 	bl	800120c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e06e      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d208      	bcs.n	80021da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d210      	bcs.n	800220a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 0207 	bic.w	r2, r3, #7
 80021f0:	4923      	ldr	r1, [pc, #140]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_RCC_ClockConfig+0x1ec>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e036      	b.n	8002278 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4918      	ldr	r1, [pc, #96]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4910      	ldr	r1, [pc, #64]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002248:	f000 f824 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	490b      	ldr	r1, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1f4>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1f8>)
 8002266:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1fc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe ff7d 	bl	800116c <HAL_InitTick>
 8002272:	4603      	mov	r3, r0
 8002274:	72fb      	strb	r3, [r7, #11]

  return status;
 8002276:	7afb      	ldrb	r3, [r7, #11]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	080064b8 	.word	0x080064b8
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x34>
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d121      	bne.n	8002306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d11e      	bne.n	8002306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e005      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002304:	e00a      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d102      	bne.n	8002312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e004      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d101      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800231a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d134      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0xa6>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d003      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0xac>
 8002338:	e005      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800233c:	617b      	str	r3, [r7, #20]
      break;
 800233e:	e005      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002342:	617b      	str	r3, [r7, #20]
      break;
 8002344:	e002      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	617b      	str	r3, [r7, #20]
      break;
 800234a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	fb03 f202 	mul.w	r2, r3, r2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	0e5b      	lsrs	r3, r3, #25
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	3301      	adds	r3, #1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800238c:	69bb      	ldr	r3, [r7, #24]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	080064d0 	.word	0x080064d0
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	007a1200 	.word	0x007a1200

080023ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	080064c8 	.word	0x080064c8

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023f4:	f7ff ffda 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0adb      	lsrs	r3, r3, #11
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	080064c8 	.word	0x080064c8

0800241c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002434:	f7ff f9ee 	bl	8001814 <HAL_PWREx_GetVoltageRange>
 8002438:	6178      	str	r0, [r7, #20]
 800243a:	e014      	b.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002454:	f7ff f9de 	bl	8001814 <HAL_PWREx_GetVoltageRange>
 8002458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246c:	d10b      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d919      	bls.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2ba0      	cmp	r3, #160	; 0xa0
 8002478:	d902      	bls.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800247a:	2302      	movs	r3, #2
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e013      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002480:	2301      	movs	r3, #1
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e010      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d902      	bls.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800248c:	2303      	movs	r3, #3
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e00a      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d102      	bne.n	800249e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002498:	2302      	movs	r3, #2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	e004      	b.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d101      	bne.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a4:	2301      	movs	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 0207 	bic.w	r2, r3, #7
 80024b0:	4909      	ldr	r1, [pc, #36]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40022000 	.word	0x40022000

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d041      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002500:	d02a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002502:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002506:	d824      	bhi.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800250c:	d008      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800250e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002512:	d81e      	bhi.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251c:	d010      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800251e:	e018      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002520:	4b86      	ldr	r3, [pc, #536]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a85      	ldr	r2, [pc, #532]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252c:	e015      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fabb 	bl	8002ab0 <RCCEx_PLLSAI1_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253e:	e00c      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3320      	adds	r3, #32
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fba6 	bl	8002c98 <RCCEx_PLLSAI2_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002550:	e003      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	74fb      	strb	r3, [r7, #19]
      break;
 8002556:	e000      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256e:	4973      	ldr	r1, [pc, #460]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002576:	e001      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d041      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800258c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002590:	d02a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002592:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002596:	d824      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800259e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a2:	d81e      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d010      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ae:	e018      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a61      	ldr	r2, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025bc:	e015      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fa73 	bl	8002ab0 <RCCEx_PLLSAI1_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ce:	e00c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3320      	adds	r3, #32
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fb5e 	bl	8002c98 <RCCEx_PLLSAI2_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e0:	e003      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	74fb      	strb	r3, [r7, #19]
      break;
 80025e6:	e000      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f0:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fe:	494f      	ldr	r1, [pc, #316]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002606:	e001      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a0 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4a40      	ldr	r2, [pc, #256]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	; 0x58
 8002640:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264c:	2301      	movs	r3, #1
 800264e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800265c:	f7fe fdd6 	bl	800120c <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002662:	e009      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe fdd2 	bl	800120c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	74fb      	strb	r3, [r7, #19]
        break;
 8002676:	e005      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d15c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002694:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01f      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d019      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a20      	ldr	r2, [pc, #128]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fd91 	bl	800120c <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ec:	e00b      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fd8d 	bl	800120c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d902      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	74fb      	strb	r3, [r7, #19]
            break;
 8002704:	e006      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ec      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002732:	e009      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a9d      	ldr	r2, [pc, #628]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	4994      	ldr	r1, [pc, #592]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b8f      	ldr	r3, [pc, #572]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 020c 	bic.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	498c      	ldr	r1, [pc, #560]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027aa:	4b87      	ldr	r3, [pc, #540]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4983      	ldr	r1, [pc, #524]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027cc:	4b7e      	ldr	r3, [pc, #504]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	497b      	ldr	r1, [pc, #492]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	4972      	ldr	r1, [pc, #456]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002810:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	496a      	ldr	r1, [pc, #424]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	4961      	ldr	r1, [pc, #388]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002854:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	4959      	ldr	r1, [pc, #356]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	4950      	ldr	r1, [pc, #320]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	4948      	ldr	r1, [pc, #288]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	493f      	ldr	r1, [pc, #252]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d028      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	4937      	ldr	r1, [pc, #220]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fa:	d106      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
 8002908:	e011      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002912:	d10c      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8c8 	bl	8002ab0 <RCCEx_PLLSAI1_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d028      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	491f      	ldr	r1, [pc, #124]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002958:	d106      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002964:	60d3      	str	r3, [r2, #12]
 8002966:	e011      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002970:	d10c      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f899 	bl	8002ab0 <RCCEx_PLLSAI1_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02b      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b6:	d109      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a02      	ldr	r2, [pc, #8]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	e014      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f867 	bl	8002ab0 <RCCEx_PLLSAI1_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e6:	7cfb      	ldrb	r3, [r7, #19]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d02f      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0a:	4928      	ldr	r1, [pc, #160]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	2102      	movs	r1, #2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f844 	bl	8002ab0 <RCCEx_PLLSAI1_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d014      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	74bb      	strb	r3, [r7, #18]
 8002a36:	e011      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3320      	adds	r3, #32
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f925 	bl	8002c98 <RCCEx_PLLSAI2_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a76:	490d      	ldr	r1, [pc, #52]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aa2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000

08002ab0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002abe:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d018      	beq.n	8002afc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aca:	4b72      	ldr	r3, [pc, #456]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d10d      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ae2:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
       ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d047      	beq.n	8002b86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e044      	b.n	8002b86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d018      	beq.n	8002b36 <RCCEx_PLLSAI1_Config+0x86>
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d825      	bhi.n	8002b54 <RCCEx_PLLSAI1_Config+0xa4>
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d002      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x62>
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d009      	beq.n	8002b24 <RCCEx_PLLSAI1_Config+0x74>
 8002b10:	e020      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b12:	4b60      	ldr	r3, [pc, #384]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11d      	bne.n	8002b5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b22:	e01a      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b24:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d116      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b34:	e013      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b36:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10f      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b42:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b52:	e006      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e004      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e002      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10d      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	4944      	ldr	r1, [pc, #272]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d17d      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b98:	f7fe fb38 	bl	800120c <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9e:	e009      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba0:	f7fe fb34 	bl	800120c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb2:	e005      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bb4:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ef      	bne.n	8002ba0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d160      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d111      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6892      	ldr	r2, [r2, #8]
 8002bdc:	0211      	lsls	r1, r2, #8
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	0912      	lsrs	r2, r2, #4
 8002be4:	0452      	lsls	r2, r2, #17
 8002be6:	430a      	orrs	r2, r1
 8002be8:	492a      	ldr	r1, [pc, #168]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	610b      	str	r3, [r1, #16]
 8002bee:	e027      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d112      	bne.n	8002c1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	0211      	lsls	r1, r2, #8
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6912      	ldr	r2, [r2, #16]
 8002c0c:	0852      	lsrs	r2, r2, #1
 8002c0e:	3a01      	subs	r2, #1
 8002c10:	0552      	lsls	r2, r2, #21
 8002c12:	430a      	orrs	r2, r1
 8002c14:	491f      	ldr	r1, [pc, #124]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	610b      	str	r3, [r1, #16]
 8002c1a:	e011      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	0211      	lsls	r1, r2, #8
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6952      	ldr	r2, [r2, #20]
 8002c32:	0852      	lsrs	r2, r2, #1
 8002c34:	3a01      	subs	r2, #1
 8002c36:	0652      	lsls	r2, r2, #25
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	4916      	ldr	r1, [pc, #88]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c40:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fade 	bl	800120c <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c52:	e009      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c54:	f7fe fada 	bl	800120c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	73fb      	strb	r3, [r7, #15]
          break;
 8002c66:	e005      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cb2:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d10d      	bne.n	8002cde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d047      	beq.n	8002d6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e044      	b.n	8002d6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d018      	beq.n	8002d1e <RCCEx_PLLSAI2_Config+0x86>
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d825      	bhi.n	8002d3c <RCCEx_PLLSAI2_Config+0xa4>
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <RCCEx_PLLSAI2_Config+0x62>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d009      	beq.n	8002d0c <RCCEx_PLLSAI2_Config+0x74>
 8002cf8:	e020      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cfa:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11d      	bne.n	8002d42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0a:	e01a      	b.n	8002d42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e013      	b.n	8002d46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d3a:	e006      	b.n	8002d4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e004      	b.n	8002d4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	430b      	orrs	r3, r1
 8002d68:	4939      	ldr	r1, [pc, #228]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d167      	bne.n	8002e44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d74:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a35      	ldr	r2, [pc, #212]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d80:	f7fe fa44 	bl	800120c <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d86:	e009      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d88:	f7fe fa40 	bl	800120c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9a:	e005      	b.n	8002da8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ef      	bne.n	8002d88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d14a      	bne.n	8002e44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002db4:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	0912      	lsrs	r2, r2, #4
 8002dcc:	0452      	lsls	r2, r2, #17
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	491f      	ldr	r1, [pc, #124]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	614b      	str	r3, [r1, #20]
 8002dd6:	e011      	b.n	8002dfc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002de0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6892      	ldr	r2, [r2, #8]
 8002de8:	0211      	lsls	r1, r2, #8
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6912      	ldr	r2, [r2, #16]
 8002dee:	0852      	lsrs	r2, r2, #1
 8002df0:	3a01      	subs	r2, #1
 8002df2:	0652      	lsls	r2, r2, #25
 8002df4:	430a      	orrs	r2, r1
 8002df6:	4916      	ldr	r1, [pc, #88]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe fa00 	bl	800120c <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e0e:	e009      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e10:	f7fe f9fc 	bl	800120c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	73fb      	strb	r3, [r7, #15]
          break;
 8002e22:	e005      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ef      	beq.n	8002e10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4904      	ldr	r1, [pc, #16]	; (8002e50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e049      	b.n	8002efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd ff6c 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 fb58 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e04f      	b.n	8002fbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x76>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d018      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x76>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x76>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x76>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x76>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x76>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d115      	bne.n	8002fa6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d015      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0xb4>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d011      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	e008      	b.n	8002fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e000      	b.n	8002fba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40000c00 	.word	0x40000c00
 8002fd8:	40013400 	.word	0x40013400
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	00010007 	.word	0x00010007

08002fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e049      	b.n	800308a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fe6c 	bl	8000ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 fa90 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d122      	bne.n	80030ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d11b      	bne.n	80030ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f06f 0202 	mvn.w	r2, #2
 80030be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa19 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80030da:	e005      	b.n	80030e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fa0b 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa1c 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d122      	bne.n	8003142 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d11b      	bne.n	8003142 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0204 	mvn.w	r2, #4
 8003112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f9ef 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 800312e:	e005      	b.n	800313c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f9e1 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9f2 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b08      	cmp	r3, #8
 800314e:	d122      	bne.n	8003196 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11b      	bne.n	8003196 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0208 	mvn.w	r2, #8
 8003166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f9c5 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 8003182:	e005      	b.n	8003190 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f9b7 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9c8 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d122      	bne.n	80031ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d11b      	bne.n	80031ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f06f 0210 	mvn.w	r2, #16
 80031ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2208      	movs	r2, #8
 80031c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f99b 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80031d6:	e005      	b.n	80031e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f98d 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f99e 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d10e      	bne.n	8003216 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0201 	mvn.w	r2, #1
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd fc59 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d10e      	bne.n	8003242 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d107      	bne.n	8003242 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800323a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fd85 	bl	8003d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fd78 	bl	8003d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f94c 	bl	8003534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0220 	mvn.w	r2, #32
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fd38 	bl	8003d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0ff      	b.n	80034ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b14      	cmp	r3, #20
 80032fa:	f200 80f0 	bhi.w	80034de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003359 	.word	0x08003359
 8003308:	080034df 	.word	0x080034df
 800330c:	080034df 	.word	0x080034df
 8003310:	080034df 	.word	0x080034df
 8003314:	08003399 	.word	0x08003399
 8003318:	080034df 	.word	0x080034df
 800331c:	080034df 	.word	0x080034df
 8003320:	080034df 	.word	0x080034df
 8003324:	080033db 	.word	0x080033db
 8003328:	080034df 	.word	0x080034df
 800332c:	080034df 	.word	0x080034df
 8003330:	080034df 	.word	0x080034df
 8003334:	0800341b 	.word	0x0800341b
 8003338:	080034df 	.word	0x080034df
 800333c:	080034df 	.word	0x080034df
 8003340:	080034df 	.word	0x080034df
 8003344:	0800345d 	.word	0x0800345d
 8003348:	080034df 	.word	0x080034df
 800334c:	080034df 	.word	0x080034df
 8003350:	080034df 	.word	0x080034df
 8003354:	0800349d 	.word	0x0800349d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f98c 	bl	800367c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
      break;
 8003396:	e0a5      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9fc 	bl	800379c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e084      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa65 	bl	80038b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0208 	orr.w	r2, r2, #8
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0204 	bic.w	r2, r2, #4
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e064      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 facd 	bl	80039c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
      break;
 800345a:	e043      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fb16 	bl	8003a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800349a:	e023      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fb5a 	bl	8003b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034dc:	e002      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
      break;
 80034e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop

080034f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a40      	ldr	r2, [pc, #256]	; (800365c <TIM_Base_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d00f      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <TIM_Base_SetConfig+0x118>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3c      	ldr	r2, [pc, #240]	; (8003664 <TIM_Base_SetConfig+0x11c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <TIM_Base_SetConfig+0x120>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3a      	ldr	r2, [pc, #232]	; (800366c <TIM_Base_SetConfig+0x124>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <TIM_Base_SetConfig+0x114>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d01b      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <TIM_Base_SetConfig+0x118>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d017      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <TIM_Base_SetConfig+0x11c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <TIM_Base_SetConfig+0x120>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00f      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a29      	ldr	r2, [pc, #164]	; (800366c <TIM_Base_SetConfig+0x124>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <TIM_Base_SetConfig+0x128>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <TIM_Base_SetConfig+0x12c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_Base_SetConfig+0x130>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <TIM_Base_SetConfig+0x114>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00f      	beq.n	8003640 <TIM_Base_SetConfig+0xf8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <TIM_Base_SetConfig+0x124>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00b      	beq.n	8003640 <TIM_Base_SetConfig+0xf8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a11      	ldr	r2, [pc, #68]	; (8003670 <TIM_Base_SetConfig+0x128>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d007      	beq.n	8003640 <TIM_Base_SetConfig+0xf8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <TIM_Base_SetConfig+0x12c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_Base_SetConfig+0xf8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <TIM_Base_SetConfig+0x130>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d103      	bne.n	8003648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	615a      	str	r2, [r3, #20]
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	40013400 	.word	0x40013400
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0302 	bic.w	r3, r3, #2
 80036c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2c      	ldr	r2, [pc, #176]	; (8003788 <TIM_OC1_SetConfig+0x10c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00f      	beq.n	80036fc <TIM_OC1_SetConfig+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a2b      	ldr	r2, [pc, #172]	; (800378c <TIM_OC1_SetConfig+0x110>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_OC1_SetConfig+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <TIM_OC1_SetConfig+0x114>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_OC1_SetConfig+0x80>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <TIM_OC1_SetConfig+0x118>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_OC1_SetConfig+0x80>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <TIM_OC1_SetConfig+0x11c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d10c      	bne.n	8003716 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0308 	bic.w	r3, r3, #8
 8003702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <TIM_OC1_SetConfig+0x10c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00f      	beq.n	800373e <TIM_OC1_SetConfig+0xc2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1a      	ldr	r2, [pc, #104]	; (800378c <TIM_OC1_SetConfig+0x110>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_OC1_SetConfig+0xc2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <TIM_OC1_SetConfig+0x114>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_OC1_SetConfig+0xc2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <TIM_OC1_SetConfig+0x118>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC1_SetConfig+0xc2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a17      	ldr	r2, [pc, #92]	; (8003798 <TIM_OC1_SetConfig+0x11c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d111      	bne.n	8003762 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800374c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800

0800379c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0210 	bic.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0320 	bic.w	r3, r3, #32
 80037ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a28      	ldr	r2, [pc, #160]	; (800389c <TIM_OC2_SetConfig+0x100>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_OC2_SetConfig+0x6c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a27      	ldr	r2, [pc, #156]	; (80038a0 <TIM_OC2_SetConfig+0x104>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10d      	bne.n	8003824 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1d      	ldr	r2, [pc, #116]	; (800389c <TIM_OC2_SetConfig+0x100>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <TIM_OC2_SetConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <TIM_OC2_SetConfig+0x104>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_OC2_SetConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <TIM_OC2_SetConfig+0x108>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_OC2_SetConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <TIM_OC2_SetConfig+0x10c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0xb0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a19      	ldr	r2, [pc, #100]	; (80038ac <TIM_OC2_SetConfig+0x110>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d113      	bne.n	8003874 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <TIM_OC3_SetConfig+0xfc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_OC3_SetConfig+0x6a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <TIM_OC3_SetConfig+0x100>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10d      	bne.n	8003936 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <TIM_OC3_SetConfig+0xfc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00f      	beq.n	800395e <TIM_OC3_SetConfig+0xae>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <TIM_OC3_SetConfig+0x100>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00b      	beq.n	800395e <TIM_OC3_SetConfig+0xae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <TIM_OC3_SetConfig+0x104>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_OC3_SetConfig+0xae>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <TIM_OC3_SetConfig+0x108>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_OC3_SetConfig+0xae>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a18      	ldr	r2, [pc, #96]	; (80039bc <TIM_OC3_SetConfig+0x10c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d113      	bne.n	8003986 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800396c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40013400 	.word	0x40013400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <TIM_OC4_SetConfig+0xc0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00f      	beq.n	8003a44 <TIM_OC4_SetConfig+0x84>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <TIM_OC4_SetConfig+0xc4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <TIM_OC4_SetConfig+0x84>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <TIM_OC4_SetConfig+0xc8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_OC4_SetConfig+0x84>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <TIM_OC4_SetConfig+0xcc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_OC4_SetConfig+0x84>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <TIM_OC4_SetConfig+0xd0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d109      	bne.n	8003a58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40013400 	.word	0x40013400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800

08003a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ad8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <TIM_OC5_SetConfig+0xb4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00f      	beq.n	8003b0e <TIM_OC5_SetConfig+0x7a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <TIM_OC5_SetConfig+0xb8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_OC5_SetConfig+0x7a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <TIM_OC5_SetConfig+0xbc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_OC5_SetConfig+0x7a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <TIM_OC5_SetConfig+0xc0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC5_SetConfig+0x7a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <TIM_OC5_SetConfig+0xc4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d109      	bne.n	8003b22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	621a      	str	r2, [r3, #32]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40013400 	.word	0x40013400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800

08003b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	051b      	lsls	r3, r3, #20
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <TIM_OC6_SetConfig+0xb8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_OC6_SetConfig+0x7c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <TIM_OC6_SetConfig+0xbc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_OC6_SetConfig+0x7c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <TIM_OC6_SetConfig+0xc0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_OC6_SetConfig+0x7c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <TIM_OC6_SetConfig+0xc4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_OC6_SetConfig+0x7c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <TIM_OC6_SetConfig+0xc8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d109      	bne.n	8003bec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	029b      	lsls	r3, r3, #10
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40013400 	.word	0x40013400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e068      	b.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2e      	ldr	r2, [pc, #184]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d108      	bne.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d018      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10c      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40014000 	.word	0x40014000

08003d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e040      	b.n	8003e08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd f85e 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f992 	bl	80040dc <UART_SetConfig>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e022      	b.n	8003e08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fc3e 	bl	800464c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fcc5 	bl	8004790 <UART_CheckIdleState>
 8003e06:	4603      	mov	r3, r0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	f040 8082 	bne.w	8003f2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_UART_Transmit+0x26>
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e07a      	b.n	8003f30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Transmit+0x38>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e073      	b.n	8003f30 <HAL_UART_Transmit+0x120>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2221      	movs	r2, #33	; 0x21
 8003e5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd f9d5 	bl	800120c <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7c:	d108      	bne.n	8003e90 <HAL_UART_Transmit+0x80>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e003      	b.n	8003e98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ea0:	e02d      	b.n	8003efe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fcb8 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e039      	b.n	8003f30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e008      	b.n	8003eec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1cb      	bne.n	8003ea2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fc84 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e005      	b.n	8003f30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	f040 80bf 	bne.w	80040d0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_UART_Receive+0x26>
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0b7      	b.n	80040d2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Receive+0x38>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0b0      	b.n	80040d2 <HAL_UART_Receive+0x19a>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2222      	movs	r2, #34	; 0x22
 8003f84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd f93e 	bl	800120c <HAL_GetTick>
 8003f90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	d10e      	bne.n	8003fca <HAL_UART_Receive+0x92>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <HAL_UART_Receive+0x88>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fbe:	e02d      	b.n	800401c <HAL_UART_Receive+0xe4>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fc8:	e028      	b.n	800401c <HAL_UART_Receive+0xe4>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_UART_Receive+0xb6>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <HAL_UART_Receive+0xac>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	22ff      	movs	r2, #255	; 0xff
 8003fde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fe2:	e01b      	b.n	800401c <HAL_UART_Receive+0xe4>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	227f      	movs	r2, #127	; 0x7f
 8003fe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fec:	e016      	b.n	800401c <HAL_UART_Receive+0xe4>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff6:	d10d      	bne.n	8004014 <HAL_UART_Receive+0xdc>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <HAL_UART_Receive+0xd2>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	227f      	movs	r2, #127	; 0x7f
 8004004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004008:	e008      	b.n	800401c <HAL_UART_Receive+0xe4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	223f      	movs	r2, #63	; 0x3f
 800400e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004012:	e003      	b.n	800401c <HAL_UART_Receive+0xe4>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004022:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	d108      	bne.n	8004040 <HAL_UART_Receive+0x108>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	e003      	b.n	8004048 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004050:	e033      	b.n	80040ba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	2120      	movs	r1, #32
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fbe0 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e032      	b.n	80040d2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004078:	b29a      	uxth	r2, r3
 800407a:	8a7b      	ldrh	r3, [r7, #18]
 800407c:	4013      	ands	r3, r2
 800407e:	b29a      	uxth	r2, r3
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	3302      	adds	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e00d      	b.n	80040a8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004092:	b29b      	uxth	r3, r3
 8004094:	b2da      	uxtb	r2, r3
 8004096:	8a7b      	ldrh	r3, [r7, #18]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4013      	ands	r3, r2
 800409c:	b2da      	uxtb	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1c5      	bne.n	8004052 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b08a      	sub	sp, #40	; 0x28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4313      	orrs	r3, r2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4ba4      	ldr	r3, [pc, #656]	; (800439c <UART_SetConfig+0x2c0>)
 800410c:	4013      	ands	r3, r2
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004114:	430b      	orrs	r3, r1
 8004116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a99      	ldr	r2, [pc, #612]	; (80043a0 <UART_SetConfig+0x2c4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	4313      	orrs	r3, r2
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a90      	ldr	r2, [pc, #576]	; (80043a4 <UART_SetConfig+0x2c8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d126      	bne.n	80041b4 <UART_SetConfig+0xd8>
 8004166:	4b90      	ldr	r3, [pc, #576]	; (80043a8 <UART_SetConfig+0x2cc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b03      	cmp	r3, #3
 8004172:	d81b      	bhi.n	80041ac <UART_SetConfig+0xd0>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0xa0>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800419d 	.word	0x0800419d
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a5 	.word	0x080041a5
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e116      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004194:	2302      	movs	r3, #2
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e112      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a2:	e10e      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041aa:	e10a      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b2:	e106      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7c      	ldr	r2, [pc, #496]	; (80043ac <UART_SetConfig+0x2d0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d138      	bne.n	8004230 <UART_SetConfig+0x154>
 80041be:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <UART_SetConfig+0x2cc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d82d      	bhi.n	8004228 <UART_SetConfig+0x14c>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0xf8>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004229 	.word	0x08004229
 80041dc:	08004229 	.word	0x08004229
 80041e0:	08004229 	.word	0x08004229
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004229 	.word	0x08004229
 80041ec:	08004229 	.word	0x08004229
 80041f0:	08004229 	.word	0x08004229
 80041f4:	08004211 	.word	0x08004211
 80041f8:	08004229 	.word	0x08004229
 80041fc:	08004229 	.word	0x08004229
 8004200:	08004229 	.word	0x08004229
 8004204:	08004221 	.word	0x08004221
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e0d8      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004210:	2302      	movs	r3, #2
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e0d4      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421e:	e0d0      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004226:	e0cc      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e0c8      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5e      	ldr	r2, [pc, #376]	; (80043b0 <UART_SetConfig+0x2d4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d125      	bne.n	8004286 <UART_SetConfig+0x1aa>
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <UART_SetConfig+0x2cc>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004244:	2b30      	cmp	r3, #48	; 0x30
 8004246:	d016      	beq.n	8004276 <UART_SetConfig+0x19a>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d818      	bhi.n	800427e <UART_SetConfig+0x1a2>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d00a      	beq.n	8004266 <UART_SetConfig+0x18a>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d814      	bhi.n	800427e <UART_SetConfig+0x1a2>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <UART_SetConfig+0x182>
 8004258:	2b10      	cmp	r3, #16
 800425a:	d008      	beq.n	800426e <UART_SetConfig+0x192>
 800425c:	e00f      	b.n	800427e <UART_SetConfig+0x1a2>
 800425e:	2300      	movs	r3, #0
 8004260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004264:	e0ad      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004266:	2302      	movs	r3, #2
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426c:	e0a9      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800426e:	2304      	movs	r3, #4
 8004270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004274:	e0a5      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004276:	2308      	movs	r3, #8
 8004278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427c:	e0a1      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800427e:	2310      	movs	r3, #16
 8004280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004284:	e09d      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <UART_SetConfig+0x2d8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d125      	bne.n	80042dc <UART_SetConfig+0x200>
 8004290:	4b45      	ldr	r3, [pc, #276]	; (80043a8 <UART_SetConfig+0x2cc>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800429a:	2bc0      	cmp	r3, #192	; 0xc0
 800429c:	d016      	beq.n	80042cc <UART_SetConfig+0x1f0>
 800429e:	2bc0      	cmp	r3, #192	; 0xc0
 80042a0:	d818      	bhi.n	80042d4 <UART_SetConfig+0x1f8>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d00a      	beq.n	80042bc <UART_SetConfig+0x1e0>
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d814      	bhi.n	80042d4 <UART_SetConfig+0x1f8>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <UART_SetConfig+0x1d8>
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d008      	beq.n	80042c4 <UART_SetConfig+0x1e8>
 80042b2:	e00f      	b.n	80042d4 <UART_SetConfig+0x1f8>
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e082      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80042bc:	2302      	movs	r3, #2
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e07e      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80042c4:	2304      	movs	r3, #4
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e07a      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80042cc:	2308      	movs	r3, #8
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e076      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80042d4:	2310      	movs	r3, #16
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e072      	b.n	80043c2 <UART_SetConfig+0x2e6>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a35      	ldr	r2, [pc, #212]	; (80043b8 <UART_SetConfig+0x2dc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d12a      	bne.n	800433c <UART_SetConfig+0x260>
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <UART_SetConfig+0x2cc>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f4:	d01a      	beq.n	800432c <UART_SetConfig+0x250>
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d81b      	bhi.n	8004334 <UART_SetConfig+0x258>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d00c      	beq.n	800431c <UART_SetConfig+0x240>
 8004302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004306:	d815      	bhi.n	8004334 <UART_SetConfig+0x258>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <UART_SetConfig+0x238>
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d008      	beq.n	8004324 <UART_SetConfig+0x248>
 8004312:	e00f      	b.n	8004334 <UART_SetConfig+0x258>
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e052      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800431c:	2302      	movs	r3, #2
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e04e      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e04a      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e046      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e042      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <UART_SetConfig+0x2c4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d13a      	bne.n	80043bc <UART_SetConfig+0x2e0>
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <UART_SetConfig+0x2cc>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004354:	d01a      	beq.n	800438c <UART_SetConfig+0x2b0>
 8004356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800435a:	d81b      	bhi.n	8004394 <UART_SetConfig+0x2b8>
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004360:	d00c      	beq.n	800437c <UART_SetConfig+0x2a0>
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004366:	d815      	bhi.n	8004394 <UART_SetConfig+0x2b8>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <UART_SetConfig+0x298>
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d008      	beq.n	8004384 <UART_SetConfig+0x2a8>
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x2b8>
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e022      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e01e      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e01a      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e016      	b.n	80043c2 <UART_SetConfig+0x2e6>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e012      	b.n	80043c2 <UART_SetConfig+0x2e6>
 800439c:	efff69f3 	.word	0xefff69f3
 80043a0:	40008000 	.word	0x40008000
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40004800 	.word	0x40004800
 80043b4:	40004c00 	.word	0x40004c00
 80043b8:	40005000 	.word	0x40005000
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a9f      	ldr	r2, [pc, #636]	; (8004644 <UART_SetConfig+0x568>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d17a      	bne.n	80044c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d824      	bhi.n	800441e <UART_SetConfig+0x342>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x300>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004401 	.word	0x08004401
 80043e0:	0800441f 	.word	0x0800441f
 80043e4:	08004409 	.word	0x08004409
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	0800440f 	.word	0x0800440f
 80043f0:	0800441f 	.word	0x0800441f
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	0800441f 	.word	0x0800441f
 80043fc:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fd ffe0 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8004404:	61f8      	str	r0, [r7, #28]
        break;
 8004406:	e010      	b.n	800442a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b8f      	ldr	r3, [pc, #572]	; (8004648 <UART_SetConfig+0x56c>)
 800440a:	61fb      	str	r3, [r7, #28]
        break;
 800440c:	e00d      	b.n	800442a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7fd ff41 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8004412:	61f8      	str	r0, [r7, #28]
        break;
 8004414:	e009      	b.n	800442a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441a:	61fb      	str	r3, [r7, #28]
        break;
 800441c:	e005      	b.n	800442a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80fb 	beq.w	8004628 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d305      	bcc.n	800444e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004454:	e0e8      	b.n	8004628 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2200      	movs	r2, #0
 800445a:	461c      	mov	r4, r3
 800445c:	4615      	mov	r5, r2
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	022b      	lsls	r3, r5, #8
 8004468:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800446c:	0222      	lsls	r2, r4, #8
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	6849      	ldr	r1, [r1, #4]
 8004472:	0849      	lsrs	r1, r1, #1
 8004474:	2000      	movs	r0, #0
 8004476:	4688      	mov	r8, r1
 8004478:	4681      	mov	r9, r0
 800447a:	eb12 0a08 	adds.w	sl, r2, r8
 800447e:	eb43 0b09 	adc.w	fp, r3, r9
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004490:	4650      	mov	r0, sl
 8004492:	4659      	mov	r1, fp
 8004494:	f7fb ff04 	bl	80002a0 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a6:	d308      	bcc.n	80044ba <UART_SetConfig+0x3de>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ae:	d204      	bcs.n	80044ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	e0b6      	b.n	8004628 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044c0:	e0b2      	b.n	8004628 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ca:	d15e      	bne.n	800458a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d828      	bhi.n	8004526 <UART_SetConfig+0x44a>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <UART_SetConfig+0x400>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004509 	.word	0x08004509
 80044e4:	08004511 	.word	0x08004511
 80044e8:	08004527 	.word	0x08004527
 80044ec:	08004517 	.word	0x08004517
 80044f0:	08004527 	.word	0x08004527
 80044f4:	08004527 	.word	0x08004527
 80044f8:	08004527 	.word	0x08004527
 80044fc:	0800451f 	.word	0x0800451f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7fd ff60 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8004504:	61f8      	str	r0, [r7, #28]
        break;
 8004506:	e014      	b.n	8004532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7fd ff72 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 800450c:	61f8      	str	r0, [r7, #28]
        break;
 800450e:	e010      	b.n	8004532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004510:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <UART_SetConfig+0x56c>)
 8004512:	61fb      	str	r3, [r7, #28]
        break;
 8004514:	e00d      	b.n	8004532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004516:	f7fd febd 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 800451a:	61f8      	str	r0, [r7, #28]
        break;
 800451c:	e009      	b.n	8004532 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	61fb      	str	r3, [r7, #28]
        break;
 8004524:	e005      	b.n	8004532 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d077      	beq.n	8004628 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005a      	lsls	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b0f      	cmp	r3, #15
 8004552:	d916      	bls.n	8004582 <UART_SetConfig+0x4a6>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455a:	d212      	bcs.n	8004582 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f023 030f 	bic.w	r3, r3, #15
 8004564:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	b29b      	uxth	r3, r3
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	b29a      	uxth	r2, r3
 8004572:	8afb      	ldrh	r3, [r7, #22]
 8004574:	4313      	orrs	r3, r2
 8004576:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	8afa      	ldrh	r2, [r7, #22]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	e052      	b.n	8004628 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004588:	e04e      	b.n	8004628 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800458e:	2b08      	cmp	r3, #8
 8004590:	d827      	bhi.n	80045e2 <UART_SetConfig+0x506>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0x4bc>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fd ff02 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80045c0:	61f8      	str	r0, [r7, #28]
        break;
 80045c2:	e014      	b.n	80045ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fd ff14 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 80045c8:	61f8      	str	r0, [r7, #28]
        break;
 80045ca:	e010      	b.n	80045ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <UART_SetConfig+0x56c>)
 80045ce:	61fb      	str	r3, [r7, #28]
        break;
 80045d0:	e00d      	b.n	80045ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fd fe5f 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80045d6:	61f8      	str	r0, [r7, #28]
        break;
 80045d8:	e009      	b.n	80045ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045de:	61fb      	str	r3, [r7, #28]
        break;
 80045e0:	e005      	b.n	80045ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045ec:	bf00      	nop
    }

    if (pclk != 0U)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d019      	beq.n	8004628 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	085a      	lsrs	r2, r3, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b0f      	cmp	r3, #15
 800460c:	d909      	bls.n	8004622 <UART_SetConfig+0x546>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d205      	bcs.n	8004622 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	e002      	b.n	8004628 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004634:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004638:	4618      	mov	r0, r3
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004642:	bf00      	nop
 8004644:	40008000 	.word	0x40008000
 8004648:	00f42400 	.word	0x00f42400

0800464c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474a:	d10a      	bne.n	8004762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a0:	f7fc fd34 	bl	800120c <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d10e      	bne.n	80047d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f82d 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e023      	b.n	800481a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d10e      	bne.n	80047fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f817 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00d      	b.n	800481a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b09c      	sub	sp, #112	; 0x70
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	e0a5      	b.n	8004980 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	f000 80a1 	beq.w	8004980 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fc fce5 	bl	800120c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <UART_WaitOnFlagUntilTimeout+0x32>
 800484e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004850:	2b00      	cmp	r3, #0
 8004852:	d13e      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004868:	667b      	str	r3, [r7, #100]	; 0x64
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004874:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004878:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e6      	bne.n	8004854 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	663b      	str	r3, [r7, #96]	; 0x60
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e5      	bne.n	8004886 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e067      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d04f      	beq.n	8004980 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d147      	bne.n	8004980 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800490e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
 800491a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800491e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	613b      	str	r3, [r7, #16]
   return(result);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	66bb      	str	r3, [r7, #104]	; 0x68
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800494c:	623a      	str	r2, [r7, #32]
 800494e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69f9      	ldr	r1, [r7, #28]
 8004952:	6a3a      	ldr	r2, [r7, #32]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	61bb      	str	r3, [r7, #24]
   return(result);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e010      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	429a      	cmp	r2, r3
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	429a      	cmp	r2, r3
 800499c:	f43f af4a 	beq.w	8004834 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3770      	adds	r7, #112	; 0x70
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4d0d      	ldr	r5, [pc, #52]	; (80049f0 <__libc_init_array+0x38>)
 80049bc:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <__libc_init_array+0x3c>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	2600      	movs	r6, #0
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	4d0b      	ldr	r5, [pc, #44]	; (80049f8 <__libc_init_array+0x40>)
 80049ca:	4c0c      	ldr	r4, [pc, #48]	; (80049fc <__libc_init_array+0x44>)
 80049cc:	f001 fd26 	bl	800641c <_init>
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	2600      	movs	r6, #0
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	080066bc 	.word	0x080066bc
 80049f4:	080066bc 	.word	0x080066bc
 80049f8:	080066bc 	.word	0x080066bc
 80049fc:	080066c0 	.word	0x080066c0

08004a00 <memset>:
 8004a00:	4402      	add	r2, r0
 8004a02:	4603      	mov	r3, r0
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d100      	bne.n	8004a0a <memset+0xa>
 8004a08:	4770      	bx	lr
 8004a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0e:	e7f9      	b.n	8004a04 <memset+0x4>

08004a10 <iprintf>:
 8004a10:	b40f      	push	{r0, r1, r2, r3}
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <iprintf+0x2c>)
 8004a14:	b513      	push	{r0, r1, r4, lr}
 8004a16:	681c      	ldr	r4, [r3, #0]
 8004a18:	b124      	cbz	r4, 8004a24 <iprintf+0x14>
 8004a1a:	69a3      	ldr	r3, [r4, #24]
 8004a1c:	b913      	cbnz	r3, 8004a24 <iprintf+0x14>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 faf2 	bl	8005008 <__sinit>
 8004a24:	ab05      	add	r3, sp, #20
 8004a26:	9a04      	ldr	r2, [sp, #16]
 8004a28:	68a1      	ldr	r1, [r4, #8]
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fedf 	bl	80057f0 <_vfiprintf_r>
 8004a32:	b002      	add	sp, #8
 8004a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a38:	b004      	add	sp, #16
 8004a3a:	4770      	bx	lr
 8004a3c:	2000000c 	.word	0x2000000c

08004a40 <_puts_r>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	460e      	mov	r6, r1
 8004a44:	4605      	mov	r5, r0
 8004a46:	b118      	cbz	r0, 8004a50 <_puts_r+0x10>
 8004a48:	6983      	ldr	r3, [r0, #24]
 8004a4a:	b90b      	cbnz	r3, 8004a50 <_puts_r+0x10>
 8004a4c:	f000 fadc 	bl	8005008 <__sinit>
 8004a50:	69ab      	ldr	r3, [r5, #24]
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	b913      	cbnz	r3, 8004a5c <_puts_r+0x1c>
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 fad6 	bl	8005008 <__sinit>
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <_puts_r+0xd0>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	d120      	bne.n	8004aa4 <_puts_r+0x64>
 8004a62:	686c      	ldr	r4, [r5, #4]
 8004a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d405      	bmi.n	8004a76 <_puts_r+0x36>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	0598      	lsls	r0, r3, #22
 8004a6e:	d402      	bmi.n	8004a76 <_puts_r+0x36>
 8004a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a72:	f000 fb67 	bl	8005144 <__retarget_lock_acquire_recursive>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	0719      	lsls	r1, r3, #28
 8004a7a:	d51d      	bpl.n	8004ab8 <_puts_r+0x78>
 8004a7c:	6923      	ldr	r3, [r4, #16]
 8004a7e:	b1db      	cbz	r3, 8004ab8 <_puts_r+0x78>
 8004a80:	3e01      	subs	r6, #1
 8004a82:	68a3      	ldr	r3, [r4, #8]
 8004a84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	bb39      	cbnz	r1, 8004ade <_puts_r+0x9e>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da38      	bge.n	8004b04 <_puts_r+0xc4>
 8004a92:	4622      	mov	r2, r4
 8004a94:	210a      	movs	r1, #10
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 f8ba 	bl	8004c10 <__swbuf_r>
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d011      	beq.n	8004ac4 <_puts_r+0x84>
 8004aa0:	250a      	movs	r5, #10
 8004aa2:	e011      	b.n	8004ac8 <_puts_r+0x88>
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <_puts_r+0xd4>)
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d101      	bne.n	8004aae <_puts_r+0x6e>
 8004aaa:	68ac      	ldr	r4, [r5, #8]
 8004aac:	e7da      	b.n	8004a64 <_puts_r+0x24>
 8004aae:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <_puts_r+0xd8>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	bf08      	it	eq
 8004ab4:	68ec      	ldreq	r4, [r5, #12]
 8004ab6:	e7d5      	b.n	8004a64 <_puts_r+0x24>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f90c 	bl	8004cd8 <__swsetup_r>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0dd      	beq.n	8004a80 <_puts_r+0x40>
 8004ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aca:	07da      	lsls	r2, r3, #31
 8004acc:	d405      	bmi.n	8004ada <_puts_r+0x9a>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	059b      	lsls	r3, r3, #22
 8004ad2:	d402      	bmi.n	8004ada <_puts_r+0x9a>
 8004ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad6:	f000 fb36 	bl	8005146 <__retarget_lock_release_recursive>
 8004ada:	4628      	mov	r0, r5
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da04      	bge.n	8004aec <_puts_r+0xac>
 8004ae2:	69a2      	ldr	r2, [r4, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	dc06      	bgt.n	8004af6 <_puts_r+0xb6>
 8004ae8:	290a      	cmp	r1, #10
 8004aea:	d004      	beq.n	8004af6 <_puts_r+0xb6>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	7019      	strb	r1, [r3, #0]
 8004af4:	e7c5      	b.n	8004a82 <_puts_r+0x42>
 8004af6:	4622      	mov	r2, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f889 	bl	8004c10 <__swbuf_r>
 8004afe:	3001      	adds	r0, #1
 8004b00:	d1bf      	bne.n	8004a82 <_puts_r+0x42>
 8004b02:	e7df      	b.n	8004ac4 <_puts_r+0x84>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	250a      	movs	r5, #10
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	701d      	strb	r5, [r3, #0]
 8004b0e:	e7db      	b.n	8004ac8 <_puts_r+0x88>
 8004b10:	08006524 	.word	0x08006524
 8004b14:	08006544 	.word	0x08006544
 8004b18:	08006504 	.word	0x08006504

08004b1c <puts>:
 8004b1c:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <puts+0xc>)
 8004b1e:	4601      	mov	r1, r0
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	f7ff bf8d 	b.w	8004a40 <_puts_r>
 8004b26:	bf00      	nop
 8004b28:	2000000c 	.word	0x2000000c

08004b2c <siscanf>:
 8004b2c:	b40e      	push	{r1, r2, r3}
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	b09f      	sub	sp, #124	; 0x7c
 8004b32:	ac21      	add	r4, sp, #132	; 0x84
 8004b34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b38:	f854 2b04 	ldr.w	r2, [r4], #4
 8004b3c:	9201      	str	r2, [sp, #4]
 8004b3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004b42:	9004      	str	r0, [sp, #16]
 8004b44:	9008      	str	r0, [sp, #32]
 8004b46:	f7fb fb4d 	bl	80001e4 <strlen>
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <siscanf+0x50>)
 8004b4c:	9005      	str	r0, [sp, #20]
 8004b4e:	9009      	str	r0, [sp, #36]	; 0x24
 8004b50:	930d      	str	r3, [sp, #52]	; 0x34
 8004b52:	480b      	ldr	r0, [pc, #44]	; (8004b80 <siscanf+0x54>)
 8004b54:	9a01      	ldr	r2, [sp, #4]
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	9403      	str	r4, [sp, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9311      	str	r3, [sp, #68]	; 0x44
 8004b5e:	9316      	str	r3, [sp, #88]	; 0x58
 8004b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004b68:	a904      	add	r1, sp, #16
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	f000 fc9e 	bl	80054ac <__ssvfiscanf_r>
 8004b70:	b01f      	add	sp, #124	; 0x7c
 8004b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b76:	b003      	add	sp, #12
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	08004ba7 	.word	0x08004ba7
 8004b80:	2000000c 	.word	0x2000000c

08004b84 <__sread>:
 8004b84:	b510      	push	{r4, lr}
 8004b86:	460c      	mov	r4, r1
 8004b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8c:	f001 fa46 	bl	800601c <_read_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	bfab      	itete	ge
 8004b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b96:	89a3      	ldrhlt	r3, [r4, #12]
 8004b98:	181b      	addge	r3, r3, r0
 8004b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b9e:	bfac      	ite	ge
 8004ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ba2:	81a3      	strhlt	r3, [r4, #12]
 8004ba4:	bd10      	pop	{r4, pc}

08004ba6 <__seofread>:
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	4770      	bx	lr

08004baa <__swrite>:
 8004baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	461f      	mov	r7, r3
 8004bb0:	898b      	ldrh	r3, [r1, #12]
 8004bb2:	05db      	lsls	r3, r3, #23
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	4616      	mov	r6, r2
 8004bba:	d505      	bpl.n	8004bc8 <__swrite+0x1e>
 8004bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f000 fac0 	bl	8005148 <_lseek_r>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	4628      	mov	r0, r5
 8004bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bde:	f000 b869 	b.w	8004cb4 <_write_r>

08004be2 <__sseek>:
 8004be2:	b510      	push	{r4, lr}
 8004be4:	460c      	mov	r4, r1
 8004be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bea:	f000 faad 	bl	8005148 <_lseek_r>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	bf15      	itete	ne
 8004bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bfe:	81a3      	strheq	r3, [r4, #12]
 8004c00:	bf18      	it	ne
 8004c02:	81a3      	strhne	r3, [r4, #12]
 8004c04:	bd10      	pop	{r4, pc}

08004c06 <__sclose>:
 8004c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0a:	f000 b8d3 	b.w	8004db4 <_close_r>
	...

08004c10 <__swbuf_r>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	460e      	mov	r6, r1
 8004c14:	4614      	mov	r4, r2
 8004c16:	4605      	mov	r5, r0
 8004c18:	b118      	cbz	r0, 8004c22 <__swbuf_r+0x12>
 8004c1a:	6983      	ldr	r3, [r0, #24]
 8004c1c:	b90b      	cbnz	r3, 8004c22 <__swbuf_r+0x12>
 8004c1e:	f000 f9f3 	bl	8005008 <__sinit>
 8004c22:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <__swbuf_r+0x98>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	d12b      	bne.n	8004c80 <__swbuf_r+0x70>
 8004c28:	686c      	ldr	r4, [r5, #4]
 8004c2a:	69a3      	ldr	r3, [r4, #24]
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	071a      	lsls	r2, r3, #28
 8004c32:	d52f      	bpl.n	8004c94 <__swbuf_r+0x84>
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	b36b      	cbz	r3, 8004c94 <__swbuf_r+0x84>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1ac0      	subs	r0, r0, r3
 8004c3e:	6963      	ldr	r3, [r4, #20]
 8004c40:	b2f6      	uxtb	r6, r6
 8004c42:	4283      	cmp	r3, r0
 8004c44:	4637      	mov	r7, r6
 8004c46:	dc04      	bgt.n	8004c52 <__swbuf_r+0x42>
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 f948 	bl	8004ee0 <_fflush_r>
 8004c50:	bb30      	cbnz	r0, 8004ca0 <__swbuf_r+0x90>
 8004c52:	68a3      	ldr	r3, [r4, #8]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	60a3      	str	r3, [r4, #8]
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	6022      	str	r2, [r4, #0]
 8004c5e:	701e      	strb	r6, [r3, #0]
 8004c60:	6963      	ldr	r3, [r4, #20]
 8004c62:	3001      	adds	r0, #1
 8004c64:	4283      	cmp	r3, r0
 8004c66:	d004      	beq.n	8004c72 <__swbuf_r+0x62>
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	07db      	lsls	r3, r3, #31
 8004c6c:	d506      	bpl.n	8004c7c <__swbuf_r+0x6c>
 8004c6e:	2e0a      	cmp	r6, #10
 8004c70:	d104      	bne.n	8004c7c <__swbuf_r+0x6c>
 8004c72:	4621      	mov	r1, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f933 	bl	8004ee0 <_fflush_r>
 8004c7a:	b988      	cbnz	r0, 8004ca0 <__swbuf_r+0x90>
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <__swbuf_r+0x9c>)
 8004c82:	429c      	cmp	r4, r3
 8004c84:	d101      	bne.n	8004c8a <__swbuf_r+0x7a>
 8004c86:	68ac      	ldr	r4, [r5, #8]
 8004c88:	e7cf      	b.n	8004c2a <__swbuf_r+0x1a>
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <__swbuf_r+0xa0>)
 8004c8c:	429c      	cmp	r4, r3
 8004c8e:	bf08      	it	eq
 8004c90:	68ec      	ldreq	r4, [r5, #12]
 8004c92:	e7ca      	b.n	8004c2a <__swbuf_r+0x1a>
 8004c94:	4621      	mov	r1, r4
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 f81e 	bl	8004cd8 <__swsetup_r>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d0cb      	beq.n	8004c38 <__swbuf_r+0x28>
 8004ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca4:	e7ea      	b.n	8004c7c <__swbuf_r+0x6c>
 8004ca6:	bf00      	nop
 8004ca8:	08006524 	.word	0x08006524
 8004cac:	08006544 	.word	0x08006544
 8004cb0:	08006504 	.word	0x08006504

08004cb4 <_write_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d07      	ldr	r5, [pc, #28]	; (8004cd4 <_write_r+0x20>)
 8004cb8:	4604      	mov	r4, r0
 8004cba:	4608      	mov	r0, r1
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	602a      	str	r2, [r5, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fb feea 	bl	8000a9c <_write>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_write_r+0x1e>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_write_r+0x1e>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20000278 	.word	0x20000278

08004cd8 <__swsetup_r>:
 8004cd8:	4b32      	ldr	r3, [pc, #200]	; (8004da4 <__swsetup_r+0xcc>)
 8004cda:	b570      	push	{r4, r5, r6, lr}
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	b125      	cbz	r5, 8004cee <__swsetup_r+0x16>
 8004ce4:	69ab      	ldr	r3, [r5, #24]
 8004ce6:	b913      	cbnz	r3, 8004cee <__swsetup_r+0x16>
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 f98d 	bl	8005008 <__sinit>
 8004cee:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <__swsetup_r+0xd0>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	d10f      	bne.n	8004d14 <__swsetup_r+0x3c>
 8004cf4:	686c      	ldr	r4, [r5, #4]
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cfc:	0719      	lsls	r1, r3, #28
 8004cfe:	d42c      	bmi.n	8004d5a <__swsetup_r+0x82>
 8004d00:	06dd      	lsls	r5, r3, #27
 8004d02:	d411      	bmi.n	8004d28 <__swsetup_r+0x50>
 8004d04:	2309      	movs	r3, #9
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d0c:	81a3      	strh	r3, [r4, #12]
 8004d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d12:	e03e      	b.n	8004d92 <__swsetup_r+0xba>
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <__swsetup_r+0xd4>)
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d101      	bne.n	8004d1e <__swsetup_r+0x46>
 8004d1a:	68ac      	ldr	r4, [r5, #8]
 8004d1c:	e7eb      	b.n	8004cf6 <__swsetup_r+0x1e>
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <__swsetup_r+0xd8>)
 8004d20:	429c      	cmp	r4, r3
 8004d22:	bf08      	it	eq
 8004d24:	68ec      	ldreq	r4, [r5, #12]
 8004d26:	e7e6      	b.n	8004cf6 <__swsetup_r+0x1e>
 8004d28:	0758      	lsls	r0, r3, #29
 8004d2a:	d512      	bpl.n	8004d52 <__swsetup_r+0x7a>
 8004d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d2e:	b141      	cbz	r1, 8004d42 <__swsetup_r+0x6a>
 8004d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d34:	4299      	cmp	r1, r3
 8004d36:	d002      	beq.n	8004d3e <__swsetup_r+0x66>
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 fa7d 	bl	8005238 <_free_r>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6363      	str	r3, [r4, #52]	; 0x34
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	b94b      	cbnz	r3, 8004d72 <__swsetup_r+0x9a>
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d68:	d003      	beq.n	8004d72 <__swsetup_r+0x9a>
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 fa23 	bl	80051b8 <__smakebuf_r>
 8004d72:	89a0      	ldrh	r0, [r4, #12]
 8004d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d78:	f010 0301 	ands.w	r3, r0, #1
 8004d7c:	d00a      	beq.n	8004d94 <__swsetup_r+0xbc>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60a3      	str	r3, [r4, #8]
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	425b      	negs	r3, r3
 8004d86:	61a3      	str	r3, [r4, #24]
 8004d88:	6923      	ldr	r3, [r4, #16]
 8004d8a:	b943      	cbnz	r3, 8004d9e <__swsetup_r+0xc6>
 8004d8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d90:	d1ba      	bne.n	8004d08 <__swsetup_r+0x30>
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	0781      	lsls	r1, r0, #30
 8004d96:	bf58      	it	pl
 8004d98:	6963      	ldrpl	r3, [r4, #20]
 8004d9a:	60a3      	str	r3, [r4, #8]
 8004d9c:	e7f4      	b.n	8004d88 <__swsetup_r+0xb0>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e7f7      	b.n	8004d92 <__swsetup_r+0xba>
 8004da2:	bf00      	nop
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	08006524 	.word	0x08006524
 8004dac:	08006544 	.word	0x08006544
 8004db0:	08006504 	.word	0x08006504

08004db4 <_close_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d06      	ldr	r5, [pc, #24]	; (8004dd0 <_close_r+0x1c>)
 8004db8:	2300      	movs	r3, #0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	f7fc f90d 	bl	8000fde <_close>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_close_r+0x1a>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_close_r+0x1a>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	20000278 	.word	0x20000278

08004dd4 <__sflush_r>:
 8004dd4:	898a      	ldrh	r2, [r1, #12]
 8004dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dda:	4605      	mov	r5, r0
 8004ddc:	0710      	lsls	r0, r2, #28
 8004dde:	460c      	mov	r4, r1
 8004de0:	d458      	bmi.n	8004e94 <__sflush_r+0xc0>
 8004de2:	684b      	ldr	r3, [r1, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dc05      	bgt.n	8004df4 <__sflush_r+0x20>
 8004de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dc02      	bgt.n	8004df4 <__sflush_r+0x20>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d0f9      	beq.n	8004dee <__sflush_r+0x1a>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e00:	682f      	ldr	r7, [r5, #0]
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	d032      	beq.n	8004e6c <__sflush_r+0x98>
 8004e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	075a      	lsls	r2, r3, #29
 8004e0c:	d505      	bpl.n	8004e1a <__sflush_r+0x46>
 8004e0e:	6863      	ldr	r3, [r4, #4]
 8004e10:	1ac0      	subs	r0, r0, r3
 8004e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e14:	b10b      	cbz	r3, 8004e1a <__sflush_r+0x46>
 8004e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e18:	1ac0      	subs	r0, r0, r3
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e20:	6a21      	ldr	r1, [r4, #32]
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b0      	blx	r6
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	d106      	bne.n	8004e3a <__sflush_r+0x66>
 8004e2c:	6829      	ldr	r1, [r5, #0]
 8004e2e:	291d      	cmp	r1, #29
 8004e30:	d82c      	bhi.n	8004e8c <__sflush_r+0xb8>
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <__sflush_r+0x108>)
 8004e34:	40ca      	lsrs	r2, r1
 8004e36:	07d6      	lsls	r6, r2, #31
 8004e38:	d528      	bpl.n	8004e8c <__sflush_r+0xb8>
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	6062      	str	r2, [r4, #4]
 8004e3e:	04d9      	lsls	r1, r3, #19
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	d504      	bpl.n	8004e50 <__sflush_r+0x7c>
 8004e46:	1c42      	adds	r2, r0, #1
 8004e48:	d101      	bne.n	8004e4e <__sflush_r+0x7a>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	b903      	cbnz	r3, 8004e50 <__sflush_r+0x7c>
 8004e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e52:	602f      	str	r7, [r5, #0]
 8004e54:	2900      	cmp	r1, #0
 8004e56:	d0ca      	beq.n	8004dee <__sflush_r+0x1a>
 8004e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	d002      	beq.n	8004e66 <__sflush_r+0x92>
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 f9e9 	bl	8005238 <_free_r>
 8004e66:	2000      	movs	r0, #0
 8004e68:	6360      	str	r0, [r4, #52]	; 0x34
 8004e6a:	e7c1      	b.n	8004df0 <__sflush_r+0x1c>
 8004e6c:	6a21      	ldr	r1, [r4, #32]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b0      	blx	r6
 8004e74:	1c41      	adds	r1, r0, #1
 8004e76:	d1c7      	bne.n	8004e08 <__sflush_r+0x34>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0c4      	beq.n	8004e08 <__sflush_r+0x34>
 8004e7e:	2b1d      	cmp	r3, #29
 8004e80:	d001      	beq.n	8004e86 <__sflush_r+0xb2>
 8004e82:	2b16      	cmp	r3, #22
 8004e84:	d101      	bne.n	8004e8a <__sflush_r+0xb6>
 8004e86:	602f      	str	r7, [r5, #0]
 8004e88:	e7b1      	b.n	8004dee <__sflush_r+0x1a>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	e7ad      	b.n	8004df0 <__sflush_r+0x1c>
 8004e94:	690f      	ldr	r7, [r1, #16]
 8004e96:	2f00      	cmp	r7, #0
 8004e98:	d0a9      	beq.n	8004dee <__sflush_r+0x1a>
 8004e9a:	0793      	lsls	r3, r2, #30
 8004e9c:	680e      	ldr	r6, [r1, #0]
 8004e9e:	bf08      	it	eq
 8004ea0:	694b      	ldreq	r3, [r1, #20]
 8004ea2:	600f      	str	r7, [r1, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	eba6 0807 	sub.w	r8, r6, r7
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	f1b8 0f00 	cmp.w	r8, #0
 8004eb2:	dd9c      	ble.n	8004dee <__sflush_r+0x1a>
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004eb8:	4643      	mov	r3, r8
 8004eba:	463a      	mov	r2, r7
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b0      	blx	r6
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	dc06      	bgt.n	8004ed2 <__sflush_r+0xfe>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	e78e      	b.n	8004df0 <__sflush_r+0x1c>
 8004ed2:	4407      	add	r7, r0
 8004ed4:	eba8 0800 	sub.w	r8, r8, r0
 8004ed8:	e7e9      	b.n	8004eae <__sflush_r+0xda>
 8004eda:	bf00      	nop
 8004edc:	20400001 	.word	0x20400001

08004ee0 <_fflush_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b913      	cbnz	r3, 8004ef0 <_fflush_r+0x10>
 8004eea:	2500      	movs	r5, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	b118      	cbz	r0, 8004efa <_fflush_r+0x1a>
 8004ef2:	6983      	ldr	r3, [r0, #24]
 8004ef4:	b90b      	cbnz	r3, 8004efa <_fflush_r+0x1a>
 8004ef6:	f000 f887 	bl	8005008 <__sinit>
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <_fflush_r+0x6c>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	d11b      	bne.n	8004f38 <_fflush_r+0x58>
 8004f00:	686c      	ldr	r4, [r5, #4]
 8004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0ef      	beq.n	8004eea <_fflush_r+0xa>
 8004f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f0c:	07d0      	lsls	r0, r2, #31
 8004f0e:	d404      	bmi.n	8004f1a <_fflush_r+0x3a>
 8004f10:	0599      	lsls	r1, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_fflush_r+0x3a>
 8004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f16:	f000 f915 	bl	8005144 <__retarget_lock_acquire_recursive>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	f7ff ff59 	bl	8004dd4 <__sflush_r>
 8004f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f24:	07da      	lsls	r2, r3, #31
 8004f26:	4605      	mov	r5, r0
 8004f28:	d4e0      	bmi.n	8004eec <_fflush_r+0xc>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	059b      	lsls	r3, r3, #22
 8004f2e:	d4dd      	bmi.n	8004eec <_fflush_r+0xc>
 8004f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f32:	f000 f908 	bl	8005146 <__retarget_lock_release_recursive>
 8004f36:	e7d9      	b.n	8004eec <_fflush_r+0xc>
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <_fflush_r+0x70>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d101      	bne.n	8004f42 <_fflush_r+0x62>
 8004f3e:	68ac      	ldr	r4, [r5, #8]
 8004f40:	e7df      	b.n	8004f02 <_fflush_r+0x22>
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <_fflush_r+0x74>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf08      	it	eq
 8004f48:	68ec      	ldreq	r4, [r5, #12]
 8004f4a:	e7da      	b.n	8004f02 <_fflush_r+0x22>
 8004f4c:	08006524 	.word	0x08006524
 8004f50:	08006544 	.word	0x08006544
 8004f54:	08006504 	.word	0x08006504

08004f58 <std>:
 8004f58:	2300      	movs	r3, #0
 8004f5a:	b510      	push	{r4, lr}
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f66:	6083      	str	r3, [r0, #8]
 8004f68:	8181      	strh	r1, [r0, #12]
 8004f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f6c:	81c2      	strh	r2, [r0, #14]
 8004f6e:	6183      	str	r3, [r0, #24]
 8004f70:	4619      	mov	r1, r3
 8004f72:	2208      	movs	r2, #8
 8004f74:	305c      	adds	r0, #92	; 0x5c
 8004f76:	f7ff fd43 	bl	8004a00 <memset>
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <std+0x38>)
 8004f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <std+0x3c>)
 8004f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <std+0x40>)
 8004f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <std+0x44>)
 8004f88:	6224      	str	r4, [r4, #32]
 8004f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	bf00      	nop
 8004f90:	08004b85 	.word	0x08004b85
 8004f94:	08004bab 	.word	0x08004bab
 8004f98:	08004be3 	.word	0x08004be3
 8004f9c:	08004c07 	.word	0x08004c07

08004fa0 <_cleanup_r>:
 8004fa0:	4901      	ldr	r1, [pc, #4]	; (8004fa8 <_cleanup_r+0x8>)
 8004fa2:	f000 b8af 	b.w	8005104 <_fwalk_reent>
 8004fa6:	bf00      	nop
 8004fa8:	08004ee1 	.word	0x08004ee1

08004fac <__sfmoreglue>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	2268      	movs	r2, #104	; 0x68
 8004fb0:	1e4d      	subs	r5, r1, #1
 8004fb2:	4355      	muls	r5, r2
 8004fb4:	460e      	mov	r6, r1
 8004fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fba:	f000 f9a9 	bl	8005310 <_malloc_r>
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	b140      	cbz	r0, 8004fd4 <__sfmoreglue+0x28>
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8004fc8:	300c      	adds	r0, #12
 8004fca:	60a0      	str	r0, [r4, #8]
 8004fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fd0:	f7ff fd16 	bl	8004a00 <memset>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}

08004fd8 <__sfp_lock_acquire>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sfp_lock_acquire+0x8>)
 8004fda:	f000 b8b3 	b.w	8005144 <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	2000026d 	.word	0x2000026d

08004fe4 <__sfp_lock_release>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__sfp_lock_release+0x8>)
 8004fe6:	f000 b8ae 	b.w	8005146 <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	2000026d 	.word	0x2000026d

08004ff0 <__sinit_lock_acquire>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__sinit_lock_acquire+0x8>)
 8004ff2:	f000 b8a7 	b.w	8005144 <__retarget_lock_acquire_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	2000026e 	.word	0x2000026e

08004ffc <__sinit_lock_release>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__sinit_lock_release+0x8>)
 8004ffe:	f000 b8a2 	b.w	8005146 <__retarget_lock_release_recursive>
 8005002:	bf00      	nop
 8005004:	2000026e 	.word	0x2000026e

08005008 <__sinit>:
 8005008:	b510      	push	{r4, lr}
 800500a:	4604      	mov	r4, r0
 800500c:	f7ff fff0 	bl	8004ff0 <__sinit_lock_acquire>
 8005010:	69a3      	ldr	r3, [r4, #24]
 8005012:	b11b      	cbz	r3, 800501c <__sinit+0x14>
 8005014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005018:	f7ff bff0 	b.w	8004ffc <__sinit_lock_release>
 800501c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005020:	6523      	str	r3, [r4, #80]	; 0x50
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <__sinit+0x68>)
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <__sinit+0x6c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	62a2      	str	r2, [r4, #40]	; 0x28
 800502a:	42a3      	cmp	r3, r4
 800502c:	bf04      	itt	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	61a3      	streq	r3, [r4, #24]
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f820 	bl	8005078 <__sfp>
 8005038:	6060      	str	r0, [r4, #4]
 800503a:	4620      	mov	r0, r4
 800503c:	f000 f81c 	bl	8005078 <__sfp>
 8005040:	60a0      	str	r0, [r4, #8]
 8005042:	4620      	mov	r0, r4
 8005044:	f000 f818 	bl	8005078 <__sfp>
 8005048:	2200      	movs	r2, #0
 800504a:	60e0      	str	r0, [r4, #12]
 800504c:	2104      	movs	r1, #4
 800504e:	6860      	ldr	r0, [r4, #4]
 8005050:	f7ff ff82 	bl	8004f58 <std>
 8005054:	68a0      	ldr	r0, [r4, #8]
 8005056:	2201      	movs	r2, #1
 8005058:	2109      	movs	r1, #9
 800505a:	f7ff ff7d 	bl	8004f58 <std>
 800505e:	68e0      	ldr	r0, [r4, #12]
 8005060:	2202      	movs	r2, #2
 8005062:	2112      	movs	r1, #18
 8005064:	f7ff ff78 	bl	8004f58 <std>
 8005068:	2301      	movs	r3, #1
 800506a:	61a3      	str	r3, [r4, #24]
 800506c:	e7d2      	b.n	8005014 <__sinit+0xc>
 800506e:	bf00      	nop
 8005070:	08006500 	.word	0x08006500
 8005074:	08004fa1 	.word	0x08004fa1

08005078 <__sfp>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	4607      	mov	r7, r0
 800507c:	f7ff ffac 	bl	8004fd8 <__sfp_lock_acquire>
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <__sfp+0x84>)
 8005082:	681e      	ldr	r6, [r3, #0]
 8005084:	69b3      	ldr	r3, [r6, #24]
 8005086:	b913      	cbnz	r3, 800508e <__sfp+0x16>
 8005088:	4630      	mov	r0, r6
 800508a:	f7ff ffbd 	bl	8005008 <__sinit>
 800508e:	3648      	adds	r6, #72	; 0x48
 8005090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005094:	3b01      	subs	r3, #1
 8005096:	d503      	bpl.n	80050a0 <__sfp+0x28>
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	b30b      	cbz	r3, 80050e0 <__sfp+0x68>
 800509c:	6836      	ldr	r6, [r6, #0]
 800509e:	e7f7      	b.n	8005090 <__sfp+0x18>
 80050a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050a4:	b9d5      	cbnz	r5, 80050dc <__sfp+0x64>
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <__sfp+0x88>)
 80050a8:	60e3      	str	r3, [r4, #12]
 80050aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050ae:	6665      	str	r5, [r4, #100]	; 0x64
 80050b0:	f000 f847 	bl	8005142 <__retarget_lock_init_recursive>
 80050b4:	f7ff ff96 	bl	8004fe4 <__sfp_lock_release>
 80050b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050c0:	6025      	str	r5, [r4, #0]
 80050c2:	61a5      	str	r5, [r4, #24]
 80050c4:	2208      	movs	r2, #8
 80050c6:	4629      	mov	r1, r5
 80050c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050cc:	f7ff fc98 	bl	8004a00 <memset>
 80050d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050d8:	4620      	mov	r0, r4
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	3468      	adds	r4, #104	; 0x68
 80050de:	e7d9      	b.n	8005094 <__sfp+0x1c>
 80050e0:	2104      	movs	r1, #4
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff ff62 	bl	8004fac <__sfmoreglue>
 80050e8:	4604      	mov	r4, r0
 80050ea:	6030      	str	r0, [r6, #0]
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1d5      	bne.n	800509c <__sfp+0x24>
 80050f0:	f7ff ff78 	bl	8004fe4 <__sfp_lock_release>
 80050f4:	230c      	movs	r3, #12
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	e7ee      	b.n	80050d8 <__sfp+0x60>
 80050fa:	bf00      	nop
 80050fc:	08006500 	.word	0x08006500
 8005100:	ffff0001 	.word	0xffff0001

08005104 <_fwalk_reent>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4606      	mov	r6, r0
 800510a:	4688      	mov	r8, r1
 800510c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005110:	2700      	movs	r7, #0
 8005112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005116:	f1b9 0901 	subs.w	r9, r9, #1
 800511a:	d505      	bpl.n	8005128 <_fwalk_reent+0x24>
 800511c:	6824      	ldr	r4, [r4, #0]
 800511e:	2c00      	cmp	r4, #0
 8005120:	d1f7      	bne.n	8005112 <_fwalk_reent+0xe>
 8005122:	4638      	mov	r0, r7
 8005124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005128:	89ab      	ldrh	r3, [r5, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d907      	bls.n	800513e <_fwalk_reent+0x3a>
 800512e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005132:	3301      	adds	r3, #1
 8005134:	d003      	beq.n	800513e <_fwalk_reent+0x3a>
 8005136:	4629      	mov	r1, r5
 8005138:	4630      	mov	r0, r6
 800513a:	47c0      	blx	r8
 800513c:	4307      	orrs	r7, r0
 800513e:	3568      	adds	r5, #104	; 0x68
 8005140:	e7e9      	b.n	8005116 <_fwalk_reent+0x12>

08005142 <__retarget_lock_init_recursive>:
 8005142:	4770      	bx	lr

08005144 <__retarget_lock_acquire_recursive>:
 8005144:	4770      	bx	lr

08005146 <__retarget_lock_release_recursive>:
 8005146:	4770      	bx	lr

08005148 <_lseek_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d07      	ldr	r5, [pc, #28]	; (8005168 <_lseek_r+0x20>)
 800514c:	4604      	mov	r4, r0
 800514e:	4608      	mov	r0, r1
 8005150:	4611      	mov	r1, r2
 8005152:	2200      	movs	r2, #0
 8005154:	602a      	str	r2, [r5, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	f7fb ff68 	bl	800102c <_lseek>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_lseek_r+0x1e>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_lseek_r+0x1e>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	20000278 	.word	0x20000278

0800516c <__swhatbuf_r>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	460e      	mov	r6, r1
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	2900      	cmp	r1, #0
 8005176:	b096      	sub	sp, #88	; 0x58
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	da08      	bge.n	8005190 <__swhatbuf_r+0x24>
 800517e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	602a      	str	r2, [r5, #0]
 8005186:	061a      	lsls	r2, r3, #24
 8005188:	d410      	bmi.n	80051ac <__swhatbuf_r+0x40>
 800518a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518e:	e00e      	b.n	80051ae <__swhatbuf_r+0x42>
 8005190:	466a      	mov	r2, sp
 8005192:	f001 f8cf 	bl	8006334 <_fstat_r>
 8005196:	2800      	cmp	r0, #0
 8005198:	dbf1      	blt.n	800517e <__swhatbuf_r+0x12>
 800519a:	9a01      	ldr	r2, [sp, #4]
 800519c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051a4:	425a      	negs	r2, r3
 80051a6:	415a      	adcs	r2, r3
 80051a8:	602a      	str	r2, [r5, #0]
 80051aa:	e7ee      	b.n	800518a <__swhatbuf_r+0x1e>
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	2000      	movs	r0, #0
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	b016      	add	sp, #88	; 0x58
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080051b8 <__smakebuf_r>:
 80051b8:	898b      	ldrh	r3, [r1, #12]
 80051ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051bc:	079d      	lsls	r5, r3, #30
 80051be:	4606      	mov	r6, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	d507      	bpl.n	80051d4 <__smakebuf_r+0x1c>
 80051c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	2301      	movs	r3, #1
 80051ce:	6163      	str	r3, [r4, #20]
 80051d0:	b002      	add	sp, #8
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	ab01      	add	r3, sp, #4
 80051d6:	466a      	mov	r2, sp
 80051d8:	f7ff ffc8 	bl	800516c <__swhatbuf_r>
 80051dc:	9900      	ldr	r1, [sp, #0]
 80051de:	4605      	mov	r5, r0
 80051e0:	4630      	mov	r0, r6
 80051e2:	f000 f895 	bl	8005310 <_malloc_r>
 80051e6:	b948      	cbnz	r0, 80051fc <__smakebuf_r+0x44>
 80051e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ec:	059a      	lsls	r2, r3, #22
 80051ee:	d4ef      	bmi.n	80051d0 <__smakebuf_r+0x18>
 80051f0:	f023 0303 	bic.w	r3, r3, #3
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	e7e3      	b.n	80051c4 <__smakebuf_r+0xc>
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <__smakebuf_r+0x7c>)
 80051fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	6020      	str	r0, [r4, #0]
 8005204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	9b00      	ldr	r3, [sp, #0]
 800520c:	6163      	str	r3, [r4, #20]
 800520e:	9b01      	ldr	r3, [sp, #4]
 8005210:	6120      	str	r0, [r4, #16]
 8005212:	b15b      	cbz	r3, 800522c <__smakebuf_r+0x74>
 8005214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005218:	4630      	mov	r0, r6
 800521a:	f001 f89d 	bl	8006358 <_isatty_r>
 800521e:	b128      	cbz	r0, 800522c <__smakebuf_r+0x74>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	89a0      	ldrh	r0, [r4, #12]
 800522e:	4305      	orrs	r5, r0
 8005230:	81a5      	strh	r5, [r4, #12]
 8005232:	e7cd      	b.n	80051d0 <__smakebuf_r+0x18>
 8005234:	08004fa1 	.word	0x08004fa1

08005238 <_free_r>:
 8005238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523a:	2900      	cmp	r1, #0
 800523c:	d044      	beq.n	80052c8 <_free_r+0x90>
 800523e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005242:	9001      	str	r0, [sp, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f1a1 0404 	sub.w	r4, r1, #4
 800524a:	bfb8      	it	lt
 800524c:	18e4      	addlt	r4, r4, r3
 800524e:	f001 f8a1 	bl	8006394 <__malloc_lock>
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <_free_r+0x94>)
 8005254:	9801      	ldr	r0, [sp, #4]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x30>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	b003      	add	sp, #12
 8005260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005264:	f001 b89c 	b.w	80063a0 <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x46>
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	1961      	adds	r1, r4, r5
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1949      	addeq	r1, r1, r5
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x22>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x50>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x46>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1855      	adds	r5, r2, r1
 800528c:	42a5      	cmp	r5, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x70>
 8005290:	6824      	ldr	r4, [r4, #0]
 8005292:	4421      	add	r1, r4
 8005294:	1854      	adds	r4, r2, r1
 8005296:	42a3      	cmp	r3, r4
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x26>
 800529c:	681c      	ldr	r4, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	4421      	add	r1, r4
 80052a4:	6011      	str	r1, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x26>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x78>
 80052aa:	230c      	movs	r3, #12
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x26>
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	1961      	adds	r1, r4, r5
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1949      	addeq	r1, r1, r5
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x26>
 80052c8:	b003      	add	sp, #12
 80052ca:	bd30      	pop	{r4, r5, pc}
 80052cc:	20000270 	.word	0x20000270

080052d0 <sbrk_aligned>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4e0e      	ldr	r6, [pc, #56]	; (800530c <sbrk_aligned+0x3c>)
 80052d4:	460c      	mov	r4, r1
 80052d6:	6831      	ldr	r1, [r6, #0]
 80052d8:	4605      	mov	r5, r0
 80052da:	b911      	cbnz	r1, 80052e2 <sbrk_aligned+0x12>
 80052dc:	f000 feb0 	bl	8006040 <_sbrk_r>
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 feab 	bl	8006040 <_sbrk_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d00a      	beq.n	8005304 <sbrk_aligned+0x34>
 80052ee:	1cc4      	adds	r4, r0, #3
 80052f0:	f024 0403 	bic.w	r4, r4, #3
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	d007      	beq.n	8005308 <sbrk_aligned+0x38>
 80052f8:	1a21      	subs	r1, r4, r0
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 fea0 	bl	8006040 <_sbrk_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d101      	bne.n	8005308 <sbrk_aligned+0x38>
 8005304:	f04f 34ff 	mov.w	r4, #4294967295
 8005308:	4620      	mov	r0, r4
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	20000274 	.word	0x20000274

08005310 <_malloc_r>:
 8005310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005314:	1ccd      	adds	r5, r1, #3
 8005316:	f025 0503 	bic.w	r5, r5, #3
 800531a:	3508      	adds	r5, #8
 800531c:	2d0c      	cmp	r5, #12
 800531e:	bf38      	it	cc
 8005320:	250c      	movcc	r5, #12
 8005322:	2d00      	cmp	r5, #0
 8005324:	4607      	mov	r7, r0
 8005326:	db01      	blt.n	800532c <_malloc_r+0x1c>
 8005328:	42a9      	cmp	r1, r5
 800532a:	d905      	bls.n	8005338 <_malloc_r+0x28>
 800532c:	230c      	movs	r3, #12
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	2600      	movs	r6, #0
 8005332:	4630      	mov	r0, r6
 8005334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005338:	4e2e      	ldr	r6, [pc, #184]	; (80053f4 <_malloc_r+0xe4>)
 800533a:	f001 f82b 	bl	8006394 <__malloc_lock>
 800533e:	6833      	ldr	r3, [r6, #0]
 8005340:	461c      	mov	r4, r3
 8005342:	bb34      	cbnz	r4, 8005392 <_malloc_r+0x82>
 8005344:	4629      	mov	r1, r5
 8005346:	4638      	mov	r0, r7
 8005348:	f7ff ffc2 	bl	80052d0 <sbrk_aligned>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	4604      	mov	r4, r0
 8005350:	d14d      	bne.n	80053ee <_malloc_r+0xde>
 8005352:	6834      	ldr	r4, [r6, #0]
 8005354:	4626      	mov	r6, r4
 8005356:	2e00      	cmp	r6, #0
 8005358:	d140      	bne.n	80053dc <_malloc_r+0xcc>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	4631      	mov	r1, r6
 800535e:	4638      	mov	r0, r7
 8005360:	eb04 0803 	add.w	r8, r4, r3
 8005364:	f000 fe6c 	bl	8006040 <_sbrk_r>
 8005368:	4580      	cmp	r8, r0
 800536a:	d13a      	bne.n	80053e2 <_malloc_r+0xd2>
 800536c:	6821      	ldr	r1, [r4, #0]
 800536e:	3503      	adds	r5, #3
 8005370:	1a6d      	subs	r5, r5, r1
 8005372:	f025 0503 	bic.w	r5, r5, #3
 8005376:	3508      	adds	r5, #8
 8005378:	2d0c      	cmp	r5, #12
 800537a:	bf38      	it	cc
 800537c:	250c      	movcc	r5, #12
 800537e:	4629      	mov	r1, r5
 8005380:	4638      	mov	r0, r7
 8005382:	f7ff ffa5 	bl	80052d0 <sbrk_aligned>
 8005386:	3001      	adds	r0, #1
 8005388:	d02b      	beq.n	80053e2 <_malloc_r+0xd2>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	442b      	add	r3, r5
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	e00e      	b.n	80053b0 <_malloc_r+0xa0>
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	1b52      	subs	r2, r2, r5
 8005396:	d41e      	bmi.n	80053d6 <_malloc_r+0xc6>
 8005398:	2a0b      	cmp	r2, #11
 800539a:	d916      	bls.n	80053ca <_malloc_r+0xba>
 800539c:	1961      	adds	r1, r4, r5
 800539e:	42a3      	cmp	r3, r4
 80053a0:	6025      	str	r5, [r4, #0]
 80053a2:	bf18      	it	ne
 80053a4:	6059      	strne	r1, [r3, #4]
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	bf08      	it	eq
 80053aa:	6031      	streq	r1, [r6, #0]
 80053ac:	5162      	str	r2, [r4, r5]
 80053ae:	604b      	str	r3, [r1, #4]
 80053b0:	4638      	mov	r0, r7
 80053b2:	f104 060b 	add.w	r6, r4, #11
 80053b6:	f000 fff3 	bl	80063a0 <__malloc_unlock>
 80053ba:	f026 0607 	bic.w	r6, r6, #7
 80053be:	1d23      	adds	r3, r4, #4
 80053c0:	1af2      	subs	r2, r6, r3
 80053c2:	d0b6      	beq.n	8005332 <_malloc_r+0x22>
 80053c4:	1b9b      	subs	r3, r3, r6
 80053c6:	50a3      	str	r3, [r4, r2]
 80053c8:	e7b3      	b.n	8005332 <_malloc_r+0x22>
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	bf0c      	ite	eq
 80053d0:	6032      	streq	r2, [r6, #0]
 80053d2:	605a      	strne	r2, [r3, #4]
 80053d4:	e7ec      	b.n	80053b0 <_malloc_r+0xa0>
 80053d6:	4623      	mov	r3, r4
 80053d8:	6864      	ldr	r4, [r4, #4]
 80053da:	e7b2      	b.n	8005342 <_malloc_r+0x32>
 80053dc:	4634      	mov	r4, r6
 80053de:	6876      	ldr	r6, [r6, #4]
 80053e0:	e7b9      	b.n	8005356 <_malloc_r+0x46>
 80053e2:	230c      	movs	r3, #12
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4638      	mov	r0, r7
 80053e8:	f000 ffda 	bl	80063a0 <__malloc_unlock>
 80053ec:	e7a1      	b.n	8005332 <_malloc_r+0x22>
 80053ee:	6025      	str	r5, [r4, #0]
 80053f0:	e7de      	b.n	80053b0 <_malloc_r+0xa0>
 80053f2:	bf00      	nop
 80053f4:	20000270 	.word	0x20000270

080053f8 <_sungetc_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	1c4b      	adds	r3, r1, #1
 80053fc:	4614      	mov	r4, r2
 80053fe:	d103      	bne.n	8005408 <_sungetc_r+0x10>
 8005400:	f04f 35ff 	mov.w	r5, #4294967295
 8005404:	4628      	mov	r0, r5
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	8993      	ldrh	r3, [r2, #12]
 800540a:	f023 0320 	bic.w	r3, r3, #32
 800540e:	8193      	strh	r3, [r2, #12]
 8005410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005412:	6852      	ldr	r2, [r2, #4]
 8005414:	b2cd      	uxtb	r5, r1
 8005416:	b18b      	cbz	r3, 800543c <_sungetc_r+0x44>
 8005418:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800541a:	4293      	cmp	r3, r2
 800541c:	dd08      	ble.n	8005430 <_sungetc_r+0x38>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	1e5a      	subs	r2, r3, #1
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005428:	6863      	ldr	r3, [r4, #4]
 800542a:	3301      	adds	r3, #1
 800542c:	6063      	str	r3, [r4, #4]
 800542e:	e7e9      	b.n	8005404 <_sungetc_r+0xc>
 8005430:	4621      	mov	r1, r4
 8005432:	f000 ff45 	bl	80062c0 <__submore>
 8005436:	2800      	cmp	r0, #0
 8005438:	d0f1      	beq.n	800541e <_sungetc_r+0x26>
 800543a:	e7e1      	b.n	8005400 <_sungetc_r+0x8>
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	b151      	cbz	r1, 8005458 <_sungetc_r+0x60>
 8005442:	4299      	cmp	r1, r3
 8005444:	d208      	bcs.n	8005458 <_sungetc_r+0x60>
 8005446:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800544a:	42a9      	cmp	r1, r5
 800544c:	d104      	bne.n	8005458 <_sungetc_r+0x60>
 800544e:	3b01      	subs	r3, #1
 8005450:	3201      	adds	r2, #1
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	6062      	str	r2, [r4, #4]
 8005456:	e7d5      	b.n	8005404 <_sungetc_r+0xc>
 8005458:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800545c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005460:	6363      	str	r3, [r4, #52]	; 0x34
 8005462:	2303      	movs	r3, #3
 8005464:	63a3      	str	r3, [r4, #56]	; 0x38
 8005466:	4623      	mov	r3, r4
 8005468:	f803 5f46 	strb.w	r5, [r3, #70]!
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	2301      	movs	r3, #1
 8005470:	e7dc      	b.n	800542c <_sungetc_r+0x34>

08005472 <__ssrefill_r>:
 8005472:	b510      	push	{r4, lr}
 8005474:	460c      	mov	r4, r1
 8005476:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005478:	b169      	cbz	r1, 8005496 <__ssrefill_r+0x24>
 800547a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800547e:	4299      	cmp	r1, r3
 8005480:	d001      	beq.n	8005486 <__ssrefill_r+0x14>
 8005482:	f7ff fed9 	bl	8005238 <_free_r>
 8005486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	2000      	movs	r0, #0
 800548c:	6360      	str	r0, [r4, #52]	; 0x34
 800548e:	b113      	cbz	r3, 8005496 <__ssrefill_r+0x24>
 8005490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	bd10      	pop	{r4, pc}
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	e7f3      	b.n	8005494 <__ssrefill_r+0x22>

080054ac <__ssvfiscanf_r>:
 80054ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	460c      	mov	r4, r1
 80054b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80054b6:	2100      	movs	r1, #0
 80054b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80054bc:	49a6      	ldr	r1, [pc, #664]	; (8005758 <__ssvfiscanf_r+0x2ac>)
 80054be:	91a0      	str	r1, [sp, #640]	; 0x280
 80054c0:	f10d 0804 	add.w	r8, sp, #4
 80054c4:	49a5      	ldr	r1, [pc, #660]	; (800575c <__ssvfiscanf_r+0x2b0>)
 80054c6:	4fa6      	ldr	r7, [pc, #664]	; (8005760 <__ssvfiscanf_r+0x2b4>)
 80054c8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005764 <__ssvfiscanf_r+0x2b8>
 80054cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80054d0:	4606      	mov	r6, r0
 80054d2:	91a1      	str	r1, [sp, #644]	; 0x284
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	7813      	ldrb	r3, [r2, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 815a 	beq.w	8005792 <__ssvfiscanf_r+0x2e6>
 80054de:	5dd9      	ldrb	r1, [r3, r7]
 80054e0:	f011 0108 	ands.w	r1, r1, #8
 80054e4:	f102 0501 	add.w	r5, r2, #1
 80054e8:	d019      	beq.n	800551e <__ssvfiscanf_r+0x72>
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd0f      	ble.n	8005510 <__ssvfiscanf_r+0x64>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	781a      	ldrb	r2, [r3, #0]
 80054f4:	5cba      	ldrb	r2, [r7, r2]
 80054f6:	0712      	lsls	r2, r2, #28
 80054f8:	d401      	bmi.n	80054fe <__ssvfiscanf_r+0x52>
 80054fa:	462a      	mov	r2, r5
 80054fc:	e7eb      	b.n	80054d6 <__ssvfiscanf_r+0x2a>
 80054fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005500:	3201      	adds	r2, #1
 8005502:	9245      	str	r2, [sp, #276]	; 0x114
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	3301      	adds	r3, #1
 8005508:	3a01      	subs	r2, #1
 800550a:	6062      	str	r2, [r4, #4]
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	e7ec      	b.n	80054ea <__ssvfiscanf_r+0x3e>
 8005510:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005512:	4621      	mov	r1, r4
 8005514:	4630      	mov	r0, r6
 8005516:	4798      	blx	r3
 8005518:	2800      	cmp	r0, #0
 800551a:	d0e9      	beq.n	80054f0 <__ssvfiscanf_r+0x44>
 800551c:	e7ed      	b.n	80054fa <__ssvfiscanf_r+0x4e>
 800551e:	2b25      	cmp	r3, #37	; 0x25
 8005520:	d012      	beq.n	8005548 <__ssvfiscanf_r+0x9c>
 8005522:	469a      	mov	sl, r3
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f340 8091 	ble.w	800564e <__ssvfiscanf_r+0x1a2>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	7813      	ldrb	r3, [r2, #0]
 8005530:	4553      	cmp	r3, sl
 8005532:	f040 812e 	bne.w	8005792 <__ssvfiscanf_r+0x2e6>
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	3b01      	subs	r3, #1
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800553e:	3201      	adds	r2, #1
 8005540:	3301      	adds	r3, #1
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	9345      	str	r3, [sp, #276]	; 0x114
 8005546:	e7d8      	b.n	80054fa <__ssvfiscanf_r+0x4e>
 8005548:	9141      	str	r1, [sp, #260]	; 0x104
 800554a:	9143      	str	r1, [sp, #268]	; 0x10c
 800554c:	7853      	ldrb	r3, [r2, #1]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	bf02      	ittt	eq
 8005552:	2310      	moveq	r3, #16
 8005554:	1c95      	addeq	r5, r2, #2
 8005556:	9341      	streq	r3, [sp, #260]	; 0x104
 8005558:	220a      	movs	r2, #10
 800555a:	46aa      	mov	sl, r5
 800555c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005560:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005564:	2b09      	cmp	r3, #9
 8005566:	d91d      	bls.n	80055a4 <__ssvfiscanf_r+0xf8>
 8005568:	487e      	ldr	r0, [pc, #504]	; (8005764 <__ssvfiscanf_r+0x2b8>)
 800556a:	2203      	movs	r2, #3
 800556c:	f7fa fe48 	bl	8000200 <memchr>
 8005570:	b140      	cbz	r0, 8005584 <__ssvfiscanf_r+0xd8>
 8005572:	2301      	movs	r3, #1
 8005574:	eba0 0009 	sub.w	r0, r0, r9
 8005578:	fa03 f000 	lsl.w	r0, r3, r0
 800557c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800557e:	4318      	orrs	r0, r3
 8005580:	9041      	str	r0, [sp, #260]	; 0x104
 8005582:	4655      	mov	r5, sl
 8005584:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005588:	2b78      	cmp	r3, #120	; 0x78
 800558a:	d806      	bhi.n	800559a <__ssvfiscanf_r+0xee>
 800558c:	2b57      	cmp	r3, #87	; 0x57
 800558e:	d810      	bhi.n	80055b2 <__ssvfiscanf_r+0x106>
 8005590:	2b25      	cmp	r3, #37	; 0x25
 8005592:	d0c6      	beq.n	8005522 <__ssvfiscanf_r+0x76>
 8005594:	d856      	bhi.n	8005644 <__ssvfiscanf_r+0x198>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d064      	beq.n	8005664 <__ssvfiscanf_r+0x1b8>
 800559a:	2303      	movs	r3, #3
 800559c:	9347      	str	r3, [sp, #284]	; 0x11c
 800559e:	230a      	movs	r3, #10
 80055a0:	9342      	str	r3, [sp, #264]	; 0x108
 80055a2:	e071      	b.n	8005688 <__ssvfiscanf_r+0x1dc>
 80055a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80055a6:	fb02 1103 	mla	r1, r2, r3, r1
 80055aa:	3930      	subs	r1, #48	; 0x30
 80055ac:	9143      	str	r1, [sp, #268]	; 0x10c
 80055ae:	4655      	mov	r5, sl
 80055b0:	e7d3      	b.n	800555a <__ssvfiscanf_r+0xae>
 80055b2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80055b6:	2a20      	cmp	r2, #32
 80055b8:	d8ef      	bhi.n	800559a <__ssvfiscanf_r+0xee>
 80055ba:	a101      	add	r1, pc, #4	; (adr r1, 80055c0 <__ssvfiscanf_r+0x114>)
 80055bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055c0:	08005673 	.word	0x08005673
 80055c4:	0800559b 	.word	0x0800559b
 80055c8:	0800559b 	.word	0x0800559b
 80055cc:	080056d1 	.word	0x080056d1
 80055d0:	0800559b 	.word	0x0800559b
 80055d4:	0800559b 	.word	0x0800559b
 80055d8:	0800559b 	.word	0x0800559b
 80055dc:	0800559b 	.word	0x0800559b
 80055e0:	0800559b 	.word	0x0800559b
 80055e4:	0800559b 	.word	0x0800559b
 80055e8:	0800559b 	.word	0x0800559b
 80055ec:	080056e7 	.word	0x080056e7
 80055f0:	080056bd 	.word	0x080056bd
 80055f4:	0800564b 	.word	0x0800564b
 80055f8:	0800564b 	.word	0x0800564b
 80055fc:	0800564b 	.word	0x0800564b
 8005600:	0800559b 	.word	0x0800559b
 8005604:	080056c1 	.word	0x080056c1
 8005608:	0800559b 	.word	0x0800559b
 800560c:	0800559b 	.word	0x0800559b
 8005610:	0800559b 	.word	0x0800559b
 8005614:	0800559b 	.word	0x0800559b
 8005618:	080056f7 	.word	0x080056f7
 800561c:	080056c9 	.word	0x080056c9
 8005620:	0800566b 	.word	0x0800566b
 8005624:	0800559b 	.word	0x0800559b
 8005628:	0800559b 	.word	0x0800559b
 800562c:	080056f3 	.word	0x080056f3
 8005630:	0800559b 	.word	0x0800559b
 8005634:	080056bd 	.word	0x080056bd
 8005638:	0800559b 	.word	0x0800559b
 800563c:	0800559b 	.word	0x0800559b
 8005640:	08005673 	.word	0x08005673
 8005644:	3b45      	subs	r3, #69	; 0x45
 8005646:	2b02      	cmp	r3, #2
 8005648:	d8a7      	bhi.n	800559a <__ssvfiscanf_r+0xee>
 800564a:	2305      	movs	r3, #5
 800564c:	e01b      	b.n	8005686 <__ssvfiscanf_r+0x1da>
 800564e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005650:	4621      	mov	r1, r4
 8005652:	4630      	mov	r0, r6
 8005654:	4798      	blx	r3
 8005656:	2800      	cmp	r0, #0
 8005658:	f43f af68 	beq.w	800552c <__ssvfiscanf_r+0x80>
 800565c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800565e:	2800      	cmp	r0, #0
 8005660:	f040 808d 	bne.w	800577e <__ssvfiscanf_r+0x2d2>
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	e08f      	b.n	800578a <__ssvfiscanf_r+0x2de>
 800566a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800566c:	f042 0220 	orr.w	r2, r2, #32
 8005670:	9241      	str	r2, [sp, #260]	; 0x104
 8005672:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005678:	9241      	str	r2, [sp, #260]	; 0x104
 800567a:	2210      	movs	r2, #16
 800567c:	2b6f      	cmp	r3, #111	; 0x6f
 800567e:	9242      	str	r2, [sp, #264]	; 0x108
 8005680:	bf34      	ite	cc
 8005682:	2303      	movcc	r3, #3
 8005684:	2304      	movcs	r3, #4
 8005686:	9347      	str	r3, [sp, #284]	; 0x11c
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	dd42      	ble.n	8005714 <__ssvfiscanf_r+0x268>
 800568e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005690:	0659      	lsls	r1, r3, #25
 8005692:	d404      	bmi.n	800569e <__ssvfiscanf_r+0x1f2>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	781a      	ldrb	r2, [r3, #0]
 8005698:	5cba      	ldrb	r2, [r7, r2]
 800569a:	0712      	lsls	r2, r2, #28
 800569c:	d441      	bmi.n	8005722 <__ssvfiscanf_r+0x276>
 800569e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	dc50      	bgt.n	8005746 <__ssvfiscanf_r+0x29a>
 80056a4:	466b      	mov	r3, sp
 80056a6:	4622      	mov	r2, r4
 80056a8:	a941      	add	r1, sp, #260	; 0x104
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 fb64 	bl	8005d78 <_scanf_chars>
 80056b0:	2801      	cmp	r0, #1
 80056b2:	d06e      	beq.n	8005792 <__ssvfiscanf_r+0x2e6>
 80056b4:	2802      	cmp	r0, #2
 80056b6:	f47f af20 	bne.w	80054fa <__ssvfiscanf_r+0x4e>
 80056ba:	e7cf      	b.n	800565c <__ssvfiscanf_r+0x1b0>
 80056bc:	220a      	movs	r2, #10
 80056be:	e7dd      	b.n	800567c <__ssvfiscanf_r+0x1d0>
 80056c0:	2300      	movs	r3, #0
 80056c2:	9342      	str	r3, [sp, #264]	; 0x108
 80056c4:	2303      	movs	r3, #3
 80056c6:	e7de      	b.n	8005686 <__ssvfiscanf_r+0x1da>
 80056c8:	2308      	movs	r3, #8
 80056ca:	9342      	str	r3, [sp, #264]	; 0x108
 80056cc:	2304      	movs	r3, #4
 80056ce:	e7da      	b.n	8005686 <__ssvfiscanf_r+0x1da>
 80056d0:	4629      	mov	r1, r5
 80056d2:	4640      	mov	r0, r8
 80056d4:	f000 fcc4 	bl	8006060 <__sccl>
 80056d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80056da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056de:	9341      	str	r3, [sp, #260]	; 0x104
 80056e0:	4605      	mov	r5, r0
 80056e2:	2301      	movs	r3, #1
 80056e4:	e7cf      	b.n	8005686 <__ssvfiscanf_r+0x1da>
 80056e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80056e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ec:	9341      	str	r3, [sp, #260]	; 0x104
 80056ee:	2300      	movs	r3, #0
 80056f0:	e7c9      	b.n	8005686 <__ssvfiscanf_r+0x1da>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e7c7      	b.n	8005686 <__ssvfiscanf_r+0x1da>
 80056f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80056f8:	06c3      	lsls	r3, r0, #27
 80056fa:	f53f aefe 	bmi.w	80054fa <__ssvfiscanf_r+0x4e>
 80056fe:	9b00      	ldr	r3, [sp, #0]
 8005700:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005702:	1d19      	adds	r1, r3, #4
 8005704:	9100      	str	r1, [sp, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f010 0f01 	tst.w	r0, #1
 800570c:	bf14      	ite	ne
 800570e:	801a      	strhne	r2, [r3, #0]
 8005710:	601a      	streq	r2, [r3, #0]
 8005712:	e6f2      	b.n	80054fa <__ssvfiscanf_r+0x4e>
 8005714:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005716:	4621      	mov	r1, r4
 8005718:	4630      	mov	r0, r6
 800571a:	4798      	blx	r3
 800571c:	2800      	cmp	r0, #0
 800571e:	d0b6      	beq.n	800568e <__ssvfiscanf_r+0x1e2>
 8005720:	e79c      	b.n	800565c <__ssvfiscanf_r+0x1b0>
 8005722:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005724:	3201      	adds	r2, #1
 8005726:	9245      	str	r2, [sp, #276]	; 0x114
 8005728:	6862      	ldr	r2, [r4, #4]
 800572a:	3a01      	subs	r2, #1
 800572c:	2a00      	cmp	r2, #0
 800572e:	6062      	str	r2, [r4, #4]
 8005730:	dd02      	ble.n	8005738 <__ssvfiscanf_r+0x28c>
 8005732:	3301      	adds	r3, #1
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	e7ad      	b.n	8005694 <__ssvfiscanf_r+0x1e8>
 8005738:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800573a:	4621      	mov	r1, r4
 800573c:	4630      	mov	r0, r6
 800573e:	4798      	blx	r3
 8005740:	2800      	cmp	r0, #0
 8005742:	d0a7      	beq.n	8005694 <__ssvfiscanf_r+0x1e8>
 8005744:	e78a      	b.n	800565c <__ssvfiscanf_r+0x1b0>
 8005746:	2b04      	cmp	r3, #4
 8005748:	dc0e      	bgt.n	8005768 <__ssvfiscanf_r+0x2bc>
 800574a:	466b      	mov	r3, sp
 800574c:	4622      	mov	r2, r4
 800574e:	a941      	add	r1, sp, #260	; 0x104
 8005750:	4630      	mov	r0, r6
 8005752:	f000 fb6b 	bl	8005e2c <_scanf_i>
 8005756:	e7ab      	b.n	80056b0 <__ssvfiscanf_r+0x204>
 8005758:	080053f9 	.word	0x080053f9
 800575c:	08005473 	.word	0x08005473
 8005760:	080065b3 	.word	0x080065b3
 8005764:	08006564 	.word	0x08006564
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <__ssvfiscanf_r+0x2ec>)
 800576a:	2b00      	cmp	r3, #0
 800576c:	f43f aec5 	beq.w	80054fa <__ssvfiscanf_r+0x4e>
 8005770:	466b      	mov	r3, sp
 8005772:	4622      	mov	r2, r4
 8005774:	a941      	add	r1, sp, #260	; 0x104
 8005776:	4630      	mov	r0, r6
 8005778:	f3af 8000 	nop.w
 800577c:	e798      	b.n	80056b0 <__ssvfiscanf_r+0x204>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005784:	bf18      	it	ne
 8005786:	f04f 30ff 	movne.w	r0, #4294967295
 800578a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005794:	e7f9      	b.n	800578a <__ssvfiscanf_r+0x2de>
 8005796:	bf00      	nop
 8005798:	00000000 	.word	0x00000000

0800579c <__sfputc_r>:
 800579c:	6893      	ldr	r3, [r2, #8]
 800579e:	3b01      	subs	r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	b410      	push	{r4}
 80057a4:	6093      	str	r3, [r2, #8]
 80057a6:	da08      	bge.n	80057ba <__sfputc_r+0x1e>
 80057a8:	6994      	ldr	r4, [r2, #24]
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	db01      	blt.n	80057b2 <__sfputc_r+0x16>
 80057ae:	290a      	cmp	r1, #10
 80057b0:	d103      	bne.n	80057ba <__sfputc_r+0x1e>
 80057b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b6:	f7ff ba2b 	b.w	8004c10 <__swbuf_r>
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	1c58      	adds	r0, r3, #1
 80057be:	6010      	str	r0, [r2, #0]
 80057c0:	7019      	strb	r1, [r3, #0]
 80057c2:	4608      	mov	r0, r1
 80057c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <__sfputs_r>:
 80057ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057cc:	4606      	mov	r6, r0
 80057ce:	460f      	mov	r7, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	18d5      	adds	r5, r2, r3
 80057d4:	42ac      	cmp	r4, r5
 80057d6:	d101      	bne.n	80057dc <__sfputs_r+0x12>
 80057d8:	2000      	movs	r0, #0
 80057da:	e007      	b.n	80057ec <__sfputs_r+0x22>
 80057dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e0:	463a      	mov	r2, r7
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff ffda 	bl	800579c <__sfputc_r>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d1f3      	bne.n	80057d4 <__sfputs_r+0xa>
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057f0 <_vfiprintf_r>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	460d      	mov	r5, r1
 80057f6:	b09d      	sub	sp, #116	; 0x74
 80057f8:	4614      	mov	r4, r2
 80057fa:	4698      	mov	r8, r3
 80057fc:	4606      	mov	r6, r0
 80057fe:	b118      	cbz	r0, 8005808 <_vfiprintf_r+0x18>
 8005800:	6983      	ldr	r3, [r0, #24]
 8005802:	b90b      	cbnz	r3, 8005808 <_vfiprintf_r+0x18>
 8005804:	f7ff fc00 	bl	8005008 <__sinit>
 8005808:	4b89      	ldr	r3, [pc, #548]	; (8005a30 <_vfiprintf_r+0x240>)
 800580a:	429d      	cmp	r5, r3
 800580c:	d11b      	bne.n	8005846 <_vfiprintf_r+0x56>
 800580e:	6875      	ldr	r5, [r6, #4]
 8005810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	d405      	bmi.n	8005822 <_vfiprintf_r+0x32>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d402      	bmi.n	8005822 <_vfiprintf_r+0x32>
 800581c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800581e:	f7ff fc91 	bl	8005144 <__retarget_lock_acquire_recursive>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	d501      	bpl.n	800582c <_vfiprintf_r+0x3c>
 8005828:	692b      	ldr	r3, [r5, #16]
 800582a:	b9eb      	cbnz	r3, 8005868 <_vfiprintf_r+0x78>
 800582c:	4629      	mov	r1, r5
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff fa52 	bl	8004cd8 <__swsetup_r>
 8005834:	b1c0      	cbz	r0, 8005868 <_vfiprintf_r+0x78>
 8005836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005838:	07dc      	lsls	r4, r3, #31
 800583a:	d50e      	bpl.n	800585a <_vfiprintf_r+0x6a>
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	b01d      	add	sp, #116	; 0x74
 8005842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005846:	4b7b      	ldr	r3, [pc, #492]	; (8005a34 <_vfiprintf_r+0x244>)
 8005848:	429d      	cmp	r5, r3
 800584a:	d101      	bne.n	8005850 <_vfiprintf_r+0x60>
 800584c:	68b5      	ldr	r5, [r6, #8]
 800584e:	e7df      	b.n	8005810 <_vfiprintf_r+0x20>
 8005850:	4b79      	ldr	r3, [pc, #484]	; (8005a38 <_vfiprintf_r+0x248>)
 8005852:	429d      	cmp	r5, r3
 8005854:	bf08      	it	eq
 8005856:	68f5      	ldreq	r5, [r6, #12]
 8005858:	e7da      	b.n	8005810 <_vfiprintf_r+0x20>
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	0598      	lsls	r0, r3, #22
 800585e:	d4ed      	bmi.n	800583c <_vfiprintf_r+0x4c>
 8005860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005862:	f7ff fc70 	bl	8005146 <__retarget_lock_release_recursive>
 8005866:	e7e9      	b.n	800583c <_vfiprintf_r+0x4c>
 8005868:	2300      	movs	r3, #0
 800586a:	9309      	str	r3, [sp, #36]	; 0x24
 800586c:	2320      	movs	r3, #32
 800586e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005872:	f8cd 800c 	str.w	r8, [sp, #12]
 8005876:	2330      	movs	r3, #48	; 0x30
 8005878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a3c <_vfiprintf_r+0x24c>
 800587c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005880:	f04f 0901 	mov.w	r9, #1
 8005884:	4623      	mov	r3, r4
 8005886:	469a      	mov	sl, r3
 8005888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800588c:	b10a      	cbz	r2, 8005892 <_vfiprintf_r+0xa2>
 800588e:	2a25      	cmp	r2, #37	; 0x25
 8005890:	d1f9      	bne.n	8005886 <_vfiprintf_r+0x96>
 8005892:	ebba 0b04 	subs.w	fp, sl, r4
 8005896:	d00b      	beq.n	80058b0 <_vfiprintf_r+0xc0>
 8005898:	465b      	mov	r3, fp
 800589a:	4622      	mov	r2, r4
 800589c:	4629      	mov	r1, r5
 800589e:	4630      	mov	r0, r6
 80058a0:	f7ff ff93 	bl	80057ca <__sfputs_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f000 80aa 	beq.w	80059fe <_vfiprintf_r+0x20e>
 80058aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ac:	445a      	add	r2, fp
 80058ae:	9209      	str	r2, [sp, #36]	; 0x24
 80058b0:	f89a 3000 	ldrb.w	r3, [sl]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80a2 	beq.w	80059fe <_vfiprintf_r+0x20e>
 80058ba:	2300      	movs	r3, #0
 80058bc:	f04f 32ff 	mov.w	r2, #4294967295
 80058c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c4:	f10a 0a01 	add.w	sl, sl, #1
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	9307      	str	r3, [sp, #28]
 80058cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058d0:	931a      	str	r3, [sp, #104]	; 0x68
 80058d2:	4654      	mov	r4, sl
 80058d4:	2205      	movs	r2, #5
 80058d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058da:	4858      	ldr	r0, [pc, #352]	; (8005a3c <_vfiprintf_r+0x24c>)
 80058dc:	f7fa fc90 	bl	8000200 <memchr>
 80058e0:	9a04      	ldr	r2, [sp, #16]
 80058e2:	b9d8      	cbnz	r0, 800591c <_vfiprintf_r+0x12c>
 80058e4:	06d1      	lsls	r1, r2, #27
 80058e6:	bf44      	itt	mi
 80058e8:	2320      	movmi	r3, #32
 80058ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ee:	0713      	lsls	r3, r2, #28
 80058f0:	bf44      	itt	mi
 80058f2:	232b      	movmi	r3, #43	; 0x2b
 80058f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f8:	f89a 3000 	ldrb.w	r3, [sl]
 80058fc:	2b2a      	cmp	r3, #42	; 0x2a
 80058fe:	d015      	beq.n	800592c <_vfiprintf_r+0x13c>
 8005900:	9a07      	ldr	r2, [sp, #28]
 8005902:	4654      	mov	r4, sl
 8005904:	2000      	movs	r0, #0
 8005906:	f04f 0c0a 	mov.w	ip, #10
 800590a:	4621      	mov	r1, r4
 800590c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005910:	3b30      	subs	r3, #48	; 0x30
 8005912:	2b09      	cmp	r3, #9
 8005914:	d94e      	bls.n	80059b4 <_vfiprintf_r+0x1c4>
 8005916:	b1b0      	cbz	r0, 8005946 <_vfiprintf_r+0x156>
 8005918:	9207      	str	r2, [sp, #28]
 800591a:	e014      	b.n	8005946 <_vfiprintf_r+0x156>
 800591c:	eba0 0308 	sub.w	r3, r0, r8
 8005920:	fa09 f303 	lsl.w	r3, r9, r3
 8005924:	4313      	orrs	r3, r2
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	46a2      	mov	sl, r4
 800592a:	e7d2      	b.n	80058d2 <_vfiprintf_r+0xe2>
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	1d19      	adds	r1, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	9103      	str	r1, [sp, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	bfbb      	ittet	lt
 8005938:	425b      	neglt	r3, r3
 800593a:	f042 0202 	orrlt.w	r2, r2, #2
 800593e:	9307      	strge	r3, [sp, #28]
 8005940:	9307      	strlt	r3, [sp, #28]
 8005942:	bfb8      	it	lt
 8005944:	9204      	strlt	r2, [sp, #16]
 8005946:	7823      	ldrb	r3, [r4, #0]
 8005948:	2b2e      	cmp	r3, #46	; 0x2e
 800594a:	d10c      	bne.n	8005966 <_vfiprintf_r+0x176>
 800594c:	7863      	ldrb	r3, [r4, #1]
 800594e:	2b2a      	cmp	r3, #42	; 0x2a
 8005950:	d135      	bne.n	80059be <_vfiprintf_r+0x1ce>
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	9203      	str	r2, [sp, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005962:	3402      	adds	r4, #2
 8005964:	9305      	str	r3, [sp, #20]
 8005966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a4c <_vfiprintf_r+0x25c>
 800596a:	7821      	ldrb	r1, [r4, #0]
 800596c:	2203      	movs	r2, #3
 800596e:	4650      	mov	r0, sl
 8005970:	f7fa fc46 	bl	8000200 <memchr>
 8005974:	b140      	cbz	r0, 8005988 <_vfiprintf_r+0x198>
 8005976:	2340      	movs	r3, #64	; 0x40
 8005978:	eba0 000a 	sub.w	r0, r0, sl
 800597c:	fa03 f000 	lsl.w	r0, r3, r0
 8005980:	9b04      	ldr	r3, [sp, #16]
 8005982:	4303      	orrs	r3, r0
 8005984:	3401      	adds	r4, #1
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	482c      	ldr	r0, [pc, #176]	; (8005a40 <_vfiprintf_r+0x250>)
 800598e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005992:	2206      	movs	r2, #6
 8005994:	f7fa fc34 	bl	8000200 <memchr>
 8005998:	2800      	cmp	r0, #0
 800599a:	d03f      	beq.n	8005a1c <_vfiprintf_r+0x22c>
 800599c:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <_vfiprintf_r+0x254>)
 800599e:	bb1b      	cbnz	r3, 80059e8 <_vfiprintf_r+0x1f8>
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	3307      	adds	r3, #7
 80059a4:	f023 0307 	bic.w	r3, r3, #7
 80059a8:	3308      	adds	r3, #8
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ae:	443b      	add	r3, r7
 80059b0:	9309      	str	r3, [sp, #36]	; 0x24
 80059b2:	e767      	b.n	8005884 <_vfiprintf_r+0x94>
 80059b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059b8:	460c      	mov	r4, r1
 80059ba:	2001      	movs	r0, #1
 80059bc:	e7a5      	b.n	800590a <_vfiprintf_r+0x11a>
 80059be:	2300      	movs	r3, #0
 80059c0:	3401      	adds	r4, #1
 80059c2:	9305      	str	r3, [sp, #20]
 80059c4:	4619      	mov	r1, r3
 80059c6:	f04f 0c0a 	mov.w	ip, #10
 80059ca:	4620      	mov	r0, r4
 80059cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059d0:	3a30      	subs	r2, #48	; 0x30
 80059d2:	2a09      	cmp	r2, #9
 80059d4:	d903      	bls.n	80059de <_vfiprintf_r+0x1ee>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0c5      	beq.n	8005966 <_vfiprintf_r+0x176>
 80059da:	9105      	str	r1, [sp, #20]
 80059dc:	e7c3      	b.n	8005966 <_vfiprintf_r+0x176>
 80059de:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e2:	4604      	mov	r4, r0
 80059e4:	2301      	movs	r3, #1
 80059e6:	e7f0      	b.n	80059ca <_vfiprintf_r+0x1da>
 80059e8:	ab03      	add	r3, sp, #12
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	462a      	mov	r2, r5
 80059ee:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <_vfiprintf_r+0x258>)
 80059f0:	a904      	add	r1, sp, #16
 80059f2:	4630      	mov	r0, r6
 80059f4:	f3af 8000 	nop.w
 80059f8:	4607      	mov	r7, r0
 80059fa:	1c78      	adds	r0, r7, #1
 80059fc:	d1d6      	bne.n	80059ac <_vfiprintf_r+0x1bc>
 80059fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a00:	07d9      	lsls	r1, r3, #31
 8005a02:	d405      	bmi.n	8005a10 <_vfiprintf_r+0x220>
 8005a04:	89ab      	ldrh	r3, [r5, #12]
 8005a06:	059a      	lsls	r2, r3, #22
 8005a08:	d402      	bmi.n	8005a10 <_vfiprintf_r+0x220>
 8005a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0c:	f7ff fb9b 	bl	8005146 <__retarget_lock_release_recursive>
 8005a10:	89ab      	ldrh	r3, [r5, #12]
 8005a12:	065b      	lsls	r3, r3, #25
 8005a14:	f53f af12 	bmi.w	800583c <_vfiprintf_r+0x4c>
 8005a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a1a:	e711      	b.n	8005840 <_vfiprintf_r+0x50>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <_vfiprintf_r+0x258>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 f880 	bl	8005b2c <_printf_i>
 8005a2c:	e7e4      	b.n	80059f8 <_vfiprintf_r+0x208>
 8005a2e:	bf00      	nop
 8005a30:	08006524 	.word	0x08006524
 8005a34:	08006544 	.word	0x08006544
 8005a38:	08006504 	.word	0x08006504
 8005a3c:	08006568 	.word	0x08006568
 8005a40:	0800656e 	.word	0x0800656e
 8005a44:	00000000 	.word	0x00000000
 8005a48:	080057cb 	.word	0x080057cb
 8005a4c:	08006564 	.word	0x08006564

08005a50 <_printf_common>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	4616      	mov	r6, r2
 8005a56:	4699      	mov	r9, r3
 8005a58:	688a      	ldr	r2, [r1, #8]
 8005a5a:	690b      	ldr	r3, [r1, #16]
 8005a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a60:	4293      	cmp	r3, r2
 8005a62:	bfb8      	it	lt
 8005a64:	4613      	movlt	r3, r2
 8005a66:	6033      	str	r3, [r6, #0]
 8005a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	b10a      	cbz	r2, 8005a76 <_printf_common+0x26>
 8005a72:	3301      	adds	r3, #1
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	0699      	lsls	r1, r3, #26
 8005a7a:	bf42      	ittt	mi
 8005a7c:	6833      	ldrmi	r3, [r6, #0]
 8005a7e:	3302      	addmi	r3, #2
 8005a80:	6033      	strmi	r3, [r6, #0]
 8005a82:	6825      	ldr	r5, [r4, #0]
 8005a84:	f015 0506 	ands.w	r5, r5, #6
 8005a88:	d106      	bne.n	8005a98 <_printf_common+0x48>
 8005a8a:	f104 0a19 	add.w	sl, r4, #25
 8005a8e:	68e3      	ldr	r3, [r4, #12]
 8005a90:	6832      	ldr	r2, [r6, #0]
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	dc26      	bgt.n	8005ae6 <_printf_common+0x96>
 8005a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a9c:	1e13      	subs	r3, r2, #0
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	bf18      	it	ne
 8005aa2:	2301      	movne	r3, #1
 8005aa4:	0692      	lsls	r2, r2, #26
 8005aa6:	d42b      	bmi.n	8005b00 <_printf_common+0xb0>
 8005aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aac:	4649      	mov	r1, r9
 8005aae:	4638      	mov	r0, r7
 8005ab0:	47c0      	blx	r8
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d01e      	beq.n	8005af4 <_printf_common+0xa4>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	68e5      	ldr	r5, [r4, #12]
 8005aba:	6832      	ldr	r2, [r6, #0]
 8005abc:	f003 0306 	and.w	r3, r3, #6
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	bf08      	it	eq
 8005ac4:	1aad      	subeq	r5, r5, r2
 8005ac6:	68a3      	ldr	r3, [r4, #8]
 8005ac8:	6922      	ldr	r2, [r4, #16]
 8005aca:	bf0c      	ite	eq
 8005acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad0:	2500      	movne	r5, #0
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	bfc4      	itt	gt
 8005ad6:	1a9b      	subgt	r3, r3, r2
 8005ad8:	18ed      	addgt	r5, r5, r3
 8005ada:	2600      	movs	r6, #0
 8005adc:	341a      	adds	r4, #26
 8005ade:	42b5      	cmp	r5, r6
 8005ae0:	d11a      	bne.n	8005b18 <_printf_common+0xc8>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e008      	b.n	8005af8 <_printf_common+0xa8>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4652      	mov	r2, sl
 8005aea:	4649      	mov	r1, r9
 8005aec:	4638      	mov	r0, r7
 8005aee:	47c0      	blx	r8
 8005af0:	3001      	adds	r0, #1
 8005af2:	d103      	bne.n	8005afc <_printf_common+0xac>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	3501      	adds	r5, #1
 8005afe:	e7c6      	b.n	8005a8e <_printf_common+0x3e>
 8005b00:	18e1      	adds	r1, r4, r3
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	2030      	movs	r0, #48	; 0x30
 8005b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b0a:	4422      	add	r2, r4
 8005b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b14:	3302      	adds	r3, #2
 8005b16:	e7c7      	b.n	8005aa8 <_printf_common+0x58>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	4638      	mov	r0, r7
 8005b20:	47c0      	blx	r8
 8005b22:	3001      	adds	r0, #1
 8005b24:	d0e6      	beq.n	8005af4 <_printf_common+0xa4>
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7d9      	b.n	8005ade <_printf_common+0x8e>
	...

08005b2c <_printf_i>:
 8005b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	7e0f      	ldrb	r7, [r1, #24]
 8005b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b34:	2f78      	cmp	r7, #120	; 0x78
 8005b36:	4691      	mov	r9, r2
 8005b38:	4680      	mov	r8, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	469a      	mov	sl, r3
 8005b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b42:	d807      	bhi.n	8005b54 <_printf_i+0x28>
 8005b44:	2f62      	cmp	r7, #98	; 0x62
 8005b46:	d80a      	bhi.n	8005b5e <_printf_i+0x32>
 8005b48:	2f00      	cmp	r7, #0
 8005b4a:	f000 80d8 	beq.w	8005cfe <_printf_i+0x1d2>
 8005b4e:	2f58      	cmp	r7, #88	; 0x58
 8005b50:	f000 80a3 	beq.w	8005c9a <_printf_i+0x16e>
 8005b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b5c:	e03a      	b.n	8005bd4 <_printf_i+0xa8>
 8005b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b62:	2b15      	cmp	r3, #21
 8005b64:	d8f6      	bhi.n	8005b54 <_printf_i+0x28>
 8005b66:	a101      	add	r1, pc, #4	; (adr r1, 8005b6c <_printf_i+0x40>)
 8005b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005b55 	.word	0x08005b55
 8005b78:	08005b55 	.word	0x08005b55
 8005b7c:	08005b55 	.word	0x08005b55
 8005b80:	08005b55 	.word	0x08005b55
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005b55 	.word	0x08005b55
 8005b8c:	08005b55 	.word	0x08005b55
 8005b90:	08005b55 	.word	0x08005b55
 8005b94:	08005b55 	.word	0x08005b55
 8005b98:	08005ce5 	.word	0x08005ce5
 8005b9c:	08005c09 	.word	0x08005c09
 8005ba0:	08005cc7 	.word	0x08005cc7
 8005ba4:	08005b55 	.word	0x08005b55
 8005ba8:	08005b55 	.word	0x08005b55
 8005bac:	08005d07 	.word	0x08005d07
 8005bb0:	08005b55 	.word	0x08005b55
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005b55 	.word	0x08005b55
 8005bbc:	08005b55 	.word	0x08005b55
 8005bc0:	08005ccf 	.word	0x08005ccf
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	602a      	str	r2, [r5, #0]
 8005bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0a3      	b.n	8005d20 <_printf_i+0x1f4>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	6829      	ldr	r1, [r5, #0]
 8005bdc:	0606      	lsls	r6, r0, #24
 8005bde:	f101 0304 	add.w	r3, r1, #4
 8005be2:	d50a      	bpl.n	8005bfa <_printf_i+0xce>
 8005be4:	680e      	ldr	r6, [r1, #0]
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	2e00      	cmp	r6, #0
 8005bea:	da03      	bge.n	8005bf4 <_printf_i+0xc8>
 8005bec:	232d      	movs	r3, #45	; 0x2d
 8005bee:	4276      	negs	r6, r6
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf4:	485e      	ldr	r0, [pc, #376]	; (8005d70 <_printf_i+0x244>)
 8005bf6:	230a      	movs	r3, #10
 8005bf8:	e019      	b.n	8005c2e <_printf_i+0x102>
 8005bfa:	680e      	ldr	r6, [r1, #0]
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c02:	bf18      	it	ne
 8005c04:	b236      	sxthne	r6, r6
 8005c06:	e7ef      	b.n	8005be8 <_printf_i+0xbc>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	6820      	ldr	r0, [r4, #0]
 8005c0c:	1d19      	adds	r1, r3, #4
 8005c0e:	6029      	str	r1, [r5, #0]
 8005c10:	0601      	lsls	r1, r0, #24
 8005c12:	d501      	bpl.n	8005c18 <_printf_i+0xec>
 8005c14:	681e      	ldr	r6, [r3, #0]
 8005c16:	e002      	b.n	8005c1e <_printf_i+0xf2>
 8005c18:	0646      	lsls	r6, r0, #25
 8005c1a:	d5fb      	bpl.n	8005c14 <_printf_i+0xe8>
 8005c1c:	881e      	ldrh	r6, [r3, #0]
 8005c1e:	4854      	ldr	r0, [pc, #336]	; (8005d70 <_printf_i+0x244>)
 8005c20:	2f6f      	cmp	r7, #111	; 0x6f
 8005c22:	bf0c      	ite	eq
 8005c24:	2308      	moveq	r3, #8
 8005c26:	230a      	movne	r3, #10
 8005c28:	2100      	movs	r1, #0
 8005c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c2e:	6865      	ldr	r5, [r4, #4]
 8005c30:	60a5      	str	r5, [r4, #8]
 8005c32:	2d00      	cmp	r5, #0
 8005c34:	bfa2      	ittt	ge
 8005c36:	6821      	ldrge	r1, [r4, #0]
 8005c38:	f021 0104 	bicge.w	r1, r1, #4
 8005c3c:	6021      	strge	r1, [r4, #0]
 8005c3e:	b90e      	cbnz	r6, 8005c44 <_printf_i+0x118>
 8005c40:	2d00      	cmp	r5, #0
 8005c42:	d04d      	beq.n	8005ce0 <_printf_i+0x1b4>
 8005c44:	4615      	mov	r5, r2
 8005c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c4e:	5dc7      	ldrb	r7, [r0, r7]
 8005c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c54:	4637      	mov	r7, r6
 8005c56:	42bb      	cmp	r3, r7
 8005c58:	460e      	mov	r6, r1
 8005c5a:	d9f4      	bls.n	8005c46 <_printf_i+0x11a>
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d10b      	bne.n	8005c78 <_printf_i+0x14c>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	07de      	lsls	r6, r3, #31
 8005c64:	d508      	bpl.n	8005c78 <_printf_i+0x14c>
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	6861      	ldr	r1, [r4, #4]
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	bfde      	ittt	le
 8005c6e:	2330      	movle	r3, #48	; 0x30
 8005c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c78:	1b52      	subs	r2, r2, r5
 8005c7a:	6122      	str	r2, [r4, #16]
 8005c7c:	f8cd a000 	str.w	sl, [sp]
 8005c80:	464b      	mov	r3, r9
 8005c82:	aa03      	add	r2, sp, #12
 8005c84:	4621      	mov	r1, r4
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fee2 	bl	8005a50 <_printf_common>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d14c      	bne.n	8005d2a <_printf_i+0x1fe>
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	b004      	add	sp, #16
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9a:	4835      	ldr	r0, [pc, #212]	; (8005d70 <_printf_i+0x244>)
 8005c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ca0:	6829      	ldr	r1, [r5, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ca8:	6029      	str	r1, [r5, #0]
 8005caa:	061d      	lsls	r5, r3, #24
 8005cac:	d514      	bpl.n	8005cd8 <_printf_i+0x1ac>
 8005cae:	07df      	lsls	r7, r3, #31
 8005cb0:	bf44      	itt	mi
 8005cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb6:	6023      	strmi	r3, [r4, #0]
 8005cb8:	b91e      	cbnz	r6, 8005cc2 <_printf_i+0x196>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f023 0320 	bic.w	r3, r3, #32
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	2310      	movs	r3, #16
 8005cc4:	e7b0      	b.n	8005c28 <_printf_i+0xfc>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f043 0320 	orr.w	r3, r3, #32
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	2378      	movs	r3, #120	; 0x78
 8005cd0:	4828      	ldr	r0, [pc, #160]	; (8005d74 <_printf_i+0x248>)
 8005cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cd6:	e7e3      	b.n	8005ca0 <_printf_i+0x174>
 8005cd8:	0659      	lsls	r1, r3, #25
 8005cda:	bf48      	it	mi
 8005cdc:	b2b6      	uxthmi	r6, r6
 8005cde:	e7e6      	b.n	8005cae <_printf_i+0x182>
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	e7bb      	b.n	8005c5c <_printf_i+0x130>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	6826      	ldr	r6, [r4, #0]
 8005ce8:	6961      	ldr	r1, [r4, #20]
 8005cea:	1d18      	adds	r0, r3, #4
 8005cec:	6028      	str	r0, [r5, #0]
 8005cee:	0635      	lsls	r5, r6, #24
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_i+0x1cc>
 8005cf4:	6019      	str	r1, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <_printf_i+0x1d2>
 8005cf8:	0670      	lsls	r0, r6, #25
 8005cfa:	d5fb      	bpl.n	8005cf4 <_printf_i+0x1c8>
 8005cfc:	8019      	strh	r1, [r3, #0]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6123      	str	r3, [r4, #16]
 8005d02:	4615      	mov	r5, r2
 8005d04:	e7ba      	b.n	8005c7c <_printf_i+0x150>
 8005d06:	682b      	ldr	r3, [r5, #0]
 8005d08:	1d1a      	adds	r2, r3, #4
 8005d0a:	602a      	str	r2, [r5, #0]
 8005d0c:	681d      	ldr	r5, [r3, #0]
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	2100      	movs	r1, #0
 8005d12:	4628      	mov	r0, r5
 8005d14:	f7fa fa74 	bl	8000200 <memchr>
 8005d18:	b108      	cbz	r0, 8005d1e <_printf_i+0x1f2>
 8005d1a:	1b40      	subs	r0, r0, r5
 8005d1c:	6060      	str	r0, [r4, #4]
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	2300      	movs	r3, #0
 8005d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d28:	e7a8      	b.n	8005c7c <_printf_i+0x150>
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	462a      	mov	r2, r5
 8005d2e:	4649      	mov	r1, r9
 8005d30:	4640      	mov	r0, r8
 8005d32:	47d0      	blx	sl
 8005d34:	3001      	adds	r0, #1
 8005d36:	d0ab      	beq.n	8005c90 <_printf_i+0x164>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	079b      	lsls	r3, r3, #30
 8005d3c:	d413      	bmi.n	8005d66 <_printf_i+0x23a>
 8005d3e:	68e0      	ldr	r0, [r4, #12]
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	4298      	cmp	r0, r3
 8005d44:	bfb8      	it	lt
 8005d46:	4618      	movlt	r0, r3
 8005d48:	e7a4      	b.n	8005c94 <_printf_i+0x168>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4640      	mov	r0, r8
 8005d52:	47d0      	blx	sl
 8005d54:	3001      	adds	r0, #1
 8005d56:	d09b      	beq.n	8005c90 <_printf_i+0x164>
 8005d58:	3501      	adds	r5, #1
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	9903      	ldr	r1, [sp, #12]
 8005d5e:	1a5b      	subs	r3, r3, r1
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dcf2      	bgt.n	8005d4a <_printf_i+0x21e>
 8005d64:	e7eb      	b.n	8005d3e <_printf_i+0x212>
 8005d66:	2500      	movs	r5, #0
 8005d68:	f104 0619 	add.w	r6, r4, #25
 8005d6c:	e7f5      	b.n	8005d5a <_printf_i+0x22e>
 8005d6e:	bf00      	nop
 8005d70:	08006575 	.word	0x08006575
 8005d74:	08006586 	.word	0x08006586

08005d78 <_scanf_chars>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	688a      	ldr	r2, [r1, #8]
 8005d80:	4680      	mov	r8, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	b932      	cbnz	r2, 8005d94 <_scanf_chars+0x1c>
 8005d86:	698a      	ldr	r2, [r1, #24]
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2201      	moveq	r2, #1
 8005d8e:	f04f 32ff 	movne.w	r2, #4294967295
 8005d92:	608a      	str	r2, [r1, #8]
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005e28 <_scanf_chars+0xb0>
 8005d9a:	06d1      	lsls	r1, r2, #27
 8005d9c:	bf5f      	itttt	pl
 8005d9e:	681a      	ldrpl	r2, [r3, #0]
 8005da0:	1d11      	addpl	r1, r2, #4
 8005da2:	6019      	strpl	r1, [r3, #0]
 8005da4:	6816      	ldrpl	r6, [r2, #0]
 8005da6:	2700      	movs	r7, #0
 8005da8:	69a0      	ldr	r0, [r4, #24]
 8005daa:	b188      	cbz	r0, 8005dd0 <_scanf_chars+0x58>
 8005dac:	2801      	cmp	r0, #1
 8005dae:	d107      	bne.n	8005dc0 <_scanf_chars+0x48>
 8005db0:	682a      	ldr	r2, [r5, #0]
 8005db2:	7811      	ldrb	r1, [r2, #0]
 8005db4:	6962      	ldr	r2, [r4, #20]
 8005db6:	5c52      	ldrb	r2, [r2, r1]
 8005db8:	b952      	cbnz	r2, 8005dd0 <_scanf_chars+0x58>
 8005dba:	2f00      	cmp	r7, #0
 8005dbc:	d031      	beq.n	8005e22 <_scanf_chars+0xaa>
 8005dbe:	e022      	b.n	8005e06 <_scanf_chars+0x8e>
 8005dc0:	2802      	cmp	r0, #2
 8005dc2:	d120      	bne.n	8005e06 <_scanf_chars+0x8e>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005dcc:	071b      	lsls	r3, r3, #28
 8005dce:	d41a      	bmi.n	8005e06 <_scanf_chars+0x8e>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	06da      	lsls	r2, r3, #27
 8005dd4:	bf5e      	ittt	pl
 8005dd6:	682b      	ldrpl	r3, [r5, #0]
 8005dd8:	781b      	ldrbpl	r3, [r3, #0]
 8005dda:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005dde:	682a      	ldr	r2, [r5, #0]
 8005de0:	686b      	ldr	r3, [r5, #4]
 8005de2:	3201      	adds	r2, #1
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	68a2      	ldr	r2, [r4, #8]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	3a01      	subs	r2, #1
 8005dec:	606b      	str	r3, [r5, #4]
 8005dee:	3701      	adds	r7, #1
 8005df0:	60a2      	str	r2, [r4, #8]
 8005df2:	b142      	cbz	r2, 8005e06 <_scanf_chars+0x8e>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dcd7      	bgt.n	8005da8 <_scanf_chars+0x30>
 8005df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	4640      	mov	r0, r8
 8005e00:	4798      	blx	r3
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d0d0      	beq.n	8005da8 <_scanf_chars+0x30>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	f013 0310 	ands.w	r3, r3, #16
 8005e0c:	d105      	bne.n	8005e1a <_scanf_chars+0xa2>
 8005e0e:	68e2      	ldr	r2, [r4, #12]
 8005e10:	3201      	adds	r2, #1
 8005e12:	60e2      	str	r2, [r4, #12]
 8005e14:	69a2      	ldr	r2, [r4, #24]
 8005e16:	b102      	cbz	r2, 8005e1a <_scanf_chars+0xa2>
 8005e18:	7033      	strb	r3, [r6, #0]
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	443b      	add	r3, r7
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	2000      	movs	r0, #0
 8005e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e26:	bf00      	nop
 8005e28:	080065b3 	.word	0x080065b3

08005e2c <_scanf_i>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4698      	mov	r8, r3
 8005e32:	4b76      	ldr	r3, [pc, #472]	; (800600c <_scanf_i+0x1e0>)
 8005e34:	460c      	mov	r4, r1
 8005e36:	4682      	mov	sl, r0
 8005e38:	4616      	mov	r6, r2
 8005e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	ab03      	add	r3, sp, #12
 8005e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e46:	4b72      	ldr	r3, [pc, #456]	; (8006010 <_scanf_i+0x1e4>)
 8005e48:	69a1      	ldr	r1, [r4, #24]
 8005e4a:	4a72      	ldr	r2, [pc, #456]	; (8006014 <_scanf_i+0x1e8>)
 8005e4c:	2903      	cmp	r1, #3
 8005e4e:	bf18      	it	ne
 8005e50:	461a      	movne	r2, r3
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	9201      	str	r2, [sp, #4]
 8005e56:	1e5a      	subs	r2, r3, #1
 8005e58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e5c:	bf88      	it	hi
 8005e5e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e62:	4627      	mov	r7, r4
 8005e64:	bf82      	ittt	hi
 8005e66:	eb03 0905 	addhi.w	r9, r3, r5
 8005e6a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e6e:	60a3      	strhi	r3, [r4, #8]
 8005e70:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005e74:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005e78:	bf98      	it	ls
 8005e7a:	f04f 0900 	movls.w	r9, #0
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	463d      	mov	r5, r7
 8005e82:	f04f 0b00 	mov.w	fp, #0
 8005e86:	6831      	ldr	r1, [r6, #0]
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	7809      	ldrb	r1, [r1, #0]
 8005e8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f7fa f9b5 	bl	8000200 <memchr>
 8005e96:	b328      	cbz	r0, 8005ee4 <_scanf_i+0xb8>
 8005e98:	f1bb 0f01 	cmp.w	fp, #1
 8005e9c:	d159      	bne.n	8005f52 <_scanf_i+0x126>
 8005e9e:	6862      	ldr	r2, [r4, #4]
 8005ea0:	b92a      	cbnz	r2, 8005eae <_scanf_i+0x82>
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eaa:	6063      	str	r3, [r4, #4]
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005eb4:	6022      	str	r2, [r4, #0]
 8005eb6:	68a2      	ldr	r2, [r4, #8]
 8005eb8:	1e51      	subs	r1, r2, #1
 8005eba:	60a1      	str	r1, [r4, #8]
 8005ebc:	b192      	cbz	r2, 8005ee4 <_scanf_i+0xb8>
 8005ebe:	6832      	ldr	r2, [r6, #0]
 8005ec0:	1c51      	adds	r1, r2, #1
 8005ec2:	6031      	str	r1, [r6, #0]
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	f805 2b01 	strb.w	r2, [r5], #1
 8005eca:	6872      	ldr	r2, [r6, #4]
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	6072      	str	r2, [r6, #4]
 8005ed2:	dc07      	bgt.n	8005ee4 <_scanf_i+0xb8>
 8005ed4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4650      	mov	r0, sl
 8005edc:	4790      	blx	r2
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f040 8085 	bne.w	8005fee <_scanf_i+0x1c2>
 8005ee4:	f10b 0b01 	add.w	fp, fp, #1
 8005ee8:	f1bb 0f03 	cmp.w	fp, #3
 8005eec:	d1cb      	bne.n	8005e86 <_scanf_i+0x5a>
 8005eee:	6863      	ldr	r3, [r4, #4]
 8005ef0:	b90b      	cbnz	r3, 8005ef6 <_scanf_i+0xca>
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	6863      	ldr	r3, [r4, #4]
 8005ef8:	4947      	ldr	r1, [pc, #284]	; (8006018 <_scanf_i+0x1ec>)
 8005efa:	6960      	ldr	r0, [r4, #20]
 8005efc:	1ac9      	subs	r1, r1, r3
 8005efe:	f000 f8af 	bl	8006060 <__sccl>
 8005f02:	f04f 0b00 	mov.w	fp, #0
 8005f06:	68a3      	ldr	r3, [r4, #8]
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d03d      	beq.n	8005f8a <_scanf_i+0x15e>
 8005f0e:	6831      	ldr	r1, [r6, #0]
 8005f10:	6960      	ldr	r0, [r4, #20]
 8005f12:	f891 c000 	ldrb.w	ip, [r1]
 8005f16:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d035      	beq.n	8005f8a <_scanf_i+0x15e>
 8005f1e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005f22:	d124      	bne.n	8005f6e <_scanf_i+0x142>
 8005f24:	0510      	lsls	r0, r2, #20
 8005f26:	d522      	bpl.n	8005f6e <_scanf_i+0x142>
 8005f28:	f10b 0b01 	add.w	fp, fp, #1
 8005f2c:	f1b9 0f00 	cmp.w	r9, #0
 8005f30:	d003      	beq.n	8005f3a <_scanf_i+0x10e>
 8005f32:	3301      	adds	r3, #1
 8005f34:	f109 39ff 	add.w	r9, r9, #4294967295
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	6873      	ldr	r3, [r6, #4]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	6073      	str	r3, [r6, #4]
 8005f42:	dd1b      	ble.n	8005f7c <_scanf_i+0x150>
 8005f44:	6833      	ldr	r3, [r6, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	6033      	str	r3, [r6, #0]
 8005f4a:	68a3      	ldr	r3, [r4, #8]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60a3      	str	r3, [r4, #8]
 8005f50:	e7d9      	b.n	8005f06 <_scanf_i+0xda>
 8005f52:	f1bb 0f02 	cmp.w	fp, #2
 8005f56:	d1ae      	bne.n	8005eb6 <_scanf_i+0x8a>
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005f5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005f62:	d1bf      	bne.n	8005ee4 <_scanf_i+0xb8>
 8005f64:	2310      	movs	r3, #16
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6c:	e7a2      	b.n	8005eb4 <_scanf_i+0x88>
 8005f6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	780b      	ldrb	r3, [r1, #0]
 8005f76:	f805 3b01 	strb.w	r3, [r5], #1
 8005f7a:	e7de      	b.n	8005f3a <_scanf_i+0x10e>
 8005f7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f80:	4631      	mov	r1, r6
 8005f82:	4650      	mov	r0, sl
 8005f84:	4798      	blx	r3
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0df      	beq.n	8005f4a <_scanf_i+0x11e>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	05db      	lsls	r3, r3, #23
 8005f8e:	d50d      	bpl.n	8005fac <_scanf_i+0x180>
 8005f90:	42bd      	cmp	r5, r7
 8005f92:	d909      	bls.n	8005fa8 <_scanf_i+0x17c>
 8005f94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	4798      	blx	r3
 8005fa2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005fa6:	464d      	mov	r5, r9
 8005fa8:	42bd      	cmp	r5, r7
 8005faa:	d02d      	beq.n	8006008 <_scanf_i+0x1dc>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	f012 0210 	ands.w	r2, r2, #16
 8005fb2:	d113      	bne.n	8005fdc <_scanf_i+0x1b0>
 8005fb4:	702a      	strb	r2, [r5, #0]
 8005fb6:	6863      	ldr	r3, [r4, #4]
 8005fb8:	9e01      	ldr	r6, [sp, #4]
 8005fba:	4639      	mov	r1, r7
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	47b0      	blx	r6
 8005fc0:	6821      	ldr	r1, [r4, #0]
 8005fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc6:	f011 0f20 	tst.w	r1, #32
 8005fca:	d013      	beq.n	8005ff4 <_scanf_i+0x1c8>
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	f8c8 2000 	str.w	r2, [r8]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6018      	str	r0, [r3, #0]
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60e3      	str	r3, [r4, #12]
 8005fdc:	1bed      	subs	r5, r5, r7
 8005fde:	44ab      	add	fp, r5
 8005fe0:	6925      	ldr	r5, [r4, #16]
 8005fe2:	445d      	add	r5, fp
 8005fe4:	6125      	str	r5, [r4, #16]
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	b007      	add	sp, #28
 8005fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fee:	f04f 0b00 	mov.w	fp, #0
 8005ff2:	e7ca      	b.n	8005f8a <_scanf_i+0x15e>
 8005ff4:	1d1a      	adds	r2, r3, #4
 8005ff6:	f8c8 2000 	str.w	r2, [r8]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f011 0f01 	tst.w	r1, #1
 8006000:	bf14      	ite	ne
 8006002:	8018      	strhne	r0, [r3, #0]
 8006004:	6018      	streq	r0, [r3, #0]
 8006006:	e7e6      	b.n	8005fd6 <_scanf_i+0x1aa>
 8006008:	2001      	movs	r0, #1
 800600a:	e7ed      	b.n	8005fe8 <_scanf_i+0x1bc>
 800600c:	080064ac 	.word	0x080064ac
 8006010:	080062bd 	.word	0x080062bd
 8006014:	080061d5 	.word	0x080061d5
 8006018:	080065b0 	.word	0x080065b0

0800601c <_read_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_read_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fa ffba 	bl	8000fa4 <_read>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_read_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_read_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20000278 	.word	0x20000278

08006040 <_sbrk_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	; (800605c <_sbrk_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fa fffc 	bl	8001048 <_sbrk>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_sbrk_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_sbrk_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20000278 	.word	0x20000278

08006060 <__sccl>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	780b      	ldrb	r3, [r1, #0]
 8006064:	4604      	mov	r4, r0
 8006066:	2b5e      	cmp	r3, #94	; 0x5e
 8006068:	bf0b      	itete	eq
 800606a:	784b      	ldrbeq	r3, [r1, #1]
 800606c:	1c48      	addne	r0, r1, #1
 800606e:	1c88      	addeq	r0, r1, #2
 8006070:	2200      	movne	r2, #0
 8006072:	bf08      	it	eq
 8006074:	2201      	moveq	r2, #1
 8006076:	1e61      	subs	r1, r4, #1
 8006078:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800607c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006080:	42a9      	cmp	r1, r5
 8006082:	d1fb      	bne.n	800607c <__sccl+0x1c>
 8006084:	b90b      	cbnz	r3, 800608a <__sccl+0x2a>
 8006086:	3801      	subs	r0, #1
 8006088:	bd70      	pop	{r4, r5, r6, pc}
 800608a:	f082 0201 	eor.w	r2, r2, #1
 800608e:	54e2      	strb	r2, [r4, r3]
 8006090:	4605      	mov	r5, r0
 8006092:	4628      	mov	r0, r5
 8006094:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006098:	292d      	cmp	r1, #45	; 0x2d
 800609a:	d006      	beq.n	80060aa <__sccl+0x4a>
 800609c:	295d      	cmp	r1, #93	; 0x5d
 800609e:	d0f3      	beq.n	8006088 <__sccl+0x28>
 80060a0:	b909      	cbnz	r1, 80060a6 <__sccl+0x46>
 80060a2:	4628      	mov	r0, r5
 80060a4:	e7f0      	b.n	8006088 <__sccl+0x28>
 80060a6:	460b      	mov	r3, r1
 80060a8:	e7f1      	b.n	800608e <__sccl+0x2e>
 80060aa:	786e      	ldrb	r6, [r5, #1]
 80060ac:	2e5d      	cmp	r6, #93	; 0x5d
 80060ae:	d0fa      	beq.n	80060a6 <__sccl+0x46>
 80060b0:	42b3      	cmp	r3, r6
 80060b2:	dcf8      	bgt.n	80060a6 <__sccl+0x46>
 80060b4:	3502      	adds	r5, #2
 80060b6:	4619      	mov	r1, r3
 80060b8:	3101      	adds	r1, #1
 80060ba:	428e      	cmp	r6, r1
 80060bc:	5462      	strb	r2, [r4, r1]
 80060be:	dcfb      	bgt.n	80060b8 <__sccl+0x58>
 80060c0:	1af1      	subs	r1, r6, r3
 80060c2:	3901      	subs	r1, #1
 80060c4:	1c58      	adds	r0, r3, #1
 80060c6:	42b3      	cmp	r3, r6
 80060c8:	bfa8      	it	ge
 80060ca:	2100      	movge	r1, #0
 80060cc:	1843      	adds	r3, r0, r1
 80060ce:	e7e0      	b.n	8006092 <__sccl+0x32>

080060d0 <_strtol_l.constprop.0>:
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d6:	d001      	beq.n	80060dc <_strtol_l.constprop.0+0xc>
 80060d8:	2b24      	cmp	r3, #36	; 0x24
 80060da:	d906      	bls.n	80060ea <_strtol_l.constprop.0+0x1a>
 80060dc:	f7fe fc66 	bl	80049ac <__errno>
 80060e0:	2316      	movs	r3, #22
 80060e2:	6003      	str	r3, [r0, #0]
 80060e4:	2000      	movs	r0, #0
 80060e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80061d0 <_strtol_l.constprop.0+0x100>
 80060ee:	460d      	mov	r5, r1
 80060f0:	462e      	mov	r6, r5
 80060f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80060fa:	f017 0708 	ands.w	r7, r7, #8
 80060fe:	d1f7      	bne.n	80060f0 <_strtol_l.constprop.0+0x20>
 8006100:	2c2d      	cmp	r4, #45	; 0x2d
 8006102:	d132      	bne.n	800616a <_strtol_l.constprop.0+0x9a>
 8006104:	782c      	ldrb	r4, [r5, #0]
 8006106:	2701      	movs	r7, #1
 8006108:	1cb5      	adds	r5, r6, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05b      	beq.n	80061c6 <_strtol_l.constprop.0+0xf6>
 800610e:	2b10      	cmp	r3, #16
 8006110:	d109      	bne.n	8006126 <_strtol_l.constprop.0+0x56>
 8006112:	2c30      	cmp	r4, #48	; 0x30
 8006114:	d107      	bne.n	8006126 <_strtol_l.constprop.0+0x56>
 8006116:	782c      	ldrb	r4, [r5, #0]
 8006118:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800611c:	2c58      	cmp	r4, #88	; 0x58
 800611e:	d14d      	bne.n	80061bc <_strtol_l.constprop.0+0xec>
 8006120:	786c      	ldrb	r4, [r5, #1]
 8006122:	2310      	movs	r3, #16
 8006124:	3502      	adds	r5, #2
 8006126:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800612a:	f108 38ff 	add.w	r8, r8, #4294967295
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	fbb8 f9f3 	udiv	r9, r8, r3
 8006136:	4666      	mov	r6, ip
 8006138:	fb03 8a19 	mls	sl, r3, r9, r8
 800613c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006140:	f1be 0f09 	cmp.w	lr, #9
 8006144:	d816      	bhi.n	8006174 <_strtol_l.constprop.0+0xa4>
 8006146:	4674      	mov	r4, lr
 8006148:	42a3      	cmp	r3, r4
 800614a:	dd24      	ble.n	8006196 <_strtol_l.constprop.0+0xc6>
 800614c:	f1bc 0f00 	cmp.w	ip, #0
 8006150:	db1e      	blt.n	8006190 <_strtol_l.constprop.0+0xc0>
 8006152:	45b1      	cmp	r9, r6
 8006154:	d31c      	bcc.n	8006190 <_strtol_l.constprop.0+0xc0>
 8006156:	d101      	bne.n	800615c <_strtol_l.constprop.0+0x8c>
 8006158:	45a2      	cmp	sl, r4
 800615a:	db19      	blt.n	8006190 <_strtol_l.constprop.0+0xc0>
 800615c:	fb06 4603 	mla	r6, r6, r3, r4
 8006160:	f04f 0c01 	mov.w	ip, #1
 8006164:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006168:	e7e8      	b.n	800613c <_strtol_l.constprop.0+0x6c>
 800616a:	2c2b      	cmp	r4, #43	; 0x2b
 800616c:	bf04      	itt	eq
 800616e:	782c      	ldrbeq	r4, [r5, #0]
 8006170:	1cb5      	addeq	r5, r6, #2
 8006172:	e7ca      	b.n	800610a <_strtol_l.constprop.0+0x3a>
 8006174:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006178:	f1be 0f19 	cmp.w	lr, #25
 800617c:	d801      	bhi.n	8006182 <_strtol_l.constprop.0+0xb2>
 800617e:	3c37      	subs	r4, #55	; 0x37
 8006180:	e7e2      	b.n	8006148 <_strtol_l.constprop.0+0x78>
 8006182:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006186:	f1be 0f19 	cmp.w	lr, #25
 800618a:	d804      	bhi.n	8006196 <_strtol_l.constprop.0+0xc6>
 800618c:	3c57      	subs	r4, #87	; 0x57
 800618e:	e7db      	b.n	8006148 <_strtol_l.constprop.0+0x78>
 8006190:	f04f 3cff 	mov.w	ip, #4294967295
 8006194:	e7e6      	b.n	8006164 <_strtol_l.constprop.0+0x94>
 8006196:	f1bc 0f00 	cmp.w	ip, #0
 800619a:	da05      	bge.n	80061a8 <_strtol_l.constprop.0+0xd8>
 800619c:	2322      	movs	r3, #34	; 0x22
 800619e:	6003      	str	r3, [r0, #0]
 80061a0:	4646      	mov	r6, r8
 80061a2:	b942      	cbnz	r2, 80061b6 <_strtol_l.constprop.0+0xe6>
 80061a4:	4630      	mov	r0, r6
 80061a6:	e79e      	b.n	80060e6 <_strtol_l.constprop.0+0x16>
 80061a8:	b107      	cbz	r7, 80061ac <_strtol_l.constprop.0+0xdc>
 80061aa:	4276      	negs	r6, r6
 80061ac:	2a00      	cmp	r2, #0
 80061ae:	d0f9      	beq.n	80061a4 <_strtol_l.constprop.0+0xd4>
 80061b0:	f1bc 0f00 	cmp.w	ip, #0
 80061b4:	d000      	beq.n	80061b8 <_strtol_l.constprop.0+0xe8>
 80061b6:	1e69      	subs	r1, r5, #1
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	e7f3      	b.n	80061a4 <_strtol_l.constprop.0+0xd4>
 80061bc:	2430      	movs	r4, #48	; 0x30
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1b1      	bne.n	8006126 <_strtol_l.constprop.0+0x56>
 80061c2:	2308      	movs	r3, #8
 80061c4:	e7af      	b.n	8006126 <_strtol_l.constprop.0+0x56>
 80061c6:	2c30      	cmp	r4, #48	; 0x30
 80061c8:	d0a5      	beq.n	8006116 <_strtol_l.constprop.0+0x46>
 80061ca:	230a      	movs	r3, #10
 80061cc:	e7ab      	b.n	8006126 <_strtol_l.constprop.0+0x56>
 80061ce:	bf00      	nop
 80061d0:	080065b3 	.word	0x080065b3

080061d4 <_strtol_r>:
 80061d4:	f7ff bf7c 	b.w	80060d0 <_strtol_l.constprop.0>

080061d8 <_strtoul_l.constprop.0>:
 80061d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061dc:	4f36      	ldr	r7, [pc, #216]	; (80062b8 <_strtoul_l.constprop.0+0xe0>)
 80061de:	4686      	mov	lr, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	4628      	mov	r0, r5
 80061e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061e8:	5de6      	ldrb	r6, [r4, r7]
 80061ea:	f016 0608 	ands.w	r6, r6, #8
 80061ee:	d1f8      	bne.n	80061e2 <_strtoul_l.constprop.0+0xa>
 80061f0:	2c2d      	cmp	r4, #45	; 0x2d
 80061f2:	d12f      	bne.n	8006254 <_strtoul_l.constprop.0+0x7c>
 80061f4:	782c      	ldrb	r4, [r5, #0]
 80061f6:	2601      	movs	r6, #1
 80061f8:	1c85      	adds	r5, r0, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d057      	beq.n	80062ae <_strtoul_l.constprop.0+0xd6>
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d109      	bne.n	8006216 <_strtoul_l.constprop.0+0x3e>
 8006202:	2c30      	cmp	r4, #48	; 0x30
 8006204:	d107      	bne.n	8006216 <_strtoul_l.constprop.0+0x3e>
 8006206:	7828      	ldrb	r0, [r5, #0]
 8006208:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800620c:	2858      	cmp	r0, #88	; 0x58
 800620e:	d149      	bne.n	80062a4 <_strtoul_l.constprop.0+0xcc>
 8006210:	786c      	ldrb	r4, [r5, #1]
 8006212:	2310      	movs	r3, #16
 8006214:	3502      	adds	r5, #2
 8006216:	f04f 38ff 	mov.w	r8, #4294967295
 800621a:	2700      	movs	r7, #0
 800621c:	fbb8 f8f3 	udiv	r8, r8, r3
 8006220:	fb03 f908 	mul.w	r9, r3, r8
 8006224:	ea6f 0909 	mvn.w	r9, r9
 8006228:	4638      	mov	r0, r7
 800622a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800622e:	f1bc 0f09 	cmp.w	ip, #9
 8006232:	d814      	bhi.n	800625e <_strtoul_l.constprop.0+0x86>
 8006234:	4664      	mov	r4, ip
 8006236:	42a3      	cmp	r3, r4
 8006238:	dd22      	ble.n	8006280 <_strtoul_l.constprop.0+0xa8>
 800623a:	2f00      	cmp	r7, #0
 800623c:	db1d      	blt.n	800627a <_strtoul_l.constprop.0+0xa2>
 800623e:	4580      	cmp	r8, r0
 8006240:	d31b      	bcc.n	800627a <_strtoul_l.constprop.0+0xa2>
 8006242:	d101      	bne.n	8006248 <_strtoul_l.constprop.0+0x70>
 8006244:	45a1      	cmp	r9, r4
 8006246:	db18      	blt.n	800627a <_strtoul_l.constprop.0+0xa2>
 8006248:	fb00 4003 	mla	r0, r0, r3, r4
 800624c:	2701      	movs	r7, #1
 800624e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006252:	e7ea      	b.n	800622a <_strtoul_l.constprop.0+0x52>
 8006254:	2c2b      	cmp	r4, #43	; 0x2b
 8006256:	bf04      	itt	eq
 8006258:	782c      	ldrbeq	r4, [r5, #0]
 800625a:	1c85      	addeq	r5, r0, #2
 800625c:	e7cd      	b.n	80061fa <_strtoul_l.constprop.0+0x22>
 800625e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006262:	f1bc 0f19 	cmp.w	ip, #25
 8006266:	d801      	bhi.n	800626c <_strtoul_l.constprop.0+0x94>
 8006268:	3c37      	subs	r4, #55	; 0x37
 800626a:	e7e4      	b.n	8006236 <_strtoul_l.constprop.0+0x5e>
 800626c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006270:	f1bc 0f19 	cmp.w	ip, #25
 8006274:	d804      	bhi.n	8006280 <_strtoul_l.constprop.0+0xa8>
 8006276:	3c57      	subs	r4, #87	; 0x57
 8006278:	e7dd      	b.n	8006236 <_strtoul_l.constprop.0+0x5e>
 800627a:	f04f 37ff 	mov.w	r7, #4294967295
 800627e:	e7e6      	b.n	800624e <_strtoul_l.constprop.0+0x76>
 8006280:	2f00      	cmp	r7, #0
 8006282:	da07      	bge.n	8006294 <_strtoul_l.constprop.0+0xbc>
 8006284:	2322      	movs	r3, #34	; 0x22
 8006286:	f8ce 3000 	str.w	r3, [lr]
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	b932      	cbnz	r2, 800629e <_strtoul_l.constprop.0+0xc6>
 8006290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006294:	b106      	cbz	r6, 8006298 <_strtoul_l.constprop.0+0xc0>
 8006296:	4240      	negs	r0, r0
 8006298:	2a00      	cmp	r2, #0
 800629a:	d0f9      	beq.n	8006290 <_strtoul_l.constprop.0+0xb8>
 800629c:	b107      	cbz	r7, 80062a0 <_strtoul_l.constprop.0+0xc8>
 800629e:	1e69      	subs	r1, r5, #1
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	e7f5      	b.n	8006290 <_strtoul_l.constprop.0+0xb8>
 80062a4:	2430      	movs	r4, #48	; 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1b5      	bne.n	8006216 <_strtoul_l.constprop.0+0x3e>
 80062aa:	2308      	movs	r3, #8
 80062ac:	e7b3      	b.n	8006216 <_strtoul_l.constprop.0+0x3e>
 80062ae:	2c30      	cmp	r4, #48	; 0x30
 80062b0:	d0a9      	beq.n	8006206 <_strtoul_l.constprop.0+0x2e>
 80062b2:	230a      	movs	r3, #10
 80062b4:	e7af      	b.n	8006216 <_strtoul_l.constprop.0+0x3e>
 80062b6:	bf00      	nop
 80062b8:	080065b3 	.word	0x080065b3

080062bc <_strtoul_r>:
 80062bc:	f7ff bf8c 	b.w	80061d8 <_strtoul_l.constprop.0>

080062c0 <__submore>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	460c      	mov	r4, r1
 80062c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062cc:	4299      	cmp	r1, r3
 80062ce:	d11d      	bne.n	800630c <__submore+0x4c>
 80062d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062d4:	f7ff f81c 	bl	8005310 <_malloc_r>
 80062d8:	b918      	cbnz	r0, 80062e2 <__submore+0x22>
 80062da:	f04f 30ff 	mov.w	r0, #4294967295
 80062de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80062e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80062ec:	6360      	str	r0, [r4, #52]	; 0x34
 80062ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80062f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80062f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80062fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80062fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006302:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006306:	6020      	str	r0, [r4, #0]
 8006308:	2000      	movs	r0, #0
 800630a:	e7e8      	b.n	80062de <__submore+0x1e>
 800630c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800630e:	0077      	lsls	r7, r6, #1
 8006310:	463a      	mov	r2, r7
 8006312:	f000 f84b 	bl	80063ac <_realloc_r>
 8006316:	4605      	mov	r5, r0
 8006318:	2800      	cmp	r0, #0
 800631a:	d0de      	beq.n	80062da <__submore+0x1a>
 800631c:	eb00 0806 	add.w	r8, r0, r6
 8006320:	4601      	mov	r1, r0
 8006322:	4632      	mov	r2, r6
 8006324:	4640      	mov	r0, r8
 8006326:	f000 f827 	bl	8006378 <memcpy>
 800632a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800632e:	f8c4 8000 	str.w	r8, [r4]
 8006332:	e7e9      	b.n	8006308 <__submore+0x48>

08006334 <_fstat_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d07      	ldr	r5, [pc, #28]	; (8006354 <_fstat_r+0x20>)
 8006338:	2300      	movs	r3, #0
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	f7fa fe58 	bl	8000ff6 <_fstat>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d102      	bne.n	8006350 <_fstat_r+0x1c>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	b103      	cbz	r3, 8006350 <_fstat_r+0x1c>
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	bd38      	pop	{r3, r4, r5, pc}
 8006352:	bf00      	nop
 8006354:	20000278 	.word	0x20000278

08006358 <_isatty_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d06      	ldr	r5, [pc, #24]	; (8006374 <_isatty_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fa fe57 	bl	8001016 <_isatty>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_isatty_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_isatty_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20000278 	.word	0x20000278

08006378 <memcpy>:
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006380:	d100      	bne.n	8006384 <memcpy+0xc>
 8006382:	4770      	bx	lr
 8006384:	b510      	push	{r4, lr}
 8006386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800638e:	4291      	cmp	r1, r2
 8006390:	d1f9      	bne.n	8006386 <memcpy+0xe>
 8006392:	bd10      	pop	{r4, pc}

08006394 <__malloc_lock>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__malloc_lock+0x8>)
 8006396:	f7fe bed5 	b.w	8005144 <__retarget_lock_acquire_recursive>
 800639a:	bf00      	nop
 800639c:	2000026c 	.word	0x2000026c

080063a0 <__malloc_unlock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__malloc_unlock+0x8>)
 80063a2:	f7fe bed0 	b.w	8005146 <__retarget_lock_release_recursive>
 80063a6:	bf00      	nop
 80063a8:	2000026c 	.word	0x2000026c

080063ac <_realloc_r>:
 80063ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b0:	4680      	mov	r8, r0
 80063b2:	4614      	mov	r4, r2
 80063b4:	460e      	mov	r6, r1
 80063b6:	b921      	cbnz	r1, 80063c2 <_realloc_r+0x16>
 80063b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063bc:	4611      	mov	r1, r2
 80063be:	f7fe bfa7 	b.w	8005310 <_malloc_r>
 80063c2:	b92a      	cbnz	r2, 80063d0 <_realloc_r+0x24>
 80063c4:	f7fe ff38 	bl	8005238 <_free_r>
 80063c8:	4625      	mov	r5, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d0:	f000 f81b 	bl	800640a <_malloc_usable_size_r>
 80063d4:	4284      	cmp	r4, r0
 80063d6:	4607      	mov	r7, r0
 80063d8:	d802      	bhi.n	80063e0 <_realloc_r+0x34>
 80063da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063de:	d812      	bhi.n	8006406 <_realloc_r+0x5a>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4640      	mov	r0, r8
 80063e4:	f7fe ff94 	bl	8005310 <_malloc_r>
 80063e8:	4605      	mov	r5, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d0ed      	beq.n	80063ca <_realloc_r+0x1e>
 80063ee:	42bc      	cmp	r4, r7
 80063f0:	4622      	mov	r2, r4
 80063f2:	4631      	mov	r1, r6
 80063f4:	bf28      	it	cs
 80063f6:	463a      	movcs	r2, r7
 80063f8:	f7ff ffbe 	bl	8006378 <memcpy>
 80063fc:	4631      	mov	r1, r6
 80063fe:	4640      	mov	r0, r8
 8006400:	f7fe ff1a 	bl	8005238 <_free_r>
 8006404:	e7e1      	b.n	80063ca <_realloc_r+0x1e>
 8006406:	4635      	mov	r5, r6
 8006408:	e7df      	b.n	80063ca <_realloc_r+0x1e>

0800640a <_malloc_usable_size_r>:
 800640a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640e:	1f18      	subs	r0, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfbc      	itt	lt
 8006414:	580b      	ldrlt	r3, [r1, r0]
 8006416:	18c0      	addlt	r0, r0, r3
 8006418:	4770      	bx	lr
	...

0800641c <_init>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr

08006428 <_fini>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr
