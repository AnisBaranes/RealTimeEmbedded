
AnisSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000680c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c20  08006c20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c28  08006c28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08006ca0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006ca0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001344f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d7  00000000  00000000  000334ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00035cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b76  00000000  00000000  00037c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136a2  00000000  00000000  000607d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5c70  00000000  00000000  00073e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169ae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  00169b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006984 	.word	0x08006984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006984 	.word	0x08006984

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ButtonInit>:

extern TIM_HandleTypeDef htim6;
extern uint32_t prevTick;

void ButtonInit(BUTTON* btn, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80fb      	strh	r3, [r7, #6]
	btn->GPIO_Pin = GPIO_Pin;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	88fa      	ldrh	r2, [r7, #6]
 80005b6:	809a      	strh	r2, [r3, #4]
	btn->GPIOx = GPIOx;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	601a      	str	r2, [r3, #0]
	btn->counterDoublePress = 0;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <setButtonState>:


void setButtonState(BUTTON* btn)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	GPIO_PinState resPin = HAL_GPIO_ReadPin(btn->GPIOx, btn->GPIO_Pin);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	4619      	mov	r1, r3
 80005e2:	4610      	mov	r0, r2
 80005e4:	f001 fa28 	bl	8001a38 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	73fb      	strb	r3, [r7, #15]
	if(resPin == GPIO_PIN_RESET)
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d11d      	bne.n	800062e <setButtonState+0x5e>
	{
		if(btn->buttonState == shortPress && btn->counterDoublePress < 500) //if last press was short press and there is another press less than 500 ms
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	799b      	ldrb	r3, [r3, #6]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d108      	bne.n	800060c <setButtonState+0x3c>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000602:	da03      	bge.n	800060c <setButtonState+0x3c>
		{
			btn->buttonState = doublePress;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2203      	movs	r2, #3
 8000608:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		prevTick = HAL_GetTick();
	}
}
 800060a:	e015      	b.n	8000638 <setButtonState+0x68>
		else if(HAL_GetTick() - prevTick < 500)
 800060c:	f000 ff4c 	bl	80014a8 <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <setButtonState+0x70>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800061c:	d203      	bcs.n	8000626 <setButtonState+0x56>
			btn->buttonState = shortPress;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	719a      	strb	r2, [r3, #6]
}
 8000624:	e008      	b.n	8000638 <setButtonState+0x68>
			btn->buttonState = longPress;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2202      	movs	r2, #2
 800062a:	719a      	strb	r2, [r3, #6]
}
 800062c:	e004      	b.n	8000638 <setButtonState+0x68>
		prevTick = HAL_GetTick();
 800062e:	f000 ff3b 	bl	80014a8 <HAL_GetTick>
 8000632:	4603      	mov	r3, r0
 8000634:	4a02      	ldr	r2, [pc, #8]	; (8000640 <setButtonState+0x70>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000264 	.word	0x20000264

08000644 <ButtonOnTimerInterrupt>:


int ButtonOnTimerInterrupt(BUTTON* btn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if(btn->counterDoublePress == 500)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000654:	d103      	bne.n	800065e <ButtonOnTimerInterrupt+0x1a>
	{
		btn->counterDoublePress = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	e004      	b.n	8000668 <ButtonOnTimerInterrupt+0x24>
	}
	else
	{
		btn->counterDoublePress ++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	609a      	str	r2, [r3, #8]
	}
	return btn->counterDoublePress;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <startTimer>:

uint16_t timer_val;


void startTimer(TIM_HandleTypeDef *timer, CLOCK* clock)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	clock-> timCounterms = 0;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000688:	2036      	movs	r0, #54	; 0x36
 800068a:	f001 f810 	bl	80016ae <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(timer);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f002 fd92 	bl	80031b8 <HAL_TIM_Base_Start_IT>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <getFullTime>:
{
	clock-> timCounterms++;
}

CLOCK* getFullTime(CLOCK* clock)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	//int hours, minuts, seconds;

	clock-> hours = clock -> timCounterms/3600;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a18      	ldr	r2, [pc, #96]	; (800070c <getFullTime+0x70>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	441a      	add	r2, r3
 80006b0:	12d2      	asrs	r2, r2, #11
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
	clock-> minuts = (clock -> timCounterms - clock->hours*3600)/60;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4913      	ldr	r1, [pc, #76]	; (8000710 <getFullTime+0x74>)
 80006c4:	fb01 f303 	mul.w	r3, r1, r3
 80006c8:	4413      	add	r3, r2
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <getFullTime+0x78>)
 80006cc:	fb82 1203 	smull	r1, r2, r2, r3
 80006d0:	441a      	add	r2, r3
 80006d2:	1152      	asrs	r2, r2, #5
 80006d4:	17db      	asrs	r3, r3, #31
 80006d6:	1ad2      	subs	r2, r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
    clock-> seconds = clock -> timCounterms - clock->hours*3600 - clock->minuts*60;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	490a      	ldr	r1, [pc, #40]	; (8000710 <getFullTime+0x74>)
 80006e6:	fb01 f303 	mul.w	r3, r1, r3
 80006ea:	18d1      	adds	r1, r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	4613      	mov	r3, r2
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	18ca      	adds	r2, r1, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60da      	str	r2, [r3, #12]

    return clock;
 80006fe:	687b      	ldr	r3, [r7, #4]
	//printf("%d seconds = %d hours : %d minutes : %d seconds\n\r", clock -> timCounterms, hours, minuts, seconds);
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	91a2b3c5 	.word	0x91a2b3c5
 8000710:	fffff1f0 	.word	0xfffff1f0
 8000714:	88888889 	.word	0x88888889

08000718 <LedInit>:
extern int brightnessValue;
extern uint32_t prevTick;


void LedInit(LED* led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	4613      	mov	r3, r2
 8000724:	80fb      	strh	r3, [r7, #6]
	led->counter = 0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
	led->GPIOx = GPIOx;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	60da      	str	r2, [r3, #12]
	led->GPIO_Pin = GPIO_Pin;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	821a      	strh	r2, [r3, #16]
	led->peroid = 0;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	68b8      	ldr	r0, [r7, #8]
 8000746:	f001 f98f 	bl	8001a68 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <LedOff>:
	led->state = LED_ON;
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, GPIO_PIN_SET);
}

void LedOff(LED* led)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	led->state = LED_OFF;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2202      	movs	r2, #2
 800075e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	8a1b      	ldrh	r3, [r3, #16]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	f001 f97c 	bl	8001a68 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fe24 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f80f 	bl	80007a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f998 	bl	8000ab8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000788:	f000 f966 	bl	8000a58 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800078c:	f000 f92c 	bl	80009e8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000790:	f000 f8ce 	bl	8000930 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000794:	f000 f856 	bl	8000844 <MX_TIM2_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }

  mainloop();
 8000798:	f000 fa10 	bl	8000bbc <mainloop>
 800079c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b096      	sub	sp, #88	; 0x58
 80007a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2244      	movs	r2, #68	; 0x44
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f004 fbd9 	bl	8004f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c8:	f001 f98c 	bl	8001ae4 <HAL_PWREx_ControlVoltageScaling>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d2:	f000 f9ed 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f0:	230a      	movs	r3, #10
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f9c3 	bl	8001b90 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000810:	f000 f9ce 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fd8b 	bl	8002348 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000838:	f000 f9ba 	bl	8000bb0 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	; 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_TIM2_Init+0xe8>)
 8000878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_TIM2_Init+0xe8>)
 8000880:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_TIM2_Init+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_TIM2_Init+0xe8>)
 800088e:	2263      	movs	r2, #99	; 0x63
 8000890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_TIM2_Init+0xe8>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_TIM2_Init+0xe8>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089e:	4823      	ldr	r0, [pc, #140]	; (800092c <MX_TIM2_Init+0xe8>)
 80008a0:	f002 fc32 	bl	8003108 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 f981 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <MX_TIM2_Init+0xe8>)
 80008bc:	f002 ff76 	bl	80037ac <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008c6:	f000 f973 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_TIM2_Init+0xe8>)
 80008cc:	f002 fce4 	bl	8003298 <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008d6:	f000 f96b 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <MX_TIM2_Init+0xe8>)
 80008ea:	f003 fc51 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008f4:	f000 f95c 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 80008fc:	2309      	movs	r3, #9
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM2_Init+0xe8>)
 8000910:	f002 fe38 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800091a:	f000 f949 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM2_Init+0xe8>)
 8000920:	f000 fb88 	bl	8001034 <HAL_TIM_MspPostInit>

}
 8000924:	bf00      	nop
 8000926:	3738      	adds	r7, #56	; 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000008c 	.word	0x2000008c

08000930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]
 8000952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_TIM3_Init+0xb0>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_TIM3_Init+0xb4>)
 8000958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_TIM3_Init+0xb0>)
 800095c:	f240 321f 	movw	r2, #799	; 0x31f
 8000960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_TIM3_Init+0xb0>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 262;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM3_Init+0xb0>)
 800096a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800096e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM3_Init+0xb0>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM3_Init+0xb0>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_TIM3_Init+0xb0>)
 800097e:	f002 fc8b 	bl	8003298 <HAL_TIM_PWM_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 f912 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_TIM3_Init+0xb0>)
 800099c:	f003 fbf8 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80009a6:	f000 f903 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009aa:	2360      	movs	r3, #96	; 0x60
 80009ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM3_Init+0xb0>)
 80009c2:	f002 fddf 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80009cc:	f000 f8f0 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM3_Init+0xb0>)
 80009d2:	f000 fb2f 	bl	8001034 <HAL_TIM_MspPostInit>

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000d8 	.word	0x200000d8
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_TIM6_Init+0x68>)
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <MX_TIM6_Init+0x6c>)
 80009fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_TIM6_Init+0x68>)
 8000a00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_TIM6_Init+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_TIM6_Init+0x68>)
 8000a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_TIM6_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_TIM6_Init+0x68>)
 8000a1c:	f002 fb74 	bl	8003108 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a26:	f000 f8c3 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_TIM6_Init+0x68>)
 8000a38:	f003 fbaa 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000a42:	f000 f8b5 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000124 	.word	0x20000124
 8000a54:	40001000 	.word	0x40001000

08000a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_USART2_UART_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART2_UART_Init+0x58>)
 8000a9c:	f003 fc1e 	bl	80042dc <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f883 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000170 	.word	0x20000170
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a35      	ldr	r2, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2160      	movs	r1, #96	; 0x60
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f000 ff97 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fdc6 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b5e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f000 fdb7 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b76:	2308      	movs	r3, #8
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_GPIO_Init+0xf4>)
 8000b8c:	f000 fdaa 	bl	80016e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f000 fd6e 	bl	8001676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b9a:	2028      	movs	r0, #40	; 0x28
 8000b9c:	f000 fd87 	bl	80016ae <HAL_NVIC_EnableIRQ>

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <mainloop>:
LED ledBlue;
BUTTON d2;
BUTTON d3;

void mainloop()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	startTimer(&htim6, &clock);
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <mainloop+0x24>)
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <mainloop+0x28>)
 8000bc4:	f7ff fd58 	bl	8000678 <startTimer>
	buttonsInit();
 8000bc8:	f000 f822 	bl	8000c10 <buttonsInit>
	ledsInit();
 8000bcc:	f000 f80c 	bl	8000be8 <ledsInit>
	//Led blink
	//LedBlink(&ledRed, 10);

	while (1)
	{
		if (commTask())
 8000bd0:	f000 f8ce 	bl	8000d70 <commTask>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0fa      	beq.n	8000bd0 <mainloop+0x14>
		{
			handleCommand();
 8000bda:	f000 f947 	bl	8000e6c <handleCommand>
		if (commTask())
 8000bde:	e7f7      	b.n	8000bd0 <mainloop+0x14>
 8000be0:	20000268 	.word	0x20000268
 8000be4:	20000124 	.word	0x20000124

08000be8 <ledsInit>:
	}
}


void ledsInit()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	LedInit(&ledRed, LD3_GPIO_Port, LD3_Pin);
 8000bec:	2240      	movs	r2, #64	; 0x40
 8000bee:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <ledsInit+0x20>)
 8000bf4:	f7ff fd90 	bl	8000718 <LedInit>
	LedInit(&ledBlue, GPIOA, LD2_Pin);
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <ledsInit+0x24>)
 8000c00:	f7ff fd8a 	bl	8000718 <LedInit>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000278 	.word	0x20000278
 8000c0c:	2000028c 	.word	0x2000028c

08000c10 <buttonsInit>:


void buttonsInit()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	ButtonInit(&d2, B2_GPIO_Port, B2_Pin);
 8000c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c18:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <buttonsInit+0x20>)
 8000c1e:	f7ff fcc1 	bl	80005a4 <ButtonInit>
	ButtonInit(&d3, B3_GPIO_Port, B3_Pin);
 8000c22:	2208      	movs	r2, #8
 8000c24:	4903      	ldr	r1, [pc, #12]	; (8000c34 <buttonsInit+0x24>)
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <buttonsInit+0x28>)
 8000c28:	f7ff fcbc 	bl	80005a4 <ButtonInit>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200002a0 	.word	0x200002a0
 8000c34:	48000400 	.word	0x48000400
 8000c38:	200002ac 	.word	0x200002ac

08000c3c <_write>:
	{
		StopBuzzer(timer);
	}
}

int _write(int fd, char* ptr, int len) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <_write+0x28>)
 8000c54:	f003 fb90 	bl	8004378 <HAL_UART_Transmit>
    return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000170 	.word	0x20000170

08000c68 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d102      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
		//LedOnTimerInterrupt(&ledRed);


		//togglePin(&ledBlue);  //TASK 14 - short/long press/double press

		ButtonOnTimerInterrupt(&d2);
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c7a:	f7ff fce3 	bl	8000644 <ButtonOnTimerInterrupt>
//	else if(htim == &htim2) //Brightness
//	{
//		LedOn(&ledBlue);
//	}

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000124 	.word	0x20000124
 8000c8c:	200002a0 	.word	0x200002a0

08000c90 <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	//pressBuzzer(&htim3, &d2);

	//Brightness
	_level = (_level + 10) % 100;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f103 020a 	add.w	r2, r3, #10
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ca4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca8:	1159      	asrs	r1, r3, #5
 8000caa:	17d3      	asrs	r3, r2, #31
 8000cac:	1acb      	subs	r3, r1, r3
 8000cae:	2164      	movs	r1, #100	; 0x64
 8000cb0:	fb01 f303 	mul.w	r3, r1, r3
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000cb8:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _level);
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34


	//TASK 14- short/long press

	checkPress(&d2);
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000cc6:	f000 f80d 	bl	8000ce4 <checkPress>


}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000260 	.word	0x20000260
 8000cd8:	51eb851f 	.word	0x51eb851f
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	200002a0 	.word	0x200002a0

08000ce4 <checkPress>:


void checkPress(BUTTON* btn)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	setButtonState(btn);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fc6f 	bl	80005d0 <setButtonState>
	switch(btn->buttonState)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d81a      	bhi.n	8000d30 <checkPress+0x4c>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <checkPress+0x1c>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d19 	.word	0x08000d19
 8000d08:	08000d21 	.word	0x08000d21
 8000d0c:	08000d29 	.word	0x08000d29
	{
		case noPress:
			printf("no press\n\r");
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <checkPress+0x54>)
 8000d12:	f004 f931 	bl	8004f78 <iprintf>
			break;
 8000d16:	e00b      	b.n	8000d30 <checkPress+0x4c>
		case shortPress:
			printf("shortPress\n\r");
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <checkPress+0x58>)
 8000d1a:	f004 f92d 	bl	8004f78 <iprintf>
			break;
 8000d1e:	e007      	b.n	8000d30 <checkPress+0x4c>
		case longPress:
			printf("longPress\n\r");
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <checkPress+0x5c>)
 8000d22:	f004 f929 	bl	8004f78 <iprintf>
			break;
 8000d26:	e003      	b.n	8000d30 <checkPress+0x4c>
		case doublePress:
			printf("doublePress\n\r");
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <checkPress+0x60>)
 8000d2a:	f004 f925 	bl	8004f78 <iprintf>
			break;
 8000d2e:	bf00      	nop
	}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	0800699c 	.word	0x0800699c
 8000d3c:	080069a8 	.word	0x080069a8
 8000d40:	080069b8 	.word	0x080069b8
 8000d44:	080069c4 	.word	0x080069c4

08000d48 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) //Brightness
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d102      	bne.n	8000d5e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	{
		LedOff(&ledBlue);
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000d5a:	f7ff fcfa 	bl	8000752 <LedOff>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000008c 	.word	0x2000008c
 8000d6c:	2000028c 	.word	0x2000028c

08000d70 <commTask>:


int commTask()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000d76:	1db9      	adds	r1, r7, #6
 8000d78:	230a      	movs	r3, #10
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4836      	ldr	r0, [pc, #216]	; (8000e58 <commTask+0xe8>)
 8000d7e:	f003 fb8f 	bl	80044a0 <HAL_UART_Receive>
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d020      	beq.n	8000dce <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <commTask+0xe8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d011      	beq.n	8000dbe <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <commTask+0xe8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000da2:	e00c      	b.n	8000dbe <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <commTask+0xec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	492c      	ldr	r1, [pc, #176]	; (8000e5c <commTask+0xec>)
 8000dac:	600a      	str	r2, [r1, #0]
 8000dae:	4a2c      	ldr	r2, [pc, #176]	; (8000e60 <commTask+0xf0>)
 8000db0:	1899      	adds	r1, r3, r2
 8000db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db6:	2201      	movs	r2, #1
 8000db8:	4827      	ldr	r0, [pc, #156]	; (8000e58 <commTask+0xe8>)
 8000dba:	f003 fadd 	bl	8004378 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <commTask+0xec>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <commTask+0xf4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbec      	blt.n	8000da4 <commTask+0x34>
		}

		return 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e03f      	b.n	8000e4e <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b0d      	cmp	r3, #13
 8000dd2:	d023      	beq.n	8000e1c <commTask+0xac>
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	2b0a      	cmp	r3, #10
 8000dd8:	d020      	beq.n	8000e1c <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <commTask+0xf4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b63      	cmp	r3, #99	; 0x63
 8000de0:	dd05      	ble.n	8000dee <commTask+0x7e>
		{
			cmdcount = 0;
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <commTask+0xf4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <commTask+0xec>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <commTask+0xf4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	491b      	ldr	r1, [pc, #108]	; (8000e64 <commTask+0xf4>)
 8000df6:	600a      	str	r2, [r1, #0]
 8000df8:	79b9      	ldrb	r1, [r7, #6]
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <commTask+0xf0>)
 8000dfc:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e025      	b.n	8000e4e <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <commTask+0xec>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	4914      	ldr	r1, [pc, #80]	; (8000e5c <commTask+0xec>)
 8000e0a:	600a      	str	r2, [r1, #0]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <commTask+0xf0>)
 8000e0e:	1899      	adds	r1, r3, r2
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	2201      	movs	r2, #1
 8000e16:	4810      	ldr	r0, [pc, #64]	; (8000e58 <commTask+0xe8>)
 8000e18:	f003 faae 	bl	8004378 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <commTask+0xec>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <commTask+0xf4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbec      	blt.n	8000e02 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <commTask+0xf8>)
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <commTask+0xe8>)
 8000e32:	f003 faa1 	bl	8004378 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <commTask+0xf4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <commTask+0xf0>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <commTask+0xf4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <commTask+0xec>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
	return 1;
 8000e4c:	2301      	movs	r3, #1
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000170 	.word	0x20000170
 8000e5c:	2000025c 	.word	0x2000025c
 8000e60:	200001f4 	.word	0x200001f4
 8000e64:	20000258 	.word	0x20000258
 8000e68:	080069d4 	.word	0x080069d4

08000e6c <handleCommand>:

void handleCommand()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	4920      	ldr	r1, [pc, #128]	; (8000efc <handleCommand+0x90>)
 8000e7a:	4821      	ldr	r0, [pc, #132]	; (8000f00 <handleCommand+0x94>)
 8000e7c:	f004 f90a 	bl	8005094 <siscanf>
 8000e80:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d034      	beq.n	8000ef2 <handleCommand+0x86>
  {
	  return;
  }

  if (strcmp(cmd, "full") == 0)
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	491d      	ldr	r1, [pc, #116]	; (8000f04 <handleCommand+0x98>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f99e 	bl	80001d0 <strcmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d02c      	beq.n	8000ef4 <handleCommand+0x88>
  {
	  //turning_on_led();
  }
  else if (strcmp(cmd, "half") == 0)
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	491a      	ldr	r1, [pc, #104]	; (8000f08 <handleCommand+0x9c>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f995 	bl	80001d0 <strcmp>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <handleCommand+0x88>
  {
	  //half_brightness();
  }
  else if(strcmp(cmd, "blink") == 0)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4916      	ldr	r1, [pc, #88]	; (8000f0c <handleCommand+0xa0>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f98c 	bl	80001d0 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d01a      	beq.n	8000ef4 <handleCommand+0x88>
  {
	  //start_blink();
  }
  else if(strcmp(cmd, "off") == 0)
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4913      	ldr	r1, [pc, #76]	; (8000f10 <handleCommand+0xa4>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f983 	bl	80001d0 <strcmp>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d011      	beq.n	8000ef4 <handleCommand+0x88>
  {
	  //turning_off_led();
  }
  else if(strcmp(cmd, "time") == 0)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	490f      	ldr	r1, [pc, #60]	; (8000f14 <handleCommand+0xa8>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f97a 	bl	80001d0 <strcmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d103      	bne.n	8000eea <handleCommand+0x7e>
  {
	  getFullTime(&clock);
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <handleCommand+0xac>)
 8000ee4:	f7ff fbda 	bl	800069c <getFullTime>
 8000ee8:	e004      	b.n	8000ef4 <handleCommand+0x88>
  }
  else
  {
	  printf("Invalid command\r\n");
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <handleCommand+0xb0>)
 8000eec:	f004 f8ca 	bl	8005084 <puts>
 8000ef0:	e000      	b.n	8000ef4 <handleCommand+0x88>
	  return;
 8000ef2:	bf00      	nop
  }
}
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	080069d8 	.word	0x080069d8
 8000f00:	200001f4 	.word	0x200001f4
 8000f04:	080069e0 	.word	0x080069e0
 8000f08:	080069e8 	.word	0x080069e8
 8000f0c:	080069f0 	.word	0x080069f0
 8000f10:	080069f8 	.word	0x080069f8
 8000f14:	080069fc 	.word	0x080069fc
 8000f18:	20000268 	.word	0x20000268
 8000f1c:	08006a04 	.word	0x08006a04

08000f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_MspInit+0x44>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d114      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_TIM_Base_MspInit+0x78>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <HAL_TIM_Base_MspInit+0x78>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6593      	str	r3, [r2, #88]	; 0x58
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_TIM_Base_MspInit+0x78>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 fb6d 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f000 fb86 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fa2:	e018      	b.n	8000fd6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d113      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_TIM_Base_MspInit+0x78>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_TIM_Base_MspInit+0x78>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x78>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f000 fb53 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fd0:	2036      	movs	r0, #54	; 0x36
 8000fd2:	f000 fb6c 	bl	80016ae <HAL_NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40001000 	.word	0x40001000

08000fe8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_TIM_PWM_MspInit+0x44>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d113      	bne.n	8001022 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_TIM_PWM_MspInit+0x48>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_TIM_PWM_MspInit+0x48>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6593      	str	r3, [r2, #88]	; 0x58
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_TIM_PWM_MspInit+0x48>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	201d      	movs	r0, #29
 8001018:	f000 fb2d 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800101c:	201d      	movs	r0, #29
 800101e:	f000 fb46 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40000400 	.word	0x40000400
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001054:	d11d      	bne.n	8001092 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_TIM_MspPostInit+0xa8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_TIM_MspPostInit+0xa8>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_TIM_MspPostInit+0xa8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800107e:	2301      	movs	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f000 fb2a 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001090:	e020      	b.n	80010d4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_TIM_MspPostInit+0xac>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d11b      	bne.n	80010d4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_TIM_MspPostInit+0xa8>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_TIM_MspPostInit+0xa8>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_TIM_MspPostInit+0xa8>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b4:	2310      	movs	r3, #16
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c4:	2302      	movs	r3, #2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_TIM_MspPostInit+0xb0>)
 80010d0:	f000 fb08 	bl	80016e4 <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40000400 	.word	0x40000400
 80010e4:	48000400 	.word	0x48000400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0ac      	sub	sp, #176	; 0xb0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2288      	movs	r2, #136	; 0x88
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f003 ff2d 	bl	8004f68 <memset>
  if(huart->Instance==USART2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <HAL_UART_MspInit+0xb0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d13b      	bne.n	8001190 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001118:	2302      	movs	r3, #2
 800111a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fb33 	bl	8002790 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001130:	f7ff fd3e 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_UART_MspInit+0xb4>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	4a18      	ldr	r2, [pc, #96]	; (800119c <HAL_UART_MspInit+0xb4>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_UART_MspInit+0xb4>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_UART_MspInit+0xb4>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_UART_MspInit+0xb4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_UART_MspInit+0xb4>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001164:	230c      	movs	r3, #12
 8001166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117c:	2307      	movs	r3, #7
 800117e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f000 faaa 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	37b0      	adds	r7, #176	; 0xb0
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f948 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM2_IRQHandler+0x10>)
 80011fa:	f002 f8a4 	bl	8003346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000008c 	.word	0x2000008c

08001208 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM3_IRQHandler+0x10>)
 800120e:	f002 f89a 	bl	8003346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000d8 	.word	0x200000d8

0800121c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001220:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001224:	f000 fc38 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <TIM6_DAC_IRQHandler+0x10>)
 8001232:	f002 f888 	bl	8003346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000124 	.word	0x20000124

08001240 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
	}

return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:
	}
	return len;
}

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a2:	605a      	str	r2, [r3, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f003 fdfe 	bl	8004f14 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20018000 	.word	0x20018000
 8001344:	00000400 	.word	0x00000400
 8001348:	200002b8 	.word	0x200002b8
 800134c:	200002d0 	.word	0x200002d0

08001350 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f003 fdbd 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff f9e7 	bl	8000778 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013b8:	08006c30 	.word	0x08006c30
  ldr r2, =_sbss
 80013bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013c0:	200002d0 	.word	0x200002d0

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_Init+0x3c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_Init+0x3c>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f93e 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f80f 	bl	8001408 <HAL_InitTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	e001      	b.n	80013fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f6:	f7ff fd93 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_InitTick+0x6c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d023      	beq.n	8001464 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_InitTick+0x70>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_InitTick+0x6c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f949 	bl	80016ca <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d809      	bhi.n	8001458 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f913 	bl	8001676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_InitTick+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e007      	b.n	8001468 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e004      	b.n	8001468 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e001      	b.n	8001468 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	200002bc 	.word	0x200002bc

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200002bc 	.word	0x200002bc

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff29 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff3e 	bl	8001508 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff31 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e17f      	b.n	80019f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8171 	beq.w	80019ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d005      	beq.n	8001724 <HAL_GPIO_Init+0x40>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d130      	bne.n	8001786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175a:	2201      	movs	r2, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 0201 	and.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b03      	cmp	r3, #3
 8001790:	d118      	bne.n	80017c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d017      	beq.n	8001800 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	6939      	ldr	r1, [r7, #16]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80ac 	beq.w	80019ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_GPIO_Init+0x330>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_GPIO_Init+0x330>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6613      	str	r3, [r2, #96]	; 0x60
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HAL_GPIO_Init+0x330>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ae:	4a5a      	ldr	r2, [pc, #360]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018d8:	d025      	beq.n	8001926 <HAL_GPIO_Init+0x242>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <HAL_GPIO_Init+0x338>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01f      	beq.n	8001922 <HAL_GPIO_Init+0x23e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_GPIO_Init+0x33c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x23a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_GPIO_Init+0x340>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x236>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x344>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x232>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <HAL_GPIO_Init+0x348>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x22e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <HAL_GPIO_Init+0x34c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x22a>
 800190a:	2306      	movs	r3, #6
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x244>
 800190e:	2307      	movs	r3, #7
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x244>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x244>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x244>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x244>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x244>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x244>
 8001926:	2300      	movs	r3, #0
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001938:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_GPIO_Init+0x350>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_GPIO_Init+0x350>)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001970:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_GPIO_Init+0x350>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <HAL_GPIO_Init+0x350>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_GPIO_Init+0x350>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019be:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_GPIO_Init+0x350>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_GPIO_Init+0x350>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_GPIO_Init+0x350>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f47f ae78 	bne.w	80016f4 <HAL_GPIO_Init+0x10>
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	48000c00 	.word	0x48000c00
 8001a28:	48001000 	.word	0x48001000
 8001a2c:	48001400 	.word	0x48001400
 8001a30:	48001800 	.word	0x48001800
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8ea 	bl	8000c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af2:	d130      	bne.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b00:	d038      	beq.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2232      	movs	r2, #50	; 0x32
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	3301      	adds	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b28:	e002      	b.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3c:	d102      	bne.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f2      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d110      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e00f      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b62:	d007      	beq.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b6c:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40007000 	.word	0x40007000
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3ca      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba2:	4b97      	ldr	r3, [pc, #604]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bac:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80e4 	beq.w	8001d8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_RCC_OscConfig+0x4a>
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	f040 808b 	bne.w	8001ce8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 8087 	bne.w	8001ce8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x62>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e3a2      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_RCC_OscConfig+0x7c>
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0a:	e005      	b.n	8001c18 <HAL_RCC_OscConfig+0x88>
 8001c0c:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d223      	bcs.n	8001c64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fd55 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e383      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c30:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	496d      	ldr	r1, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4968      	ldr	r1, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
 8001c62:	e025      	b.n	8001cb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	f043 0308 	orr.w	r3, r3, #8
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4960      	ldr	r1, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	495b      	ldr	r1, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fd15 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e343      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb0:	f000 fc4a 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b52      	ldr	r3, [pc, #328]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	4950      	ldr	r1, [pc, #320]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001cce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fb97 	bl	8001408 <HAL_InitTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d052      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	e327      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d032      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fbd4 	bl	80014a8 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d04:	f7ff fbd0 	bl	80014a8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e310      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4931      	ldr	r1, [pc, #196]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	492c      	ldr	r1, [pc, #176]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
 8001d54:	e01a      	b.n	8001d8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fba1 	bl	80014a8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fb9d 	bl	80014a8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e2dd      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x1da>
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d074      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x21a>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	d10e      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d064      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d160      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e2ba      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x24a>
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e026      	b.n	8001e28 <HAL_RCC_OscConfig+0x298>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de2:	d115      	bne.n	8001e10 <HAL_RCC_OscConfig+0x280>
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a02      	ldr	r2, [pc, #8]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0x298>
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08006a24 	.word	0x08006a24
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	4ba0      	ldr	r3, [pc, #640]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a9f      	ldr	r2, [pc, #636]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b9d      	ldr	r3, [pc, #628]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a9c      	ldr	r2, [pc, #624]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb3a 	bl	80014a8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fb36 	bl	80014a8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e276      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2a8>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb26 	bl	80014a8 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fb22 	bl	80014a8 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e262      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2d0>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d060      	beq.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x310>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d116      	bne.n	8001ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea0:	4b7c      	ldr	r3, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x328>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e23f      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	4973      	ldr	r1, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	e040      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d023      	beq.n	8001f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fae1 	bl	80014a8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fadd 	bl	80014a8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e21d      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	4b65      	ldr	r3, [pc, #404]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	495f      	ldr	r1, [pc, #380]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
 8001f1c:	e018      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fabd 	bl	80014a8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f32:	f7ff fab9 	bl	80014a8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1f9      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d03c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff fa98 	bl	80014a8 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fa94 	bl	80014a8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1d4      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCC_OscConfig+0x3ec>
 8001f9c:	e01b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa4:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff fa7b 	bl	80014a8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7ff fa77 	bl	80014a8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1b7      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ef      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a6 	beq.w	8002130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10d      	bne.n	8002010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200c:	2301      	movs	r3, #1
 800200e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d118      	bne.n	800204e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002028:	f7ff fa3e 	bl	80014a8 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7ff fa3a 	bl	80014a8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e17a      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_RCC_OscConfig+0x4d8>
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002066:	e029      	b.n	80020bc <HAL_RCC_OscConfig+0x52c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d115      	bne.n	800209c <HAL_RCC_OscConfig+0x50c>
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a03      	ldr	r2, [pc, #12]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002090:	e014      	b.n	80020bc <HAL_RCC_OscConfig+0x52c>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	4b9c      	ldr	r3, [pc, #624]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a9b      	ldr	r2, [pc, #620]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ac:	4b98      	ldr	r3, [pc, #608]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a97      	ldr	r2, [pc, #604]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d016      	beq.n	80020f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f9f0 	bl	80014a8 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f9ec 	bl	80014a8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e12a      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b8b      	ldr	r3, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ed      	beq.n	80020cc <HAL_RCC_OscConfig+0x53c>
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f9d9 	bl	80014a8 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f9d5 	bl	80014a8 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e113      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002110:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ed      	bne.n	80020fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a79      	ldr	r2, [pc, #484]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80fe 	beq.w	8002336 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	2b02      	cmp	r3, #2
 8002140:	f040 80d0 	bne.w	80022e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002144:	4b72      	ldr	r3, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	429a      	cmp	r2, r3
 8002156:	d130      	bne.n	80021ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	3b01      	subs	r3, #1
 8002164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d127      	bne.n	80021ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d11f      	bne.n	80021ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002184:	2a07      	cmp	r2, #7
 8002186:	bf14      	ite	ne
 8002188:	2201      	movne	r2, #1
 800218a:	2200      	moveq	r2, #0
 800218c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800218e:	4293      	cmp	r3, r2
 8002190:	d113      	bne.n	80021ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d06e      	beq.n	8002298 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	d069      	beq.n	8002294 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021cc:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0ad      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e8:	f7ff f95e 	bl	80014a8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff f95a 	bl	80014a8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e09a      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800221e:	3a01      	subs	r2, #1
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002228:	0212      	lsls	r2, r2, #8
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002230:	0852      	lsrs	r2, r2, #1
 8002232:	3a01      	subs	r2, #1
 8002234:	0552      	lsls	r2, r2, #21
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800223c:	0852      	lsrs	r2, r2, #1
 800223e:	3a01      	subs	r2, #1
 8002240:	0652      	lsls	r2, r2, #25
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002248:	0912      	lsrs	r2, r2, #4
 800224a:	0452      	lsls	r2, r2, #17
 800224c:	430a      	orrs	r2, r1
 800224e:	4930      	ldr	r1, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800226c:	f7ff f91c 	bl	80014a8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff f918 	bl	80014a8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e058      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002292:	e050      	b.n	8002336 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e04f      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d148      	bne.n	8002336 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022bc:	f7ff f8f4 	bl	80014a8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff f8f0 	bl	80014a8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e030      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x734>
 80022e2:	e028      	b.n	8002336 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d023      	beq.n	8002332 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_RCC_OscConfig+0x780>)
 80022f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7ff f8d7 	bl	80014a8 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	e00c      	b.n	8002318 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff f8d3 	bl	80014a8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d905      	bls.n	8002318 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
 8002310:	40021000 	.word	0x40021000
 8002314:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_OscConfig+0x7b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ec      	bne.n	80022fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_OscConfig+0x7b0>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4905      	ldr	r1, [pc, #20]	; (8002340 <HAL_RCC_OscConfig+0x7b0>)
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_OscConfig+0x7b4>)
 800232c:	4013      	ands	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
 8002330:	e001      	b.n	8002336 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	feeefffc 	.word	0xfeeefffc

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0e7      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b75      	ldr	r3, [pc, #468]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d910      	bls.n	800238c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4970      	ldr	r1, [pc, #448]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b6e      	ldr	r3, [pc, #440]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0cf      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d908      	bls.n	80023ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4960      	ldr	r1, [pc, #384]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d04c      	beq.n	8002460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ce:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d121      	bne.n	800241e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0a6      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	4b54      	ldr	r3, [pc, #336]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d115      	bne.n	800241e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09a      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e08e      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e086      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4943      	ldr	r1, [pc, #268]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002430:	f7ff f83a 	bl	80014a8 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7ff f836 	bl	80014a8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e06e      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002478:	429a      	cmp	r2, r3
 800247a:	d208      	bcs.n	800248e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	492b      	ldr	r1, [pc, #172]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d210      	bcs.n	80024be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 0207 	bic.w	r2, r3, #7
 80024a4:	4923      	ldr	r1, [pc, #140]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_ClockConfig+0x1ec>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e036      	b.n	800252c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4918      	ldr	r1, [pc, #96]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4910      	ldr	r1, [pc, #64]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fc:	f000 f824 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	490b      	ldr	r1, [pc, #44]	; (800253c <HAL_RCC_ClockConfig+0x1f4>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1fc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe ff71 	bl	8001408 <HAL_InitTick>
 8002526:	4603      	mov	r3, r0
 8002528:	72fb      	strb	r3, [r7, #11]

  return status;
 800252a:	7afb      	ldrb	r3, [r7, #11]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	08006a24 	.word	0x08006a24
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d121      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d11e      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e005      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCC_GetSysClockFreq+0x110>)
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e004      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_RCC_GetSysClockFreq+0x114>)
 80025ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d134      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0xa6>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d003      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0xac>
 80025ec:	e005      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f0:	617b      	str	r3, [r7, #20]
      break;
 80025f2:	e005      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_GetSysClockFreq+0x114>)
 80025f6:	617b      	str	r3, [r7, #20]
      break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	617b      	str	r3, [r7, #20]
      break;
 80025fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	3301      	adds	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	fb03 f202 	mul.w	r2, r3, r2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	0e5b      	lsrs	r3, r3, #25
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	3301      	adds	r3, #1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002640:	69bb      	ldr	r3, [r7, #24]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	08006a3c 	.word	0x08006a3c
 8002658:	00f42400 	.word	0x00f42400
 800265c:	007a1200 	.word	0x007a1200

08002660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_GetHCLKFreq+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800267c:	f7ff fff0 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4904      	ldr	r1, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08006a34 	.word	0x08006a34

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026a8:	f7ff ffda 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0adb      	lsrs	r3, r3, #11
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08006a34 	.word	0x08006a34

080026d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f9ee 	bl	8001ac8 <HAL_PWREx_GetVoltageRange>
 80026ec:	6178      	str	r0, [r7, #20]
 80026ee:	e014      	b.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002708:	f7ff f9de 	bl	8001ac8 <HAL_PWREx_GetVoltageRange>
 800270c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002720:	d10b      	bne.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d919      	bls.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2ba0      	cmp	r3, #160	; 0xa0
 800272c:	d902      	bls.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e013      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e010      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d902      	bls.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002740:	2303      	movs	r3, #3
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e00a      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d102      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800274c:	2302      	movs	r3, #2
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e004      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d101      	bne.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002758:	2301      	movs	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0207 	bic.w	r2, r3, #7
 8002764:	4909      	ldr	r1, [pc, #36]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	40022000 	.word	0x40022000

08002790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002798:	2300      	movs	r3, #0
 800279a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800279c:	2300      	movs	r3, #0
 800279e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d041      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027b4:	d02a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ba:	d824      	bhi.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c0:	d008      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c6:	d81e      	bhi.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d0:	d010      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027d2:	e018      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027d4:	4b86      	ldr	r3, [pc, #536]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a85      	ldr	r2, [pc, #532]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e0:	e015      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fabb 	bl	8002d64 <RCCEx_PLLSAI1_Config>
 80027ee:	4603      	mov	r3, r0
 80027f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f2:	e00c      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3320      	adds	r3, #32
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fba6 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002804:	e003      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	74fb      	strb	r3, [r7, #19]
      break;
 800280a:	e000      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800280c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002814:	4b76      	ldr	r3, [pc, #472]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002822:	4973      	ldr	r1, [pc, #460]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800282a:	e001      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d041      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002844:	d02a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800284a:	d824      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800284c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002856:	d81e      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002860:	d010      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002862:	e018      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002864:	4b62      	ldr	r3, [pc, #392]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a61      	ldr	r2, [pc, #388]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002870:	e015      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fa73 	bl	8002d64 <RCCEx_PLLSAI1_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002882:	e00c      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3320      	adds	r3, #32
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fb5e 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	74fb      	strb	r3, [r7, #19]
      break;
 800289a:	e000      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800289c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028a4:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b2:	494f      	ldr	r1, [pc, #316]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ba:	e001      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a0 	beq.w	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00d      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6593      	str	r3, [r2, #88]	; 0x58
 80028f4:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002900:	2301      	movs	r3, #1
 8002902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002904:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002910:	f7fe fdca 	bl	80014a8 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002916:	e009      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002918:	f7fe fdc6 	bl	80014a8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d902      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	74fb      	strb	r3, [r7, #19]
        break;
 800292a:	e005      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800292c:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d15c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	429a      	cmp	r2, r3
 800295a:	d019      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fd85 	bl	80014a8 <HAL_GetTick>
 800299e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a0:	e00b      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fd81 	bl	80014a8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d902      	bls.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	74fb      	strb	r3, [r7, #19]
            break;
 80029b8:	e006      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ec      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029de:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029e6:	e009      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
 80029ec:	e006      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fc:	7c7b      	ldrb	r3, [r7, #17]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d105      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b9e      	ldr	r3, [pc, #632]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	4a9d      	ldr	r2, [pc, #628]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1a:	4b98      	ldr	r3, [pc, #608]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f023 0203 	bic.w	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	4994      	ldr	r1, [pc, #592]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a3c:	4b8f      	ldr	r3, [pc, #572]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f023 020c 	bic.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	498c      	ldr	r1, [pc, #560]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a5e:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	4983      	ldr	r1, [pc, #524]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a80:	4b7e      	ldr	r3, [pc, #504]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	497b      	ldr	r1, [pc, #492]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	4972      	ldr	r1, [pc, #456]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	496a      	ldr	r1, [pc, #424]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae6:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	4961      	ldr	r1, [pc, #388]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b08:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	4959      	ldr	r1, [pc, #356]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2a:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	4950      	ldr	r1, [pc, #320]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	4948      	ldr	r1, [pc, #288]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b6e:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	493f      	ldr	r1, [pc, #252]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d028      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b90:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	4937      	ldr	r1, [pc, #220]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bae:	d106      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb0:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bba:	60d3      	str	r3, [r2, #12]
 8002bbc:	e011      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc6:	d10c      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f8c8 	bl	8002d64 <RCCEx_PLLSAI1_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d028      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	491f      	ldr	r1, [pc, #124]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c18:	60d3      	str	r3, [r2, #12]
 8002c1a:	e011      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f899 	bl	8002d64 <RCCEx_PLLSAI1_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02b      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	4908      	ldr	r1, [pc, #32]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a02      	ldr	r2, [pc, #8]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c76:	60d3      	str	r3, [r2, #12]
 8002c78:	e014      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f867 	bl	8002d64 <RCCEx_PLLSAI1_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbe:	4928      	ldr	r1, [pc, #160]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cce:	d10d      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f844 	bl	8002d64 <RCCEx_PLLSAI1_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	74bb      	strb	r3, [r7, #18]
 8002cea:	e011      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3320      	adds	r3, #32
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f925 	bl	8002f4c <RCCEx_PLLSAI2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2a:	490d      	ldr	r1, [pc, #52]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4e:	4904      	ldr	r1, [pc, #16]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000

08002d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d018      	beq.n	8002db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d7e:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0203 	and.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d10d      	bne.n	8002daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
       ||
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d96:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
       ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d047      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e044      	b.n	8002e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d018      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0x86>
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d825      	bhi.n	8002e08 <RCCEx_PLLSAI1_Config+0xa4>
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d002      	beq.n	8002dc6 <RCCEx_PLLSAI1_Config+0x62>
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d009      	beq.n	8002dd8 <RCCEx_PLLSAI1_Config+0x74>
 8002dc4:	e020      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dc6:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11d      	bne.n	8002e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd6:	e01a      	b.n	8002e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de8:	e013      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dea:	4b57      	ldr	r3, [pc, #348]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002df6:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e06:	e006      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e004      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	430b      	orrs	r3, r1
 8002e34:	4944      	ldr	r1, [pc, #272]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d17d      	bne.n	8002f3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fb2c 	bl	80014a8 <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e52:	e009      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e54:	f7fe fb28 	bl	80014a8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	73fb      	strb	r3, [r7, #15]
        break;
 8002e66:	e005      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ef      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d160      	bne.n	8002f3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	0211      	lsls	r1, r2, #8
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	0912      	lsrs	r2, r2, #4
 8002e98:	0452      	lsls	r2, r2, #17
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	492a      	ldr	r1, [pc, #168]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	610b      	str	r3, [r1, #16]
 8002ea2:	e027      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d112      	bne.n	8002ed0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	0211      	lsls	r1, r2, #8
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6912      	ldr	r2, [r2, #16]
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	3a01      	subs	r2, #1
 8002ec4:	0552      	lsls	r2, r2, #21
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	491f      	ldr	r1, [pc, #124]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	610b      	str	r3, [r1, #16]
 8002ece:	e011      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	0211      	lsls	r1, r2, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6952      	ldr	r2, [r2, #20]
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	0652      	lsls	r2, r2, #25
 8002eec:	430a      	orrs	r2, r1
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fad2 	bl	80014a8 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f06:	e009      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f08:	f7fe face 	bl	80014a8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d902      	bls.n	8002f1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1a:	e005      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	4904      	ldr	r1, [pc, #16]	; (8002f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f66:	4b67      	ldr	r3, [pc, #412]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f7e:	4b61      	ldr	r3, [pc, #388]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d047      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e044      	b.n	8003022 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d018      	beq.n	8002fd2 <RCCEx_PLLSAI2_Config+0x86>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d825      	bhi.n	8002ff0 <RCCEx_PLLSAI2_Config+0xa4>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <RCCEx_PLLSAI2_Config+0x62>
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d009      	beq.n	8002fc0 <RCCEx_PLLSAI2_Config+0x74>
 8002fac:	e020      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fae:	4b55      	ldr	r3, [pc, #340]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d11d      	bne.n	8002ff6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbe:	e01a      	b.n	8002ff6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd0:	e013      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd2:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fde:	4b49      	ldr	r3, [pc, #292]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fee:	e006      	b.n	8002ffe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e004      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	430b      	orrs	r3, r1
 800301c:	4939      	ldr	r1, [pc, #228]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d167      	bne.n	80030f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a35      	ldr	r2, [pc, #212]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fe fa38 	bl	80014a8 <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800303a:	e009      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800303c:	f7fe fa34 	bl	80014a8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	73fb      	strb	r3, [r7, #15]
        break;
 800304e:	e005      	b.n	800305c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003050:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ef      	bne.n	800303c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d14a      	bne.n	80030f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d111      	bne.n	800308c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6892      	ldr	r2, [r2, #8]
 8003078:	0211      	lsls	r1, r2, #8
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68d2      	ldr	r2, [r2, #12]
 800307e:	0912      	lsrs	r2, r2, #4
 8003080:	0452      	lsls	r2, r2, #17
 8003082:	430a      	orrs	r2, r1
 8003084:	491f      	ldr	r1, [pc, #124]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	614b      	str	r3, [r1, #20]
 800308a:	e011      	b.n	80030b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003094:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6892      	ldr	r2, [r2, #8]
 800309c:	0211      	lsls	r1, r2, #8
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6912      	ldr	r2, [r2, #16]
 80030a2:	0852      	lsrs	r2, r2, #1
 80030a4:	3a01      	subs	r2, #1
 80030a6:	0652      	lsls	r2, r2, #25
 80030a8:	430a      	orrs	r2, r1
 80030aa:	4916      	ldr	r1, [pc, #88]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe f9f4 	bl	80014a8 <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c2:	e009      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c4:	f7fe f9f0 	bl	80014a8 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d902      	bls.n	80030d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	73fb      	strb	r3, [r7, #15]
          break;
 80030d6:	e005      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4904      	ldr	r1, [pc, #16]	; (8003104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e049      	b.n	80031ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd ff1a 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 fc18 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e04f      	b.n	8003270 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a23      	ldr	r2, [pc, #140]	; (800327c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d018      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_TIM_Base_Start_IT+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_TIM_Base_Start_IT+0xcc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_TIM_Base_Start_IT+0xd0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_TIM_Base_Start_IT+0xd4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_TIM_Base_Start_IT+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_TIM_Base_Start_IT+0xdc>)
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d015      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d011      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	e008      	b.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e000      	b.n	800326e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40013400 	.word	0x40013400
 8003290:	40014000 	.word	0x40014000
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fe92 	bl	8000fe8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fb50 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d122      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d11b      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0202 	mvn.w	r2, #2
 8003372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fae2 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 800338e:	e005      	b.n	800339c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fad4 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fcd6 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d122      	bne.n	80033f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d11b      	bne.n	80033f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0204 	mvn.w	r2, #4
 80033c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fab8 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 80033e2:	e005      	b.n	80033f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 faaa 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fcac 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d122      	bne.n	800344a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11b      	bne.n	800344a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0208 	mvn.w	r2, #8
 800341a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2204      	movs	r2, #4
 8003420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fa8e 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 8003436:	e005      	b.n	8003444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fa80 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fc82 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d122      	bne.n	800349e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b10      	cmp	r3, #16
 8003464:	d11b      	bne.n	800349e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0210 	mvn.w	r2, #16
 800346e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2208      	movs	r2, #8
 8003474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fa64 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 800348a:	e005      	b.n	8003498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa56 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fc58 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0201 	mvn.w	r2, #1
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd fbcf 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b80      	cmp	r3, #128	; 0x80
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fedf 	bl	80042b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fed2 	bl	80042c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa0b 	bl	8003966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d10e      	bne.n	800357c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	d107      	bne.n	800357c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0220 	mvn.w	r2, #32
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fe92 	bl	80042a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e0ff      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b14      	cmp	r3, #20
 80035ae:	f200 80f0 	bhi.w	8003792 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035b2:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	08003793 	.word	0x08003793
 80035c0:	08003793 	.word	0x08003793
 80035c4:	08003793 	.word	0x08003793
 80035c8:	0800364d 	.word	0x0800364d
 80035cc:	08003793 	.word	0x08003793
 80035d0:	08003793 	.word	0x08003793
 80035d4:	08003793 	.word	0x08003793
 80035d8:	0800368f 	.word	0x0800368f
 80035dc:	08003793 	.word	0x08003793
 80035e0:	08003793 	.word	0x08003793
 80035e4:	08003793 	.word	0x08003793
 80035e8:	080036cf 	.word	0x080036cf
 80035ec:	08003793 	.word	0x08003793
 80035f0:	08003793 	.word	0x08003793
 80035f4:	08003793 	.word	0x08003793
 80035f8:	08003711 	.word	0x08003711
 80035fc:	08003793 	.word	0x08003793
 8003600:	08003793 	.word	0x08003793
 8003604:	08003793 	.word	0x08003793
 8003608:	08003751 	.word	0x08003751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fa4c 	bl	8003ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0208 	orr.w	r2, r2, #8
 8003626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0204 	bic.w	r2, r2, #4
 8003636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6999      	ldr	r1, [r3, #24]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	619a      	str	r2, [r3, #24]
      break;
 800364a:	e0a5      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fabc 	bl	8003bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	619a      	str	r2, [r3, #24]
      break;
 800368c:	e084      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fb25 	bl	8003ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0208 	orr.w	r2, r2, #8
 80036a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0204 	bic.w	r2, r2, #4
 80036b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69d9      	ldr	r1, [r3, #28]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	61da      	str	r2, [r3, #28]
      break;
 80036cc:	e064      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fb8d 	bl	8003df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	61da      	str	r2, [r3, #28]
      break;
 800370e:	e043      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fbd6 	bl	8003ec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800374e:	e023      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fc1a 	bl	8003f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003790:	e002      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      break;
 8003796:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop

080037ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0b6      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x18a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003804:	d03e      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0xd8>
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380a:	f200 8087 	bhi.w	800391c <HAL_TIM_ConfigClockSource+0x170>
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	f000 8086 	beq.w	8003922 <HAL_TIM_ConfigClockSource+0x176>
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d87f      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 800381c:	2b70      	cmp	r3, #112	; 0x70
 800381e:	d01a      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0xaa>
 8003820:	2b70      	cmp	r3, #112	; 0x70
 8003822:	d87b      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 8003824:	2b60      	cmp	r3, #96	; 0x60
 8003826:	d050      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x11e>
 8003828:	2b60      	cmp	r3, #96	; 0x60
 800382a:	d877      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 800382c:	2b50      	cmp	r3, #80	; 0x50
 800382e:	d03c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xfe>
 8003830:	2b50      	cmp	r3, #80	; 0x50
 8003832:	d873      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d058      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x13e>
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d86f      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 800383c:	2b30      	cmp	r3, #48	; 0x30
 800383e:	d064      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15e>
 8003840:	2b30      	cmp	r3, #48	; 0x30
 8003842:	d86b      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d060      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15e>
 8003848:	2b20      	cmp	r3, #32
 800384a:	d867      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x170>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05c      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15e>
 8003850:	2b10      	cmp	r3, #16
 8003852:	d05a      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15e>
 8003854:	e062      	b.n	800391c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f000 fc73 	bl	8004150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	609a      	str	r2, [r3, #8]
      break;
 8003882:	e04f      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f000 fc5c 	bl	8004150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a6:	609a      	str	r2, [r3, #8]
      break;
 80038a8:	e03c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 fbd0 	bl	800405c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2150      	movs	r1, #80	; 0x50
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fc29 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 80038c8:	e02c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 fbef 	bl	80040ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2160      	movs	r1, #96	; 0x60
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fc19 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 80038e8:	e01c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 fbb0 	bl	800405c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fc09 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 8003908:	e00c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f000 fc00 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 800391a:	e003      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e000      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a40      	ldr	r2, [pc, #256]	; (8003a90 <TIM_Base_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d00f      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <TIM_Base_SetConfig+0x118>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a3c      	ldr	r2, [pc, #240]	; (8003a98 <TIM_Base_SetConfig+0x11c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <TIM_Base_SetConfig+0x120>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <TIM_Base_SetConfig+0x124>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <TIM_Base_SetConfig+0x114>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d01b      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <TIM_Base_SetConfig+0x118>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <TIM_Base_SetConfig+0x11c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <TIM_Base_SetConfig+0x120>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <TIM_Base_SetConfig+0x124>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <TIM_Base_SetConfig+0x128>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <TIM_Base_SetConfig+0x12c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <TIM_Base_SetConfig+0x130>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <TIM_Base_SetConfig+0x114>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0xf8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <TIM_Base_SetConfig+0x124>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0xf8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <TIM_Base_SetConfig+0x128>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <TIM_Base_SetConfig+0x12c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0xf8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <TIM_Base_SetConfig+0x130>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d103      	bne.n	8003a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]
}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40013400 	.word	0x40013400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800

08003ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 0302 	bic.w	r3, r3, #2
 8003afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <TIM_OC1_SetConfig+0x10c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00f      	beq.n	8003b30 <TIM_OC1_SetConfig+0x80>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <TIM_OC1_SetConfig+0x110>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_OC1_SetConfig+0x80>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <TIM_OC1_SetConfig+0x114>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_OC1_SetConfig+0x80>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <TIM_OC1_SetConfig+0x118>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC1_SetConfig+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <TIM_OC1_SetConfig+0x11c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10c      	bne.n	8003b4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0308 	bic.w	r3, r3, #8
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <TIM_OC1_SetConfig+0x10c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_OC1_SetConfig+0xc2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <TIM_OC1_SetConfig+0x110>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_OC1_SetConfig+0xc2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_OC1_SetConfig+0x114>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_OC1_SetConfig+0xc2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <TIM_OC1_SetConfig+0x118>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_OC1_SetConfig+0xc2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <TIM_OC1_SetConfig+0x11c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40013400 	.word	0x40013400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800

08003bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0210 	bic.w	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0320 	bic.w	r3, r3, #32
 8003c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <TIM_OC2_SetConfig+0x100>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC2_SetConfig+0x6c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM_OC2_SetConfig+0x104>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10d      	bne.n	8003c58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <TIM_OC2_SetConfig+0x100>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00f      	beq.n	8003c80 <TIM_OC2_SetConfig+0xb0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <TIM_OC2_SetConfig+0x104>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00b      	beq.n	8003c80 <TIM_OC2_SetConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <TIM_OC2_SetConfig+0x108>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d007      	beq.n	8003c80 <TIM_OC2_SetConfig+0xb0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <TIM_OC2_SetConfig+0x10c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC2_SetConfig+0xb0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <TIM_OC2_SetConfig+0x110>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d113      	bne.n	8003ca8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	621a      	str	r2, [r3, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <TIM_OC3_SetConfig+0xfc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d003      	beq.n	8003d4e <TIM_OC3_SetConfig+0x6a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <TIM_OC3_SetConfig+0x100>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10d      	bne.n	8003d6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <TIM_OC3_SetConfig+0xfc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00f      	beq.n	8003d92 <TIM_OC3_SetConfig+0xae>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <TIM_OC3_SetConfig+0x100>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_OC3_SetConfig+0xae>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <TIM_OC3_SetConfig+0x104>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_OC3_SetConfig+0xae>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <TIM_OC3_SetConfig+0x108>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC3_SetConfig+0xae>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <TIM_OC3_SetConfig+0x10c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d113      	bne.n	8003dba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	621a      	str	r2, [r3, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40013400 	.word	0x40013400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	031b      	lsls	r3, r3, #12
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <TIM_OC4_SetConfig+0xc0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <TIM_OC4_SetConfig+0x84>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <TIM_OC4_SetConfig+0xc4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_OC4_SetConfig+0x84>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <TIM_OC4_SetConfig+0xc8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_OC4_SetConfig+0x84>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC4_SetConfig+0xcc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_OC4_SetConfig+0x84>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <TIM_OC4_SetConfig+0xd0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d109      	bne.n	8003e8c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40013400 	.word	0x40013400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800

08003ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <TIM_OC5_SetConfig+0xb4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <TIM_OC5_SetConfig+0xb8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <TIM_OC5_SetConfig+0xbc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <TIM_OC5_SetConfig+0xc0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC5_SetConfig+0x7a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <TIM_OC5_SetConfig+0xc4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d109      	bne.n	8003f56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <TIM_OC6_SetConfig+0xb8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00f      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <TIM_OC6_SetConfig+0xbc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <TIM_OC6_SetConfig+0xc0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <TIM_OC6_SetConfig+0xc4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC6_SetConfig+0x7c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a14      	ldr	r2, [pc, #80]	; (8004058 <TIM_OC6_SetConfig+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800

0800405c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0201 	bic.w	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 030a 	bic.w	r3, r3, #10
 8004098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0210 	bic.w	r2, r3, #16
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	f043 0307 	orr.w	r3, r3, #7
 800413c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	431a      	orrs	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e068      	b.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2e      	ldr	r2, [pc, #184]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2d      	ldr	r2, [pc, #180]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d018      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10c      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4313      	orrs	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40014000 	.word	0x40014000

080042a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e040      	b.n	8004370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc fef2 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f992 	bl	8004644 <UART_SetConfig>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e022      	b.n	8004370 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fc3e 	bl	8004bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fcc5 	bl	8004cf8 <UART_CheckIdleState>
 800436e:	4603      	mov	r3, r0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438c:	2b20      	cmp	r3, #32
 800438e:	f040 8082 	bne.w	8004496 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_UART_Transmit+0x26>
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07a      	b.n	8004498 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Transmit+0x38>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e073      	b.n	8004498 <HAL_UART_Transmit+0x120>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c6:	f7fd f86f 	bl	80014a8 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d108      	bne.n	80043f8 <HAL_UART_Transmit+0x80>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e003      	b.n	8004400 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004408:	e02d      	b.n	8004466 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fcb8 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e039      	b.n	8004498 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	881a      	ldrh	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004436:	b292      	uxth	r2, r2
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	3302      	adds	r3, #2
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e008      	b.n	8004454 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	b292      	uxth	r2, r2
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3301      	adds	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1cb      	bne.n	800440a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2140      	movs	r1, #64	; 0x40
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fc84 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e005      	b.n	8004498 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	f040 80bf 	bne.w	8004638 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_Receive+0x26>
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0b7      	b.n	800463a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Receive+0x38>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e0b0      	b.n	800463a <HAL_UART_Receive+0x19a>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2222      	movs	r2, #34	; 0x22
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f4:	f7fc ffd8 	bl	80014a8 <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004512:	d10e      	bne.n	8004532 <HAL_UART_Receive+0x92>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <HAL_UART_Receive+0x88>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004526:	e02d      	b.n	8004584 <HAL_UART_Receive+0xe4>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	22ff      	movs	r2, #255	; 0xff
 800452c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004530:	e028      	b.n	8004584 <HAL_UART_Receive+0xe4>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_UART_Receive+0xb6>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Receive+0xac>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	22ff      	movs	r2, #255	; 0xff
 8004546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800454a:	e01b      	b.n	8004584 <HAL_UART_Receive+0xe4>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	227f      	movs	r2, #127	; 0x7f
 8004550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004554:	e016      	b.n	8004584 <HAL_UART_Receive+0xe4>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800455e:	d10d      	bne.n	800457c <HAL_UART_Receive+0xdc>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_UART_Receive+0xd2>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	227f      	movs	r2, #127	; 0x7f
 800456c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004570:	e008      	b.n	8004584 <HAL_UART_Receive+0xe4>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	223f      	movs	r2, #63	; 0x3f
 8004576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800457a:	e003      	b.n	8004584 <HAL_UART_Receive+0xe4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800458a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Receive+0x108>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045b8:	e033      	b.n	8004622 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2120      	movs	r1, #32
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fbe0 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e032      	b.n	800463a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	8a7b      	ldrh	r3, [r7, #18]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	3302      	adds	r3, #2
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	e00d      	b.n	8004610 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	8a7b      	ldrh	r3, [r7, #18]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	4013      	ands	r3, r2
 8004604:	b2da      	uxtb	r2, r3
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3301      	adds	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1c5      	bne.n	80045ba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004648:	b08a      	sub	sp, #40	; 0x28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	431a      	orrs	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	4313      	orrs	r3, r2
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4ba4      	ldr	r3, [pc, #656]	; (8004904 <UART_SetConfig+0x2c0>)
 8004674:	4013      	ands	r3, r2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800467c:	430b      	orrs	r3, r1
 800467e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a99      	ldr	r2, [pc, #612]	; (8004908 <UART_SetConfig+0x2c4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	4313      	orrs	r3, r2
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a90      	ldr	r2, [pc, #576]	; (800490c <UART_SetConfig+0x2c8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d126      	bne.n	800471c <UART_SetConfig+0xd8>
 80046ce:	4b90      	ldr	r3, [pc, #576]	; (8004910 <UART_SetConfig+0x2cc>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d81b      	bhi.n	8004714 <UART_SetConfig+0xd0>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0xa0>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004705 	.word	0x08004705
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	0800470d 	.word	0x0800470d
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e116      	b.n	800492a <UART_SetConfig+0x2e6>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e112      	b.n	800492a <UART_SetConfig+0x2e6>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e10e      	b.n	800492a <UART_SetConfig+0x2e6>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e10a      	b.n	800492a <UART_SetConfig+0x2e6>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e106      	b.n	800492a <UART_SetConfig+0x2e6>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a7c      	ldr	r2, [pc, #496]	; (8004914 <UART_SetConfig+0x2d0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d138      	bne.n	8004798 <UART_SetConfig+0x154>
 8004726:	4b7a      	ldr	r3, [pc, #488]	; (8004910 <UART_SetConfig+0x2cc>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d82d      	bhi.n	8004790 <UART_SetConfig+0x14c>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <UART_SetConfig+0xf8>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004771 	.word	0x08004771
 8004740:	08004791 	.word	0x08004791
 8004744:	08004791 	.word	0x08004791
 8004748:	08004791 	.word	0x08004791
 800474c:	08004781 	.word	0x08004781
 8004750:	08004791 	.word	0x08004791
 8004754:	08004791 	.word	0x08004791
 8004758:	08004791 	.word	0x08004791
 800475c:	08004779 	.word	0x08004779
 8004760:	08004791 	.word	0x08004791
 8004764:	08004791 	.word	0x08004791
 8004768:	08004791 	.word	0x08004791
 800476c:	08004789 	.word	0x08004789
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e0d8      	b.n	800492a <UART_SetConfig+0x2e6>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e0d4      	b.n	800492a <UART_SetConfig+0x2e6>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e0d0      	b.n	800492a <UART_SetConfig+0x2e6>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e0cc      	b.n	800492a <UART_SetConfig+0x2e6>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e0c8      	b.n	800492a <UART_SetConfig+0x2e6>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5e      	ldr	r2, [pc, #376]	; (8004918 <UART_SetConfig+0x2d4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d125      	bne.n	80047ee <UART_SetConfig+0x1aa>
 80047a2:	4b5b      	ldr	r3, [pc, #364]	; (8004910 <UART_SetConfig+0x2cc>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d016      	beq.n	80047de <UART_SetConfig+0x19a>
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d818      	bhi.n	80047e6 <UART_SetConfig+0x1a2>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d00a      	beq.n	80047ce <UART_SetConfig+0x18a>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d814      	bhi.n	80047e6 <UART_SetConfig+0x1a2>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <UART_SetConfig+0x182>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d008      	beq.n	80047d6 <UART_SetConfig+0x192>
 80047c4:	e00f      	b.n	80047e6 <UART_SetConfig+0x1a2>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047cc:	e0ad      	b.n	800492a <UART_SetConfig+0x2e6>
 80047ce:	2302      	movs	r3, #2
 80047d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d4:	e0a9      	b.n	800492a <UART_SetConfig+0x2e6>
 80047d6:	2304      	movs	r3, #4
 80047d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047dc:	e0a5      	b.n	800492a <UART_SetConfig+0x2e6>
 80047de:	2308      	movs	r3, #8
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e4:	e0a1      	b.n	800492a <UART_SetConfig+0x2e6>
 80047e6:	2310      	movs	r3, #16
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ec:	e09d      	b.n	800492a <UART_SetConfig+0x2e6>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4a      	ldr	r2, [pc, #296]	; (800491c <UART_SetConfig+0x2d8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0x200>
 80047f8:	4b45      	ldr	r3, [pc, #276]	; (8004910 <UART_SetConfig+0x2cc>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004802:	2bc0      	cmp	r3, #192	; 0xc0
 8004804:	d016      	beq.n	8004834 <UART_SetConfig+0x1f0>
 8004806:	2bc0      	cmp	r3, #192	; 0xc0
 8004808:	d818      	bhi.n	800483c <UART_SetConfig+0x1f8>
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d00a      	beq.n	8004824 <UART_SetConfig+0x1e0>
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d814      	bhi.n	800483c <UART_SetConfig+0x1f8>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <UART_SetConfig+0x1d8>
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d008      	beq.n	800482c <UART_SetConfig+0x1e8>
 800481a:	e00f      	b.n	800483c <UART_SetConfig+0x1f8>
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	e082      	b.n	800492a <UART_SetConfig+0x2e6>
 8004824:	2302      	movs	r3, #2
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e07e      	b.n	800492a <UART_SetConfig+0x2e6>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e07a      	b.n	800492a <UART_SetConfig+0x2e6>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e076      	b.n	800492a <UART_SetConfig+0x2e6>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e072      	b.n	800492a <UART_SetConfig+0x2e6>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a35      	ldr	r2, [pc, #212]	; (8004920 <UART_SetConfig+0x2dc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d12a      	bne.n	80048a4 <UART_SetConfig+0x260>
 800484e:	4b30      	ldr	r3, [pc, #192]	; (8004910 <UART_SetConfig+0x2cc>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485c:	d01a      	beq.n	8004894 <UART_SetConfig+0x250>
 800485e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004862:	d81b      	bhi.n	800489c <UART_SetConfig+0x258>
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d00c      	beq.n	8004884 <UART_SetConfig+0x240>
 800486a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486e:	d815      	bhi.n	800489c <UART_SetConfig+0x258>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x238>
 8004874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004878:	d008      	beq.n	800488c <UART_SetConfig+0x248>
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x258>
 800487c:	2300      	movs	r3, #0
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e052      	b.n	800492a <UART_SetConfig+0x2e6>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e04e      	b.n	800492a <UART_SetConfig+0x2e6>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e04a      	b.n	800492a <UART_SetConfig+0x2e6>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e046      	b.n	800492a <UART_SetConfig+0x2e6>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e042      	b.n	800492a <UART_SetConfig+0x2e6>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a17      	ldr	r2, [pc, #92]	; (8004908 <UART_SetConfig+0x2c4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d13a      	bne.n	8004924 <UART_SetConfig+0x2e0>
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <UART_SetConfig+0x2cc>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048bc:	d01a      	beq.n	80048f4 <UART_SetConfig+0x2b0>
 80048be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c2:	d81b      	bhi.n	80048fc <UART_SetConfig+0x2b8>
 80048c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c8:	d00c      	beq.n	80048e4 <UART_SetConfig+0x2a0>
 80048ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ce:	d815      	bhi.n	80048fc <UART_SetConfig+0x2b8>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <UART_SetConfig+0x298>
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d008      	beq.n	80048ec <UART_SetConfig+0x2a8>
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x2b8>
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e2:	e022      	b.n	800492a <UART_SetConfig+0x2e6>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ea:	e01e      	b.n	800492a <UART_SetConfig+0x2e6>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e01a      	b.n	800492a <UART_SetConfig+0x2e6>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e016      	b.n	800492a <UART_SetConfig+0x2e6>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e012      	b.n	800492a <UART_SetConfig+0x2e6>
 8004904:	efff69f3 	.word	0xefff69f3
 8004908:	40008000 	.word	0x40008000
 800490c:	40013800 	.word	0x40013800
 8004910:	40021000 	.word	0x40021000
 8004914:	40004400 	.word	0x40004400
 8004918:	40004800 	.word	0x40004800
 800491c:	40004c00 	.word	0x40004c00
 8004920:	40005000 	.word	0x40005000
 8004924:	2310      	movs	r3, #16
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a9f      	ldr	r2, [pc, #636]	; (8004bac <UART_SetConfig+0x568>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d17a      	bne.n	8004a2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004938:	2b08      	cmp	r3, #8
 800493a:	d824      	bhi.n	8004986 <UART_SetConfig+0x342>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x300>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004969 	.word	0x08004969
 8004948:	08004987 	.word	0x08004987
 800494c:	08004971 	.word	0x08004971
 8004950:	08004987 	.word	0x08004987
 8004954:	08004977 	.word	0x08004977
 8004958:	08004987 	.word	0x08004987
 800495c:	08004987 	.word	0x08004987
 8004960:	08004987 	.word	0x08004987
 8004964:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fd fe86 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 800496c:	61f8      	str	r0, [r7, #28]
        break;
 800496e:	e010      	b.n	8004992 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b8f      	ldr	r3, [pc, #572]	; (8004bb0 <UART_SetConfig+0x56c>)
 8004972:	61fb      	str	r3, [r7, #28]
        break;
 8004974:	e00d      	b.n	8004992 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fd fde7 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 800497a:	61f8      	str	r0, [r7, #28]
        break;
 800497c:	e009      	b.n	8004992 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	61fb      	str	r3, [r7, #28]
        break;
 8004984:	e005      	b.n	8004992 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80fb 	beq.w	8004b90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d305      	bcc.n	80049b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d903      	bls.n	80049be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049bc:	e0e8      	b.n	8004b90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2200      	movs	r2, #0
 80049c2:	461c      	mov	r4, r3
 80049c4:	4615      	mov	r5, r2
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	022b      	lsls	r3, r5, #8
 80049d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049d4:	0222      	lsls	r2, r4, #8
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	6849      	ldr	r1, [r1, #4]
 80049da:	0849      	lsrs	r1, r1, #1
 80049dc:	2000      	movs	r0, #0
 80049de:	4688      	mov	r8, r1
 80049e0:	4681      	mov	r9, r0
 80049e2:	eb12 0a08 	adds.w	sl, r2, r8
 80049e6:	eb43 0b09 	adc.w	fp, r3, r9
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f8:	4650      	mov	r0, sl
 80049fa:	4659      	mov	r1, fp
 80049fc:	f7fb fc50 	bl	80002a0 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d308      	bcc.n	8004a22 <UART_SetConfig+0x3de>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d204      	bcs.n	8004a22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	e0b6      	b.n	8004b90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a28:	e0b2      	b.n	8004b90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a32:	d15e      	bne.n	8004af2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d828      	bhi.n	8004a8e <UART_SetConfig+0x44a>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x400>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	08004a8f 	.word	0x08004a8f
 8004a54:	08004a7f 	.word	0x08004a7f
 8004a58:	08004a8f 	.word	0x08004a8f
 8004a5c:	08004a8f 	.word	0x08004a8f
 8004a60:	08004a8f 	.word	0x08004a8f
 8004a64:	08004a87 	.word	0x08004a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a68:	f7fd fe06 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8004a6c:	61f8      	str	r0, [r7, #28]
        break;
 8004a6e:	e014      	b.n	8004a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fd fe18 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8004a74:	61f8      	str	r0, [r7, #28]
        break;
 8004a76:	e010      	b.n	8004a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <UART_SetConfig+0x56c>)
 8004a7a:	61fb      	str	r3, [r7, #28]
        break;
 8004a7c:	e00d      	b.n	8004a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7e:	f7fd fd63 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8004a82:	61f8      	str	r0, [r7, #28]
        break;
 8004a84:	e009      	b.n	8004a9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	61fb      	str	r3, [r7, #28]
        break;
 8004a8c:	e005      	b.n	8004a9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d077      	beq.n	8004b90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	005a      	lsls	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	441a      	add	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b0f      	cmp	r3, #15
 8004aba:	d916      	bls.n	8004aea <UART_SetConfig+0x4a6>
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d212      	bcs.n	8004aea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f023 030f 	bic.w	r3, r3, #15
 8004acc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	8afb      	ldrh	r3, [r7, #22]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	8afa      	ldrh	r2, [r7, #22]
 8004ae6:	60da      	str	r2, [r3, #12]
 8004ae8:	e052      	b.n	8004b90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004af0:	e04e      	b.n	8004b90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d827      	bhi.n	8004b4a <UART_SetConfig+0x506>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x4bc>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b4b 	.word	0x08004b4b
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b4b 	.word	0x08004b4b
 8004b20:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fd fda8 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8004b28:	61f8      	str	r0, [r7, #28]
        break;
 8004b2a:	e014      	b.n	8004b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fd fdba 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8004b30:	61f8      	str	r0, [r7, #28]
        break;
 8004b32:	e010      	b.n	8004b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <UART_SetConfig+0x56c>)
 8004b36:	61fb      	str	r3, [r7, #28]
        break;
 8004b38:	e00d      	b.n	8004b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fd fd05 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8004b3e:	61f8      	str	r0, [r7, #28]
        break;
 8004b40:	e009      	b.n	8004b56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	61fb      	str	r3, [r7, #28]
        break;
 8004b48:	e005      	b.n	8004b56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b54:	bf00      	nop
    }

    if (pclk != 0U)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d019      	beq.n	8004b90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	085a      	lsrs	r2, r3, #1
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b0f      	cmp	r3, #15
 8004b74:	d909      	bls.n	8004b8a <UART_SetConfig+0x546>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d205      	bcs.n	8004b8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	e002      	b.n	8004b90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004baa:	bf00      	nop
 8004bac:	40008000 	.word	0x40008000
 8004bb0:	00f42400 	.word	0x00f42400

08004bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01a      	beq.n	8004cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb2:	d10a      	bne.n	8004cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d08:	f7fc fbce 	bl	80014a8 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d10e      	bne.n	8004d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f82d 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e023      	b.n	8004d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d10e      	bne.n	8004d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f817 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e00d      	b.n	8004d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b09c      	sub	sp, #112	; 0x70
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	e0a5      	b.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	f000 80a1 	beq.w	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fc fb7f 	bl	80014a8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8004db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13e      	bne.n	8004e3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	663b      	str	r3, [r7, #96]	; 0x60
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e067      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d04f      	beq.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e56:	d147      	bne.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e6      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eb4:	623a      	str	r2, [r7, #32]
 8004eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	69f9      	ldr	r1, [r7, #28]
 8004eba:	6a3a      	ldr	r2, [r7, #32]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e010      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	f43f af4a 	beq.w	8004d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3770      	adds	r7, #112	; 0x70
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <__errno>:
 8004f14:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <__errno+0x8>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	2000000c 	.word	0x2000000c

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4d0d      	ldr	r5, [pc, #52]	; (8004f58 <__libc_init_array+0x38>)
 8004f24:	4c0d      	ldr	r4, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	4d0b      	ldr	r5, [pc, #44]	; (8004f60 <__libc_init_array+0x40>)
 8004f32:	4c0c      	ldr	r4, [pc, #48]	; (8004f64 <__libc_init_array+0x44>)
 8004f34:	f001 fd26 	bl	8006984 <_init>
 8004f38:	1b64      	subs	r4, r4, r5
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08006c28 	.word	0x08006c28
 8004f5c:	08006c28 	.word	0x08006c28
 8004f60:	08006c28 	.word	0x08006c28
 8004f64:	08006c2c 	.word	0x08006c2c

08004f68 <memset>:
 8004f68:	4402      	add	r2, r0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <memset+0xa>
 8004f70:	4770      	bx	lr
 8004f72:	f803 1b01 	strb.w	r1, [r3], #1
 8004f76:	e7f9      	b.n	8004f6c <memset+0x4>

08004f78 <iprintf>:
 8004f78:	b40f      	push	{r0, r1, r2, r3}
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <iprintf+0x2c>)
 8004f7c:	b513      	push	{r0, r1, r4, lr}
 8004f7e:	681c      	ldr	r4, [r3, #0]
 8004f80:	b124      	cbz	r4, 8004f8c <iprintf+0x14>
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	b913      	cbnz	r3, 8004f8c <iprintf+0x14>
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 faf2 	bl	8005570 <__sinit>
 8004f8c:	ab05      	add	r3, sp, #20
 8004f8e:	9a04      	ldr	r2, [sp, #16]
 8004f90:	68a1      	ldr	r1, [r4, #8]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 fedf 	bl	8005d58 <_vfiprintf_r>
 8004f9a:	b002      	add	sp, #8
 8004f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa0:	b004      	add	sp, #16
 8004fa2:	4770      	bx	lr
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <_puts_r>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	460e      	mov	r6, r1
 8004fac:	4605      	mov	r5, r0
 8004fae:	b118      	cbz	r0, 8004fb8 <_puts_r+0x10>
 8004fb0:	6983      	ldr	r3, [r0, #24]
 8004fb2:	b90b      	cbnz	r3, 8004fb8 <_puts_r+0x10>
 8004fb4:	f000 fadc 	bl	8005570 <__sinit>
 8004fb8:	69ab      	ldr	r3, [r5, #24]
 8004fba:	68ac      	ldr	r4, [r5, #8]
 8004fbc:	b913      	cbnz	r3, 8004fc4 <_puts_r+0x1c>
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fad6 	bl	8005570 <__sinit>
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <_puts_r+0xd0>)
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	d120      	bne.n	800500c <_puts_r+0x64>
 8004fca:	686c      	ldr	r4, [r5, #4]
 8004fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fce:	07db      	lsls	r3, r3, #31
 8004fd0:	d405      	bmi.n	8004fde <_puts_r+0x36>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	0598      	lsls	r0, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_puts_r+0x36>
 8004fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fda:	f000 fb67 	bl	80056ac <__retarget_lock_acquire_recursive>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	0719      	lsls	r1, r3, #28
 8004fe2:	d51d      	bpl.n	8005020 <_puts_r+0x78>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	b1db      	cbz	r3, 8005020 <_puts_r+0x78>
 8004fe8:	3e01      	subs	r6, #1
 8004fea:	68a3      	ldr	r3, [r4, #8]
 8004fec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	60a3      	str	r3, [r4, #8]
 8004ff4:	bb39      	cbnz	r1, 8005046 <_puts_r+0x9e>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da38      	bge.n	800506c <_puts_r+0xc4>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	210a      	movs	r1, #10
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f8ba 	bl	8005178 <__swbuf_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d011      	beq.n	800502c <_puts_r+0x84>
 8005008:	250a      	movs	r5, #10
 800500a:	e011      	b.n	8005030 <_puts_r+0x88>
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <_puts_r+0xd4>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d101      	bne.n	8005016 <_puts_r+0x6e>
 8005012:	68ac      	ldr	r4, [r5, #8]
 8005014:	e7da      	b.n	8004fcc <_puts_r+0x24>
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <_puts_r+0xd8>)
 8005018:	429c      	cmp	r4, r3
 800501a:	bf08      	it	eq
 800501c:	68ec      	ldreq	r4, [r5, #12]
 800501e:	e7d5      	b.n	8004fcc <_puts_r+0x24>
 8005020:	4621      	mov	r1, r4
 8005022:	4628      	mov	r0, r5
 8005024:	f000 f90c 	bl	8005240 <__swsetup_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	d0dd      	beq.n	8004fe8 <_puts_r+0x40>
 800502c:	f04f 35ff 	mov.w	r5, #4294967295
 8005030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005032:	07da      	lsls	r2, r3, #31
 8005034:	d405      	bmi.n	8005042 <_puts_r+0x9a>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	059b      	lsls	r3, r3, #22
 800503a:	d402      	bmi.n	8005042 <_puts_r+0x9a>
 800503c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503e:	f000 fb36 	bl	80056ae <__retarget_lock_release_recursive>
 8005042:	4628      	mov	r0, r5
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	2b00      	cmp	r3, #0
 8005048:	da04      	bge.n	8005054 <_puts_r+0xac>
 800504a:	69a2      	ldr	r2, [r4, #24]
 800504c:	429a      	cmp	r2, r3
 800504e:	dc06      	bgt.n	800505e <_puts_r+0xb6>
 8005050:	290a      	cmp	r1, #10
 8005052:	d004      	beq.n	800505e <_puts_r+0xb6>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	6022      	str	r2, [r4, #0]
 800505a:	7019      	strb	r1, [r3, #0]
 800505c:	e7c5      	b.n	8004fea <_puts_r+0x42>
 800505e:	4622      	mov	r2, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 f889 	bl	8005178 <__swbuf_r>
 8005066:	3001      	adds	r0, #1
 8005068:	d1bf      	bne.n	8004fea <_puts_r+0x42>
 800506a:	e7df      	b.n	800502c <_puts_r+0x84>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	250a      	movs	r5, #10
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	701d      	strb	r5, [r3, #0]
 8005076:	e7db      	b.n	8005030 <_puts_r+0x88>
 8005078:	08006a90 	.word	0x08006a90
 800507c:	08006ab0 	.word	0x08006ab0
 8005080:	08006a70 	.word	0x08006a70

08005084 <puts>:
 8005084:	4b02      	ldr	r3, [pc, #8]	; (8005090 <puts+0xc>)
 8005086:	4601      	mov	r1, r0
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f7ff bf8d 	b.w	8004fa8 <_puts_r>
 800508e:	bf00      	nop
 8005090:	2000000c 	.word	0x2000000c

08005094 <siscanf>:
 8005094:	b40e      	push	{r1, r2, r3}
 8005096:	b510      	push	{r4, lr}
 8005098:	b09f      	sub	sp, #124	; 0x7c
 800509a:	ac21      	add	r4, sp, #132	; 0x84
 800509c:	f44f 7101 	mov.w	r1, #516	; 0x204
 80050a0:	f854 2b04 	ldr.w	r2, [r4], #4
 80050a4:	9201      	str	r2, [sp, #4]
 80050a6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80050aa:	9004      	str	r0, [sp, #16]
 80050ac:	9008      	str	r0, [sp, #32]
 80050ae:	f7fb f899 	bl	80001e4 <strlen>
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <siscanf+0x50>)
 80050b4:	9005      	str	r0, [sp, #20]
 80050b6:	9009      	str	r0, [sp, #36]	; 0x24
 80050b8:	930d      	str	r3, [sp, #52]	; 0x34
 80050ba:	480b      	ldr	r0, [pc, #44]	; (80050e8 <siscanf+0x54>)
 80050bc:	9a01      	ldr	r2, [sp, #4]
 80050be:	6800      	ldr	r0, [r0, #0]
 80050c0:	9403      	str	r4, [sp, #12]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9311      	str	r3, [sp, #68]	; 0x44
 80050c6:	9316      	str	r3, [sp, #88]	; 0x58
 80050c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80050d0:	a904      	add	r1, sp, #16
 80050d2:	4623      	mov	r3, r4
 80050d4:	f000 fc9e 	bl	8005a14 <__ssvfiscanf_r>
 80050d8:	b01f      	add	sp, #124	; 0x7c
 80050da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050de:	b003      	add	sp, #12
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	2000000c 	.word	0x2000000c

080050ec <__sread>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	460c      	mov	r4, r1
 80050f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f4:	f001 fa46 	bl	8006584 <_read_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	bfab      	itete	ge
 80050fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005100:	181b      	addge	r3, r3, r0
 8005102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005106:	bfac      	ite	ge
 8005108:	6563      	strge	r3, [r4, #84]	; 0x54
 800510a:	81a3      	strhlt	r3, [r4, #12]
 800510c:	bd10      	pop	{r4, pc}

0800510e <__seofread>:
 800510e:	2000      	movs	r0, #0
 8005110:	4770      	bx	lr

08005112 <__swrite>:
 8005112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005116:	461f      	mov	r7, r3
 8005118:	898b      	ldrh	r3, [r1, #12]
 800511a:	05db      	lsls	r3, r3, #23
 800511c:	4605      	mov	r5, r0
 800511e:	460c      	mov	r4, r1
 8005120:	4616      	mov	r6, r2
 8005122:	d505      	bpl.n	8005130 <__swrite+0x1e>
 8005124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005128:	2302      	movs	r3, #2
 800512a:	2200      	movs	r2, #0
 800512c:	f000 fac0 	bl	80056b0 <_lseek_r>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	4632      	mov	r2, r6
 800513e:	463b      	mov	r3, r7
 8005140:	4628      	mov	r0, r5
 8005142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005146:	f000 b869 	b.w	800521c <_write_r>

0800514a <__sseek>:
 800514a:	b510      	push	{r4, lr}
 800514c:	460c      	mov	r4, r1
 800514e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005152:	f000 faad 	bl	80056b0 <_lseek_r>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	bf15      	itete	ne
 800515c:	6560      	strne	r0, [r4, #84]	; 0x54
 800515e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005166:	81a3      	strheq	r3, [r4, #12]
 8005168:	bf18      	it	ne
 800516a:	81a3      	strhne	r3, [r4, #12]
 800516c:	bd10      	pop	{r4, pc}

0800516e <__sclose>:
 800516e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005172:	f000 b8d3 	b.w	800531c <_close_r>
	...

08005178 <__swbuf_r>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	460e      	mov	r6, r1
 800517c:	4614      	mov	r4, r2
 800517e:	4605      	mov	r5, r0
 8005180:	b118      	cbz	r0, 800518a <__swbuf_r+0x12>
 8005182:	6983      	ldr	r3, [r0, #24]
 8005184:	b90b      	cbnz	r3, 800518a <__swbuf_r+0x12>
 8005186:	f000 f9f3 	bl	8005570 <__sinit>
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <__swbuf_r+0x98>)
 800518c:	429c      	cmp	r4, r3
 800518e:	d12b      	bne.n	80051e8 <__swbuf_r+0x70>
 8005190:	686c      	ldr	r4, [r5, #4]
 8005192:	69a3      	ldr	r3, [r4, #24]
 8005194:	60a3      	str	r3, [r4, #8]
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	071a      	lsls	r2, r3, #28
 800519a:	d52f      	bpl.n	80051fc <__swbuf_r+0x84>
 800519c:	6923      	ldr	r3, [r4, #16]
 800519e:	b36b      	cbz	r3, 80051fc <__swbuf_r+0x84>
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	6820      	ldr	r0, [r4, #0]
 80051a4:	1ac0      	subs	r0, r0, r3
 80051a6:	6963      	ldr	r3, [r4, #20]
 80051a8:	b2f6      	uxtb	r6, r6
 80051aa:	4283      	cmp	r3, r0
 80051ac:	4637      	mov	r7, r6
 80051ae:	dc04      	bgt.n	80051ba <__swbuf_r+0x42>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f948 	bl	8005448 <_fflush_r>
 80051b8:	bb30      	cbnz	r0, 8005208 <__swbuf_r+0x90>
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	3b01      	subs	r3, #1
 80051be:	60a3      	str	r3, [r4, #8]
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	701e      	strb	r6, [r3, #0]
 80051c8:	6963      	ldr	r3, [r4, #20]
 80051ca:	3001      	adds	r0, #1
 80051cc:	4283      	cmp	r3, r0
 80051ce:	d004      	beq.n	80051da <__swbuf_r+0x62>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	07db      	lsls	r3, r3, #31
 80051d4:	d506      	bpl.n	80051e4 <__swbuf_r+0x6c>
 80051d6:	2e0a      	cmp	r6, #10
 80051d8:	d104      	bne.n	80051e4 <__swbuf_r+0x6c>
 80051da:	4621      	mov	r1, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 f933 	bl	8005448 <_fflush_r>
 80051e2:	b988      	cbnz	r0, 8005208 <__swbuf_r+0x90>
 80051e4:	4638      	mov	r0, r7
 80051e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <__swbuf_r+0x9c>)
 80051ea:	429c      	cmp	r4, r3
 80051ec:	d101      	bne.n	80051f2 <__swbuf_r+0x7a>
 80051ee:	68ac      	ldr	r4, [r5, #8]
 80051f0:	e7cf      	b.n	8005192 <__swbuf_r+0x1a>
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <__swbuf_r+0xa0>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	bf08      	it	eq
 80051f8:	68ec      	ldreq	r4, [r5, #12]
 80051fa:	e7ca      	b.n	8005192 <__swbuf_r+0x1a>
 80051fc:	4621      	mov	r1, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 f81e 	bl	8005240 <__swsetup_r>
 8005204:	2800      	cmp	r0, #0
 8005206:	d0cb      	beq.n	80051a0 <__swbuf_r+0x28>
 8005208:	f04f 37ff 	mov.w	r7, #4294967295
 800520c:	e7ea      	b.n	80051e4 <__swbuf_r+0x6c>
 800520e:	bf00      	nop
 8005210:	08006a90 	.word	0x08006a90
 8005214:	08006ab0 	.word	0x08006ab0
 8005218:	08006a70 	.word	0x08006a70

0800521c <_write_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d07      	ldr	r5, [pc, #28]	; (800523c <_write_r+0x20>)
 8005220:	4604      	mov	r4, r0
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	2200      	movs	r2, #0
 8005228:	602a      	str	r2, [r5, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f7fb fd06 	bl	8000c3c <_write>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_write_r+0x1e>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_write_r+0x1e>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	200002cc 	.word	0x200002cc

08005240 <__swsetup_r>:
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <__swsetup_r+0xcc>)
 8005242:	b570      	push	{r4, r5, r6, lr}
 8005244:	681d      	ldr	r5, [r3, #0]
 8005246:	4606      	mov	r6, r0
 8005248:	460c      	mov	r4, r1
 800524a:	b125      	cbz	r5, 8005256 <__swsetup_r+0x16>
 800524c:	69ab      	ldr	r3, [r5, #24]
 800524e:	b913      	cbnz	r3, 8005256 <__swsetup_r+0x16>
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f98d 	bl	8005570 <__sinit>
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <__swsetup_r+0xd0>)
 8005258:	429c      	cmp	r4, r3
 800525a:	d10f      	bne.n	800527c <__swsetup_r+0x3c>
 800525c:	686c      	ldr	r4, [r5, #4]
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005264:	0719      	lsls	r1, r3, #28
 8005266:	d42c      	bmi.n	80052c2 <__swsetup_r+0x82>
 8005268:	06dd      	lsls	r5, r3, #27
 800526a:	d411      	bmi.n	8005290 <__swsetup_r+0x50>
 800526c:	2309      	movs	r3, #9
 800526e:	6033      	str	r3, [r6, #0]
 8005270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	e03e      	b.n	80052fa <__swsetup_r+0xba>
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <__swsetup_r+0xd4>)
 800527e:	429c      	cmp	r4, r3
 8005280:	d101      	bne.n	8005286 <__swsetup_r+0x46>
 8005282:	68ac      	ldr	r4, [r5, #8]
 8005284:	e7eb      	b.n	800525e <__swsetup_r+0x1e>
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <__swsetup_r+0xd8>)
 8005288:	429c      	cmp	r4, r3
 800528a:	bf08      	it	eq
 800528c:	68ec      	ldreq	r4, [r5, #12]
 800528e:	e7e6      	b.n	800525e <__swsetup_r+0x1e>
 8005290:	0758      	lsls	r0, r3, #29
 8005292:	d512      	bpl.n	80052ba <__swsetup_r+0x7a>
 8005294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005296:	b141      	cbz	r1, 80052aa <__swsetup_r+0x6a>
 8005298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800529c:	4299      	cmp	r1, r3
 800529e:	d002      	beq.n	80052a6 <__swsetup_r+0x66>
 80052a0:	4630      	mov	r0, r6
 80052a2:	f000 fa7d 	bl	80057a0 <_free_r>
 80052a6:	2300      	movs	r3, #0
 80052a8:	6363      	str	r3, [r4, #52]	; 0x34
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6063      	str	r3, [r4, #4]
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	81a3      	strh	r3, [r4, #12]
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	b94b      	cbnz	r3, 80052da <__swsetup_r+0x9a>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d003      	beq.n	80052da <__swsetup_r+0x9a>
 80052d2:	4621      	mov	r1, r4
 80052d4:	4630      	mov	r0, r6
 80052d6:	f000 fa23 	bl	8005720 <__smakebuf_r>
 80052da:	89a0      	ldrh	r0, [r4, #12]
 80052dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052e0:	f010 0301 	ands.w	r3, r0, #1
 80052e4:	d00a      	beq.n	80052fc <__swsetup_r+0xbc>
 80052e6:	2300      	movs	r3, #0
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	6963      	ldr	r3, [r4, #20]
 80052ec:	425b      	negs	r3, r3
 80052ee:	61a3      	str	r3, [r4, #24]
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	b943      	cbnz	r3, 8005306 <__swsetup_r+0xc6>
 80052f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052f8:	d1ba      	bne.n	8005270 <__swsetup_r+0x30>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	0781      	lsls	r1, r0, #30
 80052fe:	bf58      	it	pl
 8005300:	6963      	ldrpl	r3, [r4, #20]
 8005302:	60a3      	str	r3, [r4, #8]
 8005304:	e7f4      	b.n	80052f0 <__swsetup_r+0xb0>
 8005306:	2000      	movs	r0, #0
 8005308:	e7f7      	b.n	80052fa <__swsetup_r+0xba>
 800530a:	bf00      	nop
 800530c:	2000000c 	.word	0x2000000c
 8005310:	08006a90 	.word	0x08006a90
 8005314:	08006ab0 	.word	0x08006ab0
 8005318:	08006a70 	.word	0x08006a70

0800531c <_close_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d06      	ldr	r5, [pc, #24]	; (8005338 <_close_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fb ffa7 	bl	800127a <_close>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_close_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_close_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200002cc 	.word	0x200002cc

0800533c <__sflush_r>:
 800533c:	898a      	ldrh	r2, [r1, #12]
 800533e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005342:	4605      	mov	r5, r0
 8005344:	0710      	lsls	r0, r2, #28
 8005346:	460c      	mov	r4, r1
 8005348:	d458      	bmi.n	80053fc <__sflush_r+0xc0>
 800534a:	684b      	ldr	r3, [r1, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	dc05      	bgt.n	800535c <__sflush_r+0x20>
 8005350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	dc02      	bgt.n	800535c <__sflush_r+0x20>
 8005356:	2000      	movs	r0, #0
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800535e:	2e00      	cmp	r6, #0
 8005360:	d0f9      	beq.n	8005356 <__sflush_r+0x1a>
 8005362:	2300      	movs	r3, #0
 8005364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005368:	682f      	ldr	r7, [r5, #0]
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	d032      	beq.n	80053d4 <__sflush_r+0x98>
 800536e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	075a      	lsls	r2, r3, #29
 8005374:	d505      	bpl.n	8005382 <__sflush_r+0x46>
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	1ac0      	subs	r0, r0, r3
 800537a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800537c:	b10b      	cbz	r3, 8005382 <__sflush_r+0x46>
 800537e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005380:	1ac0      	subs	r0, r0, r3
 8005382:	2300      	movs	r3, #0
 8005384:	4602      	mov	r2, r0
 8005386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005388:	6a21      	ldr	r1, [r4, #32]
 800538a:	4628      	mov	r0, r5
 800538c:	47b0      	blx	r6
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	d106      	bne.n	80053a2 <__sflush_r+0x66>
 8005394:	6829      	ldr	r1, [r5, #0]
 8005396:	291d      	cmp	r1, #29
 8005398:	d82c      	bhi.n	80053f4 <__sflush_r+0xb8>
 800539a:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <__sflush_r+0x108>)
 800539c:	40ca      	lsrs	r2, r1
 800539e:	07d6      	lsls	r6, r2, #31
 80053a0:	d528      	bpl.n	80053f4 <__sflush_r+0xb8>
 80053a2:	2200      	movs	r2, #0
 80053a4:	6062      	str	r2, [r4, #4]
 80053a6:	04d9      	lsls	r1, r3, #19
 80053a8:	6922      	ldr	r2, [r4, #16]
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	d504      	bpl.n	80053b8 <__sflush_r+0x7c>
 80053ae:	1c42      	adds	r2, r0, #1
 80053b0:	d101      	bne.n	80053b6 <__sflush_r+0x7a>
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	b903      	cbnz	r3, 80053b8 <__sflush_r+0x7c>
 80053b6:	6560      	str	r0, [r4, #84]	; 0x54
 80053b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ba:	602f      	str	r7, [r5, #0]
 80053bc:	2900      	cmp	r1, #0
 80053be:	d0ca      	beq.n	8005356 <__sflush_r+0x1a>
 80053c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d002      	beq.n	80053ce <__sflush_r+0x92>
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 f9e9 	bl	80057a0 <_free_r>
 80053ce:	2000      	movs	r0, #0
 80053d0:	6360      	str	r0, [r4, #52]	; 0x34
 80053d2:	e7c1      	b.n	8005358 <__sflush_r+0x1c>
 80053d4:	6a21      	ldr	r1, [r4, #32]
 80053d6:	2301      	movs	r3, #1
 80053d8:	4628      	mov	r0, r5
 80053da:	47b0      	blx	r6
 80053dc:	1c41      	adds	r1, r0, #1
 80053de:	d1c7      	bne.n	8005370 <__sflush_r+0x34>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c4      	beq.n	8005370 <__sflush_r+0x34>
 80053e6:	2b1d      	cmp	r3, #29
 80053e8:	d001      	beq.n	80053ee <__sflush_r+0xb2>
 80053ea:	2b16      	cmp	r3, #22
 80053ec:	d101      	bne.n	80053f2 <__sflush_r+0xb6>
 80053ee:	602f      	str	r7, [r5, #0]
 80053f0:	e7b1      	b.n	8005356 <__sflush_r+0x1a>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	e7ad      	b.n	8005358 <__sflush_r+0x1c>
 80053fc:	690f      	ldr	r7, [r1, #16]
 80053fe:	2f00      	cmp	r7, #0
 8005400:	d0a9      	beq.n	8005356 <__sflush_r+0x1a>
 8005402:	0793      	lsls	r3, r2, #30
 8005404:	680e      	ldr	r6, [r1, #0]
 8005406:	bf08      	it	eq
 8005408:	694b      	ldreq	r3, [r1, #20]
 800540a:	600f      	str	r7, [r1, #0]
 800540c:	bf18      	it	ne
 800540e:	2300      	movne	r3, #0
 8005410:	eba6 0807 	sub.w	r8, r6, r7
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	f1b8 0f00 	cmp.w	r8, #0
 800541a:	dd9c      	ble.n	8005356 <__sflush_r+0x1a>
 800541c:	6a21      	ldr	r1, [r4, #32]
 800541e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005420:	4643      	mov	r3, r8
 8005422:	463a      	mov	r2, r7
 8005424:	4628      	mov	r0, r5
 8005426:	47b0      	blx	r6
 8005428:	2800      	cmp	r0, #0
 800542a:	dc06      	bgt.n	800543a <__sflush_r+0xfe>
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	e78e      	b.n	8005358 <__sflush_r+0x1c>
 800543a:	4407      	add	r7, r0
 800543c:	eba8 0800 	sub.w	r8, r8, r0
 8005440:	e7e9      	b.n	8005416 <__sflush_r+0xda>
 8005442:	bf00      	nop
 8005444:	20400001 	.word	0x20400001

08005448 <_fflush_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	690b      	ldr	r3, [r1, #16]
 800544c:	4605      	mov	r5, r0
 800544e:	460c      	mov	r4, r1
 8005450:	b913      	cbnz	r3, 8005458 <_fflush_r+0x10>
 8005452:	2500      	movs	r5, #0
 8005454:	4628      	mov	r0, r5
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	b118      	cbz	r0, 8005462 <_fflush_r+0x1a>
 800545a:	6983      	ldr	r3, [r0, #24]
 800545c:	b90b      	cbnz	r3, 8005462 <_fflush_r+0x1a>
 800545e:	f000 f887 	bl	8005570 <__sinit>
 8005462:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <_fflush_r+0x6c>)
 8005464:	429c      	cmp	r4, r3
 8005466:	d11b      	bne.n	80054a0 <_fflush_r+0x58>
 8005468:	686c      	ldr	r4, [r5, #4]
 800546a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0ef      	beq.n	8005452 <_fflush_r+0xa>
 8005472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005474:	07d0      	lsls	r0, r2, #31
 8005476:	d404      	bmi.n	8005482 <_fflush_r+0x3a>
 8005478:	0599      	lsls	r1, r3, #22
 800547a:	d402      	bmi.n	8005482 <_fflush_r+0x3a>
 800547c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547e:	f000 f915 	bl	80056ac <__retarget_lock_acquire_recursive>
 8005482:	4628      	mov	r0, r5
 8005484:	4621      	mov	r1, r4
 8005486:	f7ff ff59 	bl	800533c <__sflush_r>
 800548a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800548c:	07da      	lsls	r2, r3, #31
 800548e:	4605      	mov	r5, r0
 8005490:	d4e0      	bmi.n	8005454 <_fflush_r+0xc>
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	059b      	lsls	r3, r3, #22
 8005496:	d4dd      	bmi.n	8005454 <_fflush_r+0xc>
 8005498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549a:	f000 f908 	bl	80056ae <__retarget_lock_release_recursive>
 800549e:	e7d9      	b.n	8005454 <_fflush_r+0xc>
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <_fflush_r+0x70>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d101      	bne.n	80054aa <_fflush_r+0x62>
 80054a6:	68ac      	ldr	r4, [r5, #8]
 80054a8:	e7df      	b.n	800546a <_fflush_r+0x22>
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <_fflush_r+0x74>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	bf08      	it	eq
 80054b0:	68ec      	ldreq	r4, [r5, #12]
 80054b2:	e7da      	b.n	800546a <_fflush_r+0x22>
 80054b4:	08006a90 	.word	0x08006a90
 80054b8:	08006ab0 	.word	0x08006ab0
 80054bc:	08006a70 	.word	0x08006a70

080054c0 <std>:
 80054c0:	2300      	movs	r3, #0
 80054c2:	b510      	push	{r4, lr}
 80054c4:	4604      	mov	r4, r0
 80054c6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ce:	6083      	str	r3, [r0, #8]
 80054d0:	8181      	strh	r1, [r0, #12]
 80054d2:	6643      	str	r3, [r0, #100]	; 0x64
 80054d4:	81c2      	strh	r2, [r0, #14]
 80054d6:	6183      	str	r3, [r0, #24]
 80054d8:	4619      	mov	r1, r3
 80054da:	2208      	movs	r2, #8
 80054dc:	305c      	adds	r0, #92	; 0x5c
 80054de:	f7ff fd43 	bl	8004f68 <memset>
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <std+0x38>)
 80054e4:	6263      	str	r3, [r4, #36]	; 0x24
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <std+0x3c>)
 80054e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <std+0x40>)
 80054ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <std+0x44>)
 80054f0:	6224      	str	r4, [r4, #32]
 80054f2:	6323      	str	r3, [r4, #48]	; 0x30
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	bf00      	nop
 80054f8:	080050ed 	.word	0x080050ed
 80054fc:	08005113 	.word	0x08005113
 8005500:	0800514b 	.word	0x0800514b
 8005504:	0800516f 	.word	0x0800516f

08005508 <_cleanup_r>:
 8005508:	4901      	ldr	r1, [pc, #4]	; (8005510 <_cleanup_r+0x8>)
 800550a:	f000 b8af 	b.w	800566c <_fwalk_reent>
 800550e:	bf00      	nop
 8005510:	08005449 	.word	0x08005449

08005514 <__sfmoreglue>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	2268      	movs	r2, #104	; 0x68
 8005518:	1e4d      	subs	r5, r1, #1
 800551a:	4355      	muls	r5, r2
 800551c:	460e      	mov	r6, r1
 800551e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005522:	f000 f9a9 	bl	8005878 <_malloc_r>
 8005526:	4604      	mov	r4, r0
 8005528:	b140      	cbz	r0, 800553c <__sfmoreglue+0x28>
 800552a:	2100      	movs	r1, #0
 800552c:	e9c0 1600 	strd	r1, r6, [r0]
 8005530:	300c      	adds	r0, #12
 8005532:	60a0      	str	r0, [r4, #8]
 8005534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005538:	f7ff fd16 	bl	8004f68 <memset>
 800553c:	4620      	mov	r0, r4
 800553e:	bd70      	pop	{r4, r5, r6, pc}

08005540 <__sfp_lock_acquire>:
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <__sfp_lock_acquire+0x8>)
 8005542:	f000 b8b3 	b.w	80056ac <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	200002c1 	.word	0x200002c1

0800554c <__sfp_lock_release>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__sfp_lock_release+0x8>)
 800554e:	f000 b8ae 	b.w	80056ae <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	200002c1 	.word	0x200002c1

08005558 <__sinit_lock_acquire>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__sinit_lock_acquire+0x8>)
 800555a:	f000 b8a7 	b.w	80056ac <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	200002c2 	.word	0x200002c2

08005564 <__sinit_lock_release>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__sinit_lock_release+0x8>)
 8005566:	f000 b8a2 	b.w	80056ae <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	200002c2 	.word	0x200002c2

08005570 <__sinit>:
 8005570:	b510      	push	{r4, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	f7ff fff0 	bl	8005558 <__sinit_lock_acquire>
 8005578:	69a3      	ldr	r3, [r4, #24]
 800557a:	b11b      	cbz	r3, 8005584 <__sinit+0x14>
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	f7ff bff0 	b.w	8005564 <__sinit_lock_release>
 8005584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005588:	6523      	str	r3, [r4, #80]	; 0x50
 800558a:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <__sinit+0x68>)
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <__sinit+0x6c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	62a2      	str	r2, [r4, #40]	; 0x28
 8005592:	42a3      	cmp	r3, r4
 8005594:	bf04      	itt	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	61a3      	streq	r3, [r4, #24]
 800559a:	4620      	mov	r0, r4
 800559c:	f000 f820 	bl	80055e0 <__sfp>
 80055a0:	6060      	str	r0, [r4, #4]
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f81c 	bl	80055e0 <__sfp>
 80055a8:	60a0      	str	r0, [r4, #8]
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 f818 	bl	80055e0 <__sfp>
 80055b0:	2200      	movs	r2, #0
 80055b2:	60e0      	str	r0, [r4, #12]
 80055b4:	2104      	movs	r1, #4
 80055b6:	6860      	ldr	r0, [r4, #4]
 80055b8:	f7ff ff82 	bl	80054c0 <std>
 80055bc:	68a0      	ldr	r0, [r4, #8]
 80055be:	2201      	movs	r2, #1
 80055c0:	2109      	movs	r1, #9
 80055c2:	f7ff ff7d 	bl	80054c0 <std>
 80055c6:	68e0      	ldr	r0, [r4, #12]
 80055c8:	2202      	movs	r2, #2
 80055ca:	2112      	movs	r1, #18
 80055cc:	f7ff ff78 	bl	80054c0 <std>
 80055d0:	2301      	movs	r3, #1
 80055d2:	61a3      	str	r3, [r4, #24]
 80055d4:	e7d2      	b.n	800557c <__sinit+0xc>
 80055d6:	bf00      	nop
 80055d8:	08006a6c 	.word	0x08006a6c
 80055dc:	08005509 	.word	0x08005509

080055e0 <__sfp>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	4607      	mov	r7, r0
 80055e4:	f7ff ffac 	bl	8005540 <__sfp_lock_acquire>
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <__sfp+0x84>)
 80055ea:	681e      	ldr	r6, [r3, #0]
 80055ec:	69b3      	ldr	r3, [r6, #24]
 80055ee:	b913      	cbnz	r3, 80055f6 <__sfp+0x16>
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7ff ffbd 	bl	8005570 <__sinit>
 80055f6:	3648      	adds	r6, #72	; 0x48
 80055f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	d503      	bpl.n	8005608 <__sfp+0x28>
 8005600:	6833      	ldr	r3, [r6, #0]
 8005602:	b30b      	cbz	r3, 8005648 <__sfp+0x68>
 8005604:	6836      	ldr	r6, [r6, #0]
 8005606:	e7f7      	b.n	80055f8 <__sfp+0x18>
 8005608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800560c:	b9d5      	cbnz	r5, 8005644 <__sfp+0x64>
 800560e:	4b16      	ldr	r3, [pc, #88]	; (8005668 <__sfp+0x88>)
 8005610:	60e3      	str	r3, [r4, #12]
 8005612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005616:	6665      	str	r5, [r4, #100]	; 0x64
 8005618:	f000 f847 	bl	80056aa <__retarget_lock_init_recursive>
 800561c:	f7ff ff96 	bl	800554c <__sfp_lock_release>
 8005620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005628:	6025      	str	r5, [r4, #0]
 800562a:	61a5      	str	r5, [r4, #24]
 800562c:	2208      	movs	r2, #8
 800562e:	4629      	mov	r1, r5
 8005630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005634:	f7ff fc98 	bl	8004f68 <memset>
 8005638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800563c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005640:	4620      	mov	r0, r4
 8005642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005644:	3468      	adds	r4, #104	; 0x68
 8005646:	e7d9      	b.n	80055fc <__sfp+0x1c>
 8005648:	2104      	movs	r1, #4
 800564a:	4638      	mov	r0, r7
 800564c:	f7ff ff62 	bl	8005514 <__sfmoreglue>
 8005650:	4604      	mov	r4, r0
 8005652:	6030      	str	r0, [r6, #0]
 8005654:	2800      	cmp	r0, #0
 8005656:	d1d5      	bne.n	8005604 <__sfp+0x24>
 8005658:	f7ff ff78 	bl	800554c <__sfp_lock_release>
 800565c:	230c      	movs	r3, #12
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	e7ee      	b.n	8005640 <__sfp+0x60>
 8005662:	bf00      	nop
 8005664:	08006a6c 	.word	0x08006a6c
 8005668:	ffff0001 	.word	0xffff0001

0800566c <_fwalk_reent>:
 800566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005670:	4606      	mov	r6, r0
 8005672:	4688      	mov	r8, r1
 8005674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005678:	2700      	movs	r7, #0
 800567a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800567e:	f1b9 0901 	subs.w	r9, r9, #1
 8005682:	d505      	bpl.n	8005690 <_fwalk_reent+0x24>
 8005684:	6824      	ldr	r4, [r4, #0]
 8005686:	2c00      	cmp	r4, #0
 8005688:	d1f7      	bne.n	800567a <_fwalk_reent+0xe>
 800568a:	4638      	mov	r0, r7
 800568c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005690:	89ab      	ldrh	r3, [r5, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d907      	bls.n	80056a6 <_fwalk_reent+0x3a>
 8005696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569a:	3301      	adds	r3, #1
 800569c:	d003      	beq.n	80056a6 <_fwalk_reent+0x3a>
 800569e:	4629      	mov	r1, r5
 80056a0:	4630      	mov	r0, r6
 80056a2:	47c0      	blx	r8
 80056a4:	4307      	orrs	r7, r0
 80056a6:	3568      	adds	r5, #104	; 0x68
 80056a8:	e7e9      	b.n	800567e <_fwalk_reent+0x12>

080056aa <__retarget_lock_init_recursive>:
 80056aa:	4770      	bx	lr

080056ac <__retarget_lock_acquire_recursive>:
 80056ac:	4770      	bx	lr

080056ae <__retarget_lock_release_recursive>:
 80056ae:	4770      	bx	lr

080056b0 <_lseek_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	; (80056d0 <_lseek_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fb fe02 	bl	80012c8 <_lseek>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_lseek_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_lseek_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200002cc 	.word	0x200002cc

080056d4 <__swhatbuf_r>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	460e      	mov	r6, r1
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	2900      	cmp	r1, #0
 80056de:	b096      	sub	sp, #88	; 0x58
 80056e0:	4614      	mov	r4, r2
 80056e2:	461d      	mov	r5, r3
 80056e4:	da08      	bge.n	80056f8 <__swhatbuf_r+0x24>
 80056e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	061a      	lsls	r2, r3, #24
 80056f0:	d410      	bmi.n	8005714 <__swhatbuf_r+0x40>
 80056f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f6:	e00e      	b.n	8005716 <__swhatbuf_r+0x42>
 80056f8:	466a      	mov	r2, sp
 80056fa:	f001 f8cf 	bl	800689c <_fstat_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	dbf1      	blt.n	80056e6 <__swhatbuf_r+0x12>
 8005702:	9a01      	ldr	r2, [sp, #4]
 8005704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800570c:	425a      	negs	r2, r3
 800570e:	415a      	adcs	r2, r3
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	e7ee      	b.n	80056f2 <__swhatbuf_r+0x1e>
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	2000      	movs	r0, #0
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	b016      	add	sp, #88	; 0x58
 800571c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005720 <__smakebuf_r>:
 8005720:	898b      	ldrh	r3, [r1, #12]
 8005722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005724:	079d      	lsls	r5, r3, #30
 8005726:	4606      	mov	r6, r0
 8005728:	460c      	mov	r4, r1
 800572a:	d507      	bpl.n	800573c <__smakebuf_r+0x1c>
 800572c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	2301      	movs	r3, #1
 8005736:	6163      	str	r3, [r4, #20]
 8005738:	b002      	add	sp, #8
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	ab01      	add	r3, sp, #4
 800573e:	466a      	mov	r2, sp
 8005740:	f7ff ffc8 	bl	80056d4 <__swhatbuf_r>
 8005744:	9900      	ldr	r1, [sp, #0]
 8005746:	4605      	mov	r5, r0
 8005748:	4630      	mov	r0, r6
 800574a:	f000 f895 	bl	8005878 <_malloc_r>
 800574e:	b948      	cbnz	r0, 8005764 <__smakebuf_r+0x44>
 8005750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005754:	059a      	lsls	r2, r3, #22
 8005756:	d4ef      	bmi.n	8005738 <__smakebuf_r+0x18>
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	e7e3      	b.n	800572c <__smakebuf_r+0xc>
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <__smakebuf_r+0x7c>)
 8005766:	62b3      	str	r3, [r6, #40]	; 0x28
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	6163      	str	r3, [r4, #20]
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	6120      	str	r0, [r4, #16]
 800577a:	b15b      	cbz	r3, 8005794 <__smakebuf_r+0x74>
 800577c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005780:	4630      	mov	r0, r6
 8005782:	f001 f89d 	bl	80068c0 <_isatty_r>
 8005786:	b128      	cbz	r0, 8005794 <__smakebuf_r+0x74>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	89a0      	ldrh	r0, [r4, #12]
 8005796:	4305      	orrs	r5, r0
 8005798:	81a5      	strh	r5, [r4, #12]
 800579a:	e7cd      	b.n	8005738 <__smakebuf_r+0x18>
 800579c:	08005509 	.word	0x08005509

080057a0 <_free_r>:
 80057a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d044      	beq.n	8005830 <_free_r+0x90>
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	9001      	str	r0, [sp, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f1a1 0404 	sub.w	r4, r1, #4
 80057b2:	bfb8      	it	lt
 80057b4:	18e4      	addlt	r4, r4, r3
 80057b6:	f001 f8a1 	bl	80068fc <__malloc_lock>
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <_free_r+0x94>)
 80057bc:	9801      	ldr	r0, [sp, #4]
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	b933      	cbnz	r3, 80057d0 <_free_r+0x30>
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	6014      	str	r4, [r2, #0]
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057cc:	f001 b89c 	b.w	8006908 <__malloc_unlock>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d908      	bls.n	80057e6 <_free_r+0x46>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf01      	itttt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	1949      	addeq	r1, r1, r5
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	e7ed      	b.n	80057c2 <_free_r+0x22>
 80057e6:	461a      	mov	r2, r3
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b10b      	cbz	r3, 80057f0 <_free_r+0x50>
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d9fa      	bls.n	80057e6 <_free_r+0x46>
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	1855      	adds	r5, r2, r1
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d10b      	bne.n	8005810 <_free_r+0x70>
 80057f8:	6824      	ldr	r4, [r4, #0]
 80057fa:	4421      	add	r1, r4
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	42a3      	cmp	r3, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	d1e0      	bne.n	80057c6 <_free_r+0x26>
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	4421      	add	r1, r4
 800580c:	6011      	str	r1, [r2, #0]
 800580e:	e7da      	b.n	80057c6 <_free_r+0x26>
 8005810:	d902      	bls.n	8005818 <_free_r+0x78>
 8005812:	230c      	movs	r3, #12
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	e7d6      	b.n	80057c6 <_free_r+0x26>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf04      	itt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	bf04      	itt	eq
 8005828:	1949      	addeq	r1, r1, r5
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	6054      	str	r4, [r2, #4]
 800582e:	e7ca      	b.n	80057c6 <_free_r+0x26>
 8005830:	b003      	add	sp, #12
 8005832:	bd30      	pop	{r4, r5, pc}
 8005834:	200002c4 	.word	0x200002c4

08005838 <sbrk_aligned>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4e0e      	ldr	r6, [pc, #56]	; (8005874 <sbrk_aligned+0x3c>)
 800583c:	460c      	mov	r4, r1
 800583e:	6831      	ldr	r1, [r6, #0]
 8005840:	4605      	mov	r5, r0
 8005842:	b911      	cbnz	r1, 800584a <sbrk_aligned+0x12>
 8005844:	f000 feb0 	bl	80065a8 <_sbrk_r>
 8005848:	6030      	str	r0, [r6, #0]
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 feab 	bl	80065a8 <_sbrk_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d00a      	beq.n	800586c <sbrk_aligned+0x34>
 8005856:	1cc4      	adds	r4, r0, #3
 8005858:	f024 0403 	bic.w	r4, r4, #3
 800585c:	42a0      	cmp	r0, r4
 800585e:	d007      	beq.n	8005870 <sbrk_aligned+0x38>
 8005860:	1a21      	subs	r1, r4, r0
 8005862:	4628      	mov	r0, r5
 8005864:	f000 fea0 	bl	80065a8 <_sbrk_r>
 8005868:	3001      	adds	r0, #1
 800586a:	d101      	bne.n	8005870 <sbrk_aligned+0x38>
 800586c:	f04f 34ff 	mov.w	r4, #4294967295
 8005870:	4620      	mov	r0, r4
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	200002c8 	.word	0x200002c8

08005878 <_malloc_r>:
 8005878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587c:	1ccd      	adds	r5, r1, #3
 800587e:	f025 0503 	bic.w	r5, r5, #3
 8005882:	3508      	adds	r5, #8
 8005884:	2d0c      	cmp	r5, #12
 8005886:	bf38      	it	cc
 8005888:	250c      	movcc	r5, #12
 800588a:	2d00      	cmp	r5, #0
 800588c:	4607      	mov	r7, r0
 800588e:	db01      	blt.n	8005894 <_malloc_r+0x1c>
 8005890:	42a9      	cmp	r1, r5
 8005892:	d905      	bls.n	80058a0 <_malloc_r+0x28>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	2600      	movs	r6, #0
 800589a:	4630      	mov	r0, r6
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a0:	4e2e      	ldr	r6, [pc, #184]	; (800595c <_malloc_r+0xe4>)
 80058a2:	f001 f82b 	bl	80068fc <__malloc_lock>
 80058a6:	6833      	ldr	r3, [r6, #0]
 80058a8:	461c      	mov	r4, r3
 80058aa:	bb34      	cbnz	r4, 80058fa <_malloc_r+0x82>
 80058ac:	4629      	mov	r1, r5
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7ff ffc2 	bl	8005838 <sbrk_aligned>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	4604      	mov	r4, r0
 80058b8:	d14d      	bne.n	8005956 <_malloc_r+0xde>
 80058ba:	6834      	ldr	r4, [r6, #0]
 80058bc:	4626      	mov	r6, r4
 80058be:	2e00      	cmp	r6, #0
 80058c0:	d140      	bne.n	8005944 <_malloc_r+0xcc>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	4631      	mov	r1, r6
 80058c6:	4638      	mov	r0, r7
 80058c8:	eb04 0803 	add.w	r8, r4, r3
 80058cc:	f000 fe6c 	bl	80065a8 <_sbrk_r>
 80058d0:	4580      	cmp	r8, r0
 80058d2:	d13a      	bne.n	800594a <_malloc_r+0xd2>
 80058d4:	6821      	ldr	r1, [r4, #0]
 80058d6:	3503      	adds	r5, #3
 80058d8:	1a6d      	subs	r5, r5, r1
 80058da:	f025 0503 	bic.w	r5, r5, #3
 80058de:	3508      	adds	r5, #8
 80058e0:	2d0c      	cmp	r5, #12
 80058e2:	bf38      	it	cc
 80058e4:	250c      	movcc	r5, #12
 80058e6:	4629      	mov	r1, r5
 80058e8:	4638      	mov	r0, r7
 80058ea:	f7ff ffa5 	bl	8005838 <sbrk_aligned>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d02b      	beq.n	800594a <_malloc_r+0xd2>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	442b      	add	r3, r5
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	e00e      	b.n	8005918 <_malloc_r+0xa0>
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	1b52      	subs	r2, r2, r5
 80058fe:	d41e      	bmi.n	800593e <_malloc_r+0xc6>
 8005900:	2a0b      	cmp	r2, #11
 8005902:	d916      	bls.n	8005932 <_malloc_r+0xba>
 8005904:	1961      	adds	r1, r4, r5
 8005906:	42a3      	cmp	r3, r4
 8005908:	6025      	str	r5, [r4, #0]
 800590a:	bf18      	it	ne
 800590c:	6059      	strne	r1, [r3, #4]
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	bf08      	it	eq
 8005912:	6031      	streq	r1, [r6, #0]
 8005914:	5162      	str	r2, [r4, r5]
 8005916:	604b      	str	r3, [r1, #4]
 8005918:	4638      	mov	r0, r7
 800591a:	f104 060b 	add.w	r6, r4, #11
 800591e:	f000 fff3 	bl	8006908 <__malloc_unlock>
 8005922:	f026 0607 	bic.w	r6, r6, #7
 8005926:	1d23      	adds	r3, r4, #4
 8005928:	1af2      	subs	r2, r6, r3
 800592a:	d0b6      	beq.n	800589a <_malloc_r+0x22>
 800592c:	1b9b      	subs	r3, r3, r6
 800592e:	50a3      	str	r3, [r4, r2]
 8005930:	e7b3      	b.n	800589a <_malloc_r+0x22>
 8005932:	6862      	ldr	r2, [r4, #4]
 8005934:	42a3      	cmp	r3, r4
 8005936:	bf0c      	ite	eq
 8005938:	6032      	streq	r2, [r6, #0]
 800593a:	605a      	strne	r2, [r3, #4]
 800593c:	e7ec      	b.n	8005918 <_malloc_r+0xa0>
 800593e:	4623      	mov	r3, r4
 8005940:	6864      	ldr	r4, [r4, #4]
 8005942:	e7b2      	b.n	80058aa <_malloc_r+0x32>
 8005944:	4634      	mov	r4, r6
 8005946:	6876      	ldr	r6, [r6, #4]
 8005948:	e7b9      	b.n	80058be <_malloc_r+0x46>
 800594a:	230c      	movs	r3, #12
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4638      	mov	r0, r7
 8005950:	f000 ffda 	bl	8006908 <__malloc_unlock>
 8005954:	e7a1      	b.n	800589a <_malloc_r+0x22>
 8005956:	6025      	str	r5, [r4, #0]
 8005958:	e7de      	b.n	8005918 <_malloc_r+0xa0>
 800595a:	bf00      	nop
 800595c:	200002c4 	.word	0x200002c4

08005960 <_sungetc_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	1c4b      	adds	r3, r1, #1
 8005964:	4614      	mov	r4, r2
 8005966:	d103      	bne.n	8005970 <_sungetc_r+0x10>
 8005968:	f04f 35ff 	mov.w	r5, #4294967295
 800596c:	4628      	mov	r0, r5
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	8993      	ldrh	r3, [r2, #12]
 8005972:	f023 0320 	bic.w	r3, r3, #32
 8005976:	8193      	strh	r3, [r2, #12]
 8005978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800597a:	6852      	ldr	r2, [r2, #4]
 800597c:	b2cd      	uxtb	r5, r1
 800597e:	b18b      	cbz	r3, 80059a4 <_sungetc_r+0x44>
 8005980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005982:	4293      	cmp	r3, r2
 8005984:	dd08      	ble.n	8005998 <_sungetc_r+0x38>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	6022      	str	r2, [r4, #0]
 800598c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	3301      	adds	r3, #1
 8005994:	6063      	str	r3, [r4, #4]
 8005996:	e7e9      	b.n	800596c <_sungetc_r+0xc>
 8005998:	4621      	mov	r1, r4
 800599a:	f000 ff45 	bl	8006828 <__submore>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d0f1      	beq.n	8005986 <_sungetc_r+0x26>
 80059a2:	e7e1      	b.n	8005968 <_sungetc_r+0x8>
 80059a4:	6921      	ldr	r1, [r4, #16]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	b151      	cbz	r1, 80059c0 <_sungetc_r+0x60>
 80059aa:	4299      	cmp	r1, r3
 80059ac:	d208      	bcs.n	80059c0 <_sungetc_r+0x60>
 80059ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80059b2:	42a9      	cmp	r1, r5
 80059b4:	d104      	bne.n	80059c0 <_sungetc_r+0x60>
 80059b6:	3b01      	subs	r3, #1
 80059b8:	3201      	adds	r2, #1
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	6062      	str	r2, [r4, #4]
 80059be:	e7d5      	b.n	800596c <_sungetc_r+0xc>
 80059c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80059c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059c8:	6363      	str	r3, [r4, #52]	; 0x34
 80059ca:	2303      	movs	r3, #3
 80059cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80059ce:	4623      	mov	r3, r4
 80059d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	2301      	movs	r3, #1
 80059d8:	e7dc      	b.n	8005994 <_sungetc_r+0x34>

080059da <__ssrefill_r>:
 80059da:	b510      	push	{r4, lr}
 80059dc:	460c      	mov	r4, r1
 80059de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80059e0:	b169      	cbz	r1, 80059fe <__ssrefill_r+0x24>
 80059e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e6:	4299      	cmp	r1, r3
 80059e8:	d001      	beq.n	80059ee <__ssrefill_r+0x14>
 80059ea:	f7ff fed9 	bl	80057a0 <_free_r>
 80059ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	2000      	movs	r0, #0
 80059f4:	6360      	str	r0, [r4, #52]	; 0x34
 80059f6:	b113      	cbz	r3, 80059fe <__ssrefill_r+0x24>
 80059f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059fa:	6023      	str	r3, [r4, #0]
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f043 0320 	orr.w	r3, r3, #32
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	e7f3      	b.n	80059fc <__ssrefill_r+0x22>

08005a14 <__ssvfiscanf_r>:
 8005a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005a1e:	2100      	movs	r1, #0
 8005a20:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005a24:	49a6      	ldr	r1, [pc, #664]	; (8005cc0 <__ssvfiscanf_r+0x2ac>)
 8005a26:	91a0      	str	r1, [sp, #640]	; 0x280
 8005a28:	f10d 0804 	add.w	r8, sp, #4
 8005a2c:	49a5      	ldr	r1, [pc, #660]	; (8005cc4 <__ssvfiscanf_r+0x2b0>)
 8005a2e:	4fa6      	ldr	r7, [pc, #664]	; (8005cc8 <__ssvfiscanf_r+0x2b4>)
 8005a30:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005ccc <__ssvfiscanf_r+0x2b8>
 8005a34:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005a38:	4606      	mov	r6, r0
 8005a3a:	91a1      	str	r1, [sp, #644]	; 0x284
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	7813      	ldrb	r3, [r2, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 815a 	beq.w	8005cfa <__ssvfiscanf_r+0x2e6>
 8005a46:	5dd9      	ldrb	r1, [r3, r7]
 8005a48:	f011 0108 	ands.w	r1, r1, #8
 8005a4c:	f102 0501 	add.w	r5, r2, #1
 8005a50:	d019      	beq.n	8005a86 <__ssvfiscanf_r+0x72>
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dd0f      	ble.n	8005a78 <__ssvfiscanf_r+0x64>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	5cba      	ldrb	r2, [r7, r2]
 8005a5e:	0712      	lsls	r2, r2, #28
 8005a60:	d401      	bmi.n	8005a66 <__ssvfiscanf_r+0x52>
 8005a62:	462a      	mov	r2, r5
 8005a64:	e7eb      	b.n	8005a3e <__ssvfiscanf_r+0x2a>
 8005a66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a68:	3201      	adds	r2, #1
 8005a6a:	9245      	str	r2, [sp, #276]	; 0x114
 8005a6c:	6862      	ldr	r2, [r4, #4]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	3a01      	subs	r2, #1
 8005a72:	6062      	str	r2, [r4, #4]
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	e7ec      	b.n	8005a52 <__ssvfiscanf_r+0x3e>
 8005a78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4798      	blx	r3
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d0e9      	beq.n	8005a58 <__ssvfiscanf_r+0x44>
 8005a84:	e7ed      	b.n	8005a62 <__ssvfiscanf_r+0x4e>
 8005a86:	2b25      	cmp	r3, #37	; 0x25
 8005a88:	d012      	beq.n	8005ab0 <__ssvfiscanf_r+0x9c>
 8005a8a:	469a      	mov	sl, r3
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f340 8091 	ble.w	8005bb6 <__ssvfiscanf_r+0x1a2>
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	7813      	ldrb	r3, [r2, #0]
 8005a98:	4553      	cmp	r3, sl
 8005a9a:	f040 812e 	bne.w	8005cfa <__ssvfiscanf_r+0x2e6>
 8005a9e:	6863      	ldr	r3, [r4, #4]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	6063      	str	r3, [r4, #4]
 8005aa4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005aa6:	3201      	adds	r2, #1
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	9345      	str	r3, [sp, #276]	; 0x114
 8005aae:	e7d8      	b.n	8005a62 <__ssvfiscanf_r+0x4e>
 8005ab0:	9141      	str	r1, [sp, #260]	; 0x104
 8005ab2:	9143      	str	r1, [sp, #268]	; 0x10c
 8005ab4:	7853      	ldrb	r3, [r2, #1]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	bf02      	ittt	eq
 8005aba:	2310      	moveq	r3, #16
 8005abc:	1c95      	addeq	r5, r2, #2
 8005abe:	9341      	streq	r3, [sp, #260]	; 0x104
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	46aa      	mov	sl, r5
 8005ac4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005ac8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d91d      	bls.n	8005b0c <__ssvfiscanf_r+0xf8>
 8005ad0:	487e      	ldr	r0, [pc, #504]	; (8005ccc <__ssvfiscanf_r+0x2b8>)
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	f7fa fb94 	bl	8000200 <memchr>
 8005ad8:	b140      	cbz	r0, 8005aec <__ssvfiscanf_r+0xd8>
 8005ada:	2301      	movs	r3, #1
 8005adc:	eba0 0009 	sub.w	r0, r0, r9
 8005ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ae4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ae6:	4318      	orrs	r0, r3
 8005ae8:	9041      	str	r0, [sp, #260]	; 0x104
 8005aea:	4655      	mov	r5, sl
 8005aec:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005af0:	2b78      	cmp	r3, #120	; 0x78
 8005af2:	d806      	bhi.n	8005b02 <__ssvfiscanf_r+0xee>
 8005af4:	2b57      	cmp	r3, #87	; 0x57
 8005af6:	d810      	bhi.n	8005b1a <__ssvfiscanf_r+0x106>
 8005af8:	2b25      	cmp	r3, #37	; 0x25
 8005afa:	d0c6      	beq.n	8005a8a <__ssvfiscanf_r+0x76>
 8005afc:	d856      	bhi.n	8005bac <__ssvfiscanf_r+0x198>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d064      	beq.n	8005bcc <__ssvfiscanf_r+0x1b8>
 8005b02:	2303      	movs	r3, #3
 8005b04:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b06:	230a      	movs	r3, #10
 8005b08:	9342      	str	r3, [sp, #264]	; 0x108
 8005b0a:	e071      	b.n	8005bf0 <__ssvfiscanf_r+0x1dc>
 8005b0c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005b0e:	fb02 1103 	mla	r1, r2, r3, r1
 8005b12:	3930      	subs	r1, #48	; 0x30
 8005b14:	9143      	str	r1, [sp, #268]	; 0x10c
 8005b16:	4655      	mov	r5, sl
 8005b18:	e7d3      	b.n	8005ac2 <__ssvfiscanf_r+0xae>
 8005b1a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005b1e:	2a20      	cmp	r2, #32
 8005b20:	d8ef      	bhi.n	8005b02 <__ssvfiscanf_r+0xee>
 8005b22:	a101      	add	r1, pc, #4	; (adr r1, 8005b28 <__ssvfiscanf_r+0x114>)
 8005b24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b28:	08005bdb 	.word	0x08005bdb
 8005b2c:	08005b03 	.word	0x08005b03
 8005b30:	08005b03 	.word	0x08005b03
 8005b34:	08005c39 	.word	0x08005c39
 8005b38:	08005b03 	.word	0x08005b03
 8005b3c:	08005b03 	.word	0x08005b03
 8005b40:	08005b03 	.word	0x08005b03
 8005b44:	08005b03 	.word	0x08005b03
 8005b48:	08005b03 	.word	0x08005b03
 8005b4c:	08005b03 	.word	0x08005b03
 8005b50:	08005b03 	.word	0x08005b03
 8005b54:	08005c4f 	.word	0x08005c4f
 8005b58:	08005c25 	.word	0x08005c25
 8005b5c:	08005bb3 	.word	0x08005bb3
 8005b60:	08005bb3 	.word	0x08005bb3
 8005b64:	08005bb3 	.word	0x08005bb3
 8005b68:	08005b03 	.word	0x08005b03
 8005b6c:	08005c29 	.word	0x08005c29
 8005b70:	08005b03 	.word	0x08005b03
 8005b74:	08005b03 	.word	0x08005b03
 8005b78:	08005b03 	.word	0x08005b03
 8005b7c:	08005b03 	.word	0x08005b03
 8005b80:	08005c5f 	.word	0x08005c5f
 8005b84:	08005c31 	.word	0x08005c31
 8005b88:	08005bd3 	.word	0x08005bd3
 8005b8c:	08005b03 	.word	0x08005b03
 8005b90:	08005b03 	.word	0x08005b03
 8005b94:	08005c5b 	.word	0x08005c5b
 8005b98:	08005b03 	.word	0x08005b03
 8005b9c:	08005c25 	.word	0x08005c25
 8005ba0:	08005b03 	.word	0x08005b03
 8005ba4:	08005b03 	.word	0x08005b03
 8005ba8:	08005bdb 	.word	0x08005bdb
 8005bac:	3b45      	subs	r3, #69	; 0x45
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d8a7      	bhi.n	8005b02 <__ssvfiscanf_r+0xee>
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	e01b      	b.n	8005bee <__ssvfiscanf_r+0x1da>
 8005bb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4798      	blx	r3
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f43f af68 	beq.w	8005a94 <__ssvfiscanf_r+0x80>
 8005bc4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f040 808d 	bne.w	8005ce6 <__ssvfiscanf_r+0x2d2>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e08f      	b.n	8005cf2 <__ssvfiscanf_r+0x2de>
 8005bd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005bd4:	f042 0220 	orr.w	r2, r2, #32
 8005bd8:	9241      	str	r2, [sp, #260]	; 0x104
 8005bda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be0:	9241      	str	r2, [sp, #260]	; 0x104
 8005be2:	2210      	movs	r2, #16
 8005be4:	2b6f      	cmp	r3, #111	; 0x6f
 8005be6:	9242      	str	r2, [sp, #264]	; 0x108
 8005be8:	bf34      	ite	cc
 8005bea:	2303      	movcc	r3, #3
 8005bec:	2304      	movcs	r3, #4
 8005bee:	9347      	str	r3, [sp, #284]	; 0x11c
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd42      	ble.n	8005c7c <__ssvfiscanf_r+0x268>
 8005bf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bf8:	0659      	lsls	r1, r3, #25
 8005bfa:	d404      	bmi.n	8005c06 <__ssvfiscanf_r+0x1f2>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	5cba      	ldrb	r2, [r7, r2]
 8005c02:	0712      	lsls	r2, r2, #28
 8005c04:	d441      	bmi.n	8005c8a <__ssvfiscanf_r+0x276>
 8005c06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	dc50      	bgt.n	8005cae <__ssvfiscanf_r+0x29a>
 8005c0c:	466b      	mov	r3, sp
 8005c0e:	4622      	mov	r2, r4
 8005c10:	a941      	add	r1, sp, #260	; 0x104
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 fb64 	bl	80062e0 <_scanf_chars>
 8005c18:	2801      	cmp	r0, #1
 8005c1a:	d06e      	beq.n	8005cfa <__ssvfiscanf_r+0x2e6>
 8005c1c:	2802      	cmp	r0, #2
 8005c1e:	f47f af20 	bne.w	8005a62 <__ssvfiscanf_r+0x4e>
 8005c22:	e7cf      	b.n	8005bc4 <__ssvfiscanf_r+0x1b0>
 8005c24:	220a      	movs	r2, #10
 8005c26:	e7dd      	b.n	8005be4 <__ssvfiscanf_r+0x1d0>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9342      	str	r3, [sp, #264]	; 0x108
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e7de      	b.n	8005bee <__ssvfiscanf_r+0x1da>
 8005c30:	2308      	movs	r3, #8
 8005c32:	9342      	str	r3, [sp, #264]	; 0x108
 8005c34:	2304      	movs	r3, #4
 8005c36:	e7da      	b.n	8005bee <__ssvfiscanf_r+0x1da>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f000 fcc4 	bl	80065c8 <__sccl>
 8005c40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c46:	9341      	str	r3, [sp, #260]	; 0x104
 8005c48:	4605      	mov	r5, r0
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7cf      	b.n	8005bee <__ssvfiscanf_r+0x1da>
 8005c4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c54:	9341      	str	r3, [sp, #260]	; 0x104
 8005c56:	2300      	movs	r3, #0
 8005c58:	e7c9      	b.n	8005bee <__ssvfiscanf_r+0x1da>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e7c7      	b.n	8005bee <__ssvfiscanf_r+0x1da>
 8005c5e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005c60:	06c3      	lsls	r3, r0, #27
 8005c62:	f53f aefe 	bmi.w	8005a62 <__ssvfiscanf_r+0x4e>
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	9100      	str	r1, [sp, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f010 0f01 	tst.w	r0, #1
 8005c74:	bf14      	ite	ne
 8005c76:	801a      	strhne	r2, [r3, #0]
 8005c78:	601a      	streq	r2, [r3, #0]
 8005c7a:	e6f2      	b.n	8005a62 <__ssvfiscanf_r+0x4e>
 8005c7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4630      	mov	r0, r6
 8005c82:	4798      	blx	r3
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d0b6      	beq.n	8005bf6 <__ssvfiscanf_r+0x1e2>
 8005c88:	e79c      	b.n	8005bc4 <__ssvfiscanf_r+0x1b0>
 8005c8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c8c:	3201      	adds	r2, #1
 8005c8e:	9245      	str	r2, [sp, #276]	; 0x114
 8005c90:	6862      	ldr	r2, [r4, #4]
 8005c92:	3a01      	subs	r2, #1
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	6062      	str	r2, [r4, #4]
 8005c98:	dd02      	ble.n	8005ca0 <__ssvfiscanf_r+0x28c>
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	e7ad      	b.n	8005bfc <__ssvfiscanf_r+0x1e8>
 8005ca0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4798      	blx	r3
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d0a7      	beq.n	8005bfc <__ssvfiscanf_r+0x1e8>
 8005cac:	e78a      	b.n	8005bc4 <__ssvfiscanf_r+0x1b0>
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	dc0e      	bgt.n	8005cd0 <__ssvfiscanf_r+0x2bc>
 8005cb2:	466b      	mov	r3, sp
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	a941      	add	r1, sp, #260	; 0x104
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 fb6b 	bl	8006394 <_scanf_i>
 8005cbe:	e7ab      	b.n	8005c18 <__ssvfiscanf_r+0x204>
 8005cc0:	08005961 	.word	0x08005961
 8005cc4:	080059db 	.word	0x080059db
 8005cc8:	08006b1f 	.word	0x08006b1f
 8005ccc:	08006ad0 	.word	0x08006ad0
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <__ssvfiscanf_r+0x2ec>)
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f43f aec5 	beq.w	8005a62 <__ssvfiscanf_r+0x4e>
 8005cd8:	466b      	mov	r3, sp
 8005cda:	4622      	mov	r2, r4
 8005cdc:	a941      	add	r1, sp, #260	; 0x104
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f3af 8000 	nop.w
 8005ce4:	e798      	b.n	8005c18 <__ssvfiscanf_r+0x204>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cec:	bf18      	it	ne
 8005cee:	f04f 30ff 	movne.w	r0, #4294967295
 8005cf2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfa:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005cfc:	e7f9      	b.n	8005cf2 <__ssvfiscanf_r+0x2de>
 8005cfe:	bf00      	nop
 8005d00:	00000000 	.word	0x00000000

08005d04 <__sfputc_r>:
 8005d04:	6893      	ldr	r3, [r2, #8]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	b410      	push	{r4}
 8005d0c:	6093      	str	r3, [r2, #8]
 8005d0e:	da08      	bge.n	8005d22 <__sfputc_r+0x1e>
 8005d10:	6994      	ldr	r4, [r2, #24]
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	db01      	blt.n	8005d1a <__sfputc_r+0x16>
 8005d16:	290a      	cmp	r1, #10
 8005d18:	d103      	bne.n	8005d22 <__sfputc_r+0x1e>
 8005d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d1e:	f7ff ba2b 	b.w	8005178 <__swbuf_r>
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	1c58      	adds	r0, r3, #1
 8005d26:	6010      	str	r0, [r2, #0]
 8005d28:	7019      	strb	r1, [r3, #0]
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <__sfputs_r>:
 8005d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	18d5      	adds	r5, r2, r3
 8005d3c:	42ac      	cmp	r4, r5
 8005d3e:	d101      	bne.n	8005d44 <__sfputs_r+0x12>
 8005d40:	2000      	movs	r0, #0
 8005d42:	e007      	b.n	8005d54 <__sfputs_r+0x22>
 8005d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d48:	463a      	mov	r2, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ffda 	bl	8005d04 <__sfputc_r>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d1f3      	bne.n	8005d3c <__sfputs_r+0xa>
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d58 <_vfiprintf_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	b09d      	sub	sp, #116	; 0x74
 8005d60:	4614      	mov	r4, r2
 8005d62:	4698      	mov	r8, r3
 8005d64:	4606      	mov	r6, r0
 8005d66:	b118      	cbz	r0, 8005d70 <_vfiprintf_r+0x18>
 8005d68:	6983      	ldr	r3, [r0, #24]
 8005d6a:	b90b      	cbnz	r3, 8005d70 <_vfiprintf_r+0x18>
 8005d6c:	f7ff fc00 	bl	8005570 <__sinit>
 8005d70:	4b89      	ldr	r3, [pc, #548]	; (8005f98 <_vfiprintf_r+0x240>)
 8005d72:	429d      	cmp	r5, r3
 8005d74:	d11b      	bne.n	8005dae <_vfiprintf_r+0x56>
 8005d76:	6875      	ldr	r5, [r6, #4]
 8005d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7a:	07d9      	lsls	r1, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_vfiprintf_r+0x32>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	059a      	lsls	r2, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_vfiprintf_r+0x32>
 8005d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d86:	f7ff fc91 	bl	80056ac <__retarget_lock_acquire_recursive>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	d501      	bpl.n	8005d94 <_vfiprintf_r+0x3c>
 8005d90:	692b      	ldr	r3, [r5, #16]
 8005d92:	b9eb      	cbnz	r3, 8005dd0 <_vfiprintf_r+0x78>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff fa52 	bl	8005240 <__swsetup_r>
 8005d9c:	b1c0      	cbz	r0, 8005dd0 <_vfiprintf_r+0x78>
 8005d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da0:	07dc      	lsls	r4, r3, #31
 8005da2:	d50e      	bpl.n	8005dc2 <_vfiprintf_r+0x6a>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b01d      	add	sp, #116	; 0x74
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	4b7b      	ldr	r3, [pc, #492]	; (8005f9c <_vfiprintf_r+0x244>)
 8005db0:	429d      	cmp	r5, r3
 8005db2:	d101      	bne.n	8005db8 <_vfiprintf_r+0x60>
 8005db4:	68b5      	ldr	r5, [r6, #8]
 8005db6:	e7df      	b.n	8005d78 <_vfiprintf_r+0x20>
 8005db8:	4b79      	ldr	r3, [pc, #484]	; (8005fa0 <_vfiprintf_r+0x248>)
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	bf08      	it	eq
 8005dbe:	68f5      	ldreq	r5, [r6, #12]
 8005dc0:	e7da      	b.n	8005d78 <_vfiprintf_r+0x20>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	0598      	lsls	r0, r3, #22
 8005dc6:	d4ed      	bmi.n	8005da4 <_vfiprintf_r+0x4c>
 8005dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dca:	f7ff fc70 	bl	80056ae <__retarget_lock_release_recursive>
 8005dce:	e7e9      	b.n	8005da4 <_vfiprintf_r+0x4c>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dde:	2330      	movs	r3, #48	; 0x30
 8005de0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fa4 <_vfiprintf_r+0x24c>
 8005de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005de8:	f04f 0901 	mov.w	r9, #1
 8005dec:	4623      	mov	r3, r4
 8005dee:	469a      	mov	sl, r3
 8005df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df4:	b10a      	cbz	r2, 8005dfa <_vfiprintf_r+0xa2>
 8005df6:	2a25      	cmp	r2, #37	; 0x25
 8005df8:	d1f9      	bne.n	8005dee <_vfiprintf_r+0x96>
 8005dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005dfe:	d00b      	beq.n	8005e18 <_vfiprintf_r+0xc0>
 8005e00:	465b      	mov	r3, fp
 8005e02:	4622      	mov	r2, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff ff93 	bl	8005d32 <__sfputs_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f000 80aa 	beq.w	8005f66 <_vfiprintf_r+0x20e>
 8005e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e14:	445a      	add	r2, fp
 8005e16:	9209      	str	r2, [sp, #36]	; 0x24
 8005e18:	f89a 3000 	ldrb.w	r3, [sl]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80a2 	beq.w	8005f66 <_vfiprintf_r+0x20e>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e2c:	f10a 0a01 	add.w	sl, sl, #1
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	9307      	str	r3, [sp, #28]
 8005e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e38:	931a      	str	r3, [sp, #104]	; 0x68
 8005e3a:	4654      	mov	r4, sl
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e42:	4858      	ldr	r0, [pc, #352]	; (8005fa4 <_vfiprintf_r+0x24c>)
 8005e44:	f7fa f9dc 	bl	8000200 <memchr>
 8005e48:	9a04      	ldr	r2, [sp, #16]
 8005e4a:	b9d8      	cbnz	r0, 8005e84 <_vfiprintf_r+0x12c>
 8005e4c:	06d1      	lsls	r1, r2, #27
 8005e4e:	bf44      	itt	mi
 8005e50:	2320      	movmi	r3, #32
 8005e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e56:	0713      	lsls	r3, r2, #28
 8005e58:	bf44      	itt	mi
 8005e5a:	232b      	movmi	r3, #43	; 0x2b
 8005e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e60:	f89a 3000 	ldrb.w	r3, [sl]
 8005e64:	2b2a      	cmp	r3, #42	; 0x2a
 8005e66:	d015      	beq.n	8005e94 <_vfiprintf_r+0x13c>
 8005e68:	9a07      	ldr	r2, [sp, #28]
 8005e6a:	4654      	mov	r4, sl
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f04f 0c0a 	mov.w	ip, #10
 8005e72:	4621      	mov	r1, r4
 8005e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e78:	3b30      	subs	r3, #48	; 0x30
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d94e      	bls.n	8005f1c <_vfiprintf_r+0x1c4>
 8005e7e:	b1b0      	cbz	r0, 8005eae <_vfiprintf_r+0x156>
 8005e80:	9207      	str	r2, [sp, #28]
 8005e82:	e014      	b.n	8005eae <_vfiprintf_r+0x156>
 8005e84:	eba0 0308 	sub.w	r3, r0, r8
 8005e88:	fa09 f303 	lsl.w	r3, r9, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	9304      	str	r3, [sp, #16]
 8005e90:	46a2      	mov	sl, r4
 8005e92:	e7d2      	b.n	8005e3a <_vfiprintf_r+0xe2>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	1d19      	adds	r1, r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	9103      	str	r1, [sp, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfbb      	ittet	lt
 8005ea0:	425b      	neglt	r3, r3
 8005ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea6:	9307      	strge	r3, [sp, #28]
 8005ea8:	9307      	strlt	r3, [sp, #28]
 8005eaa:	bfb8      	it	lt
 8005eac:	9204      	strlt	r2, [sp, #16]
 8005eae:	7823      	ldrb	r3, [r4, #0]
 8005eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb2:	d10c      	bne.n	8005ece <_vfiprintf_r+0x176>
 8005eb4:	7863      	ldrb	r3, [r4, #1]
 8005eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb8:	d135      	bne.n	8005f26 <_vfiprintf_r+0x1ce>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9203      	str	r2, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfb8      	it	lt
 8005ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eca:	3402      	adds	r4, #2
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fb4 <_vfiprintf_r+0x25c>
 8005ed2:	7821      	ldrb	r1, [r4, #0]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	f7fa f992 	bl	8000200 <memchr>
 8005edc:	b140      	cbz	r0, 8005ef0 <_vfiprintf_r+0x198>
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	eba0 000a 	sub.w	r0, r0, sl
 8005ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee8:	9b04      	ldr	r3, [sp, #16]
 8005eea:	4303      	orrs	r3, r0
 8005eec:	3401      	adds	r4, #1
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef4:	482c      	ldr	r0, [pc, #176]	; (8005fa8 <_vfiprintf_r+0x250>)
 8005ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005efa:	2206      	movs	r2, #6
 8005efc:	f7fa f980 	bl	8000200 <memchr>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d03f      	beq.n	8005f84 <_vfiprintf_r+0x22c>
 8005f04:	4b29      	ldr	r3, [pc, #164]	; (8005fac <_vfiprintf_r+0x254>)
 8005f06:	bb1b      	cbnz	r3, 8005f50 <_vfiprintf_r+0x1f8>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	3307      	adds	r3, #7
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	3308      	adds	r3, #8
 8005f12:	9303      	str	r3, [sp, #12]
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	443b      	add	r3, r7
 8005f18:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1a:	e767      	b.n	8005dec <_vfiprintf_r+0x94>
 8005f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f20:	460c      	mov	r4, r1
 8005f22:	2001      	movs	r0, #1
 8005f24:	e7a5      	b.n	8005e72 <_vfiprintf_r+0x11a>
 8005f26:	2300      	movs	r3, #0
 8005f28:	3401      	adds	r4, #1
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f04f 0c0a 	mov.w	ip, #10
 8005f32:	4620      	mov	r0, r4
 8005f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f38:	3a30      	subs	r2, #48	; 0x30
 8005f3a:	2a09      	cmp	r2, #9
 8005f3c:	d903      	bls.n	8005f46 <_vfiprintf_r+0x1ee>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0c5      	beq.n	8005ece <_vfiprintf_r+0x176>
 8005f42:	9105      	str	r1, [sp, #20]
 8005f44:	e7c3      	b.n	8005ece <_vfiprintf_r+0x176>
 8005f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e7f0      	b.n	8005f32 <_vfiprintf_r+0x1da>
 8005f50:	ab03      	add	r3, sp, #12
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	462a      	mov	r2, r5
 8005f56:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <_vfiprintf_r+0x258>)
 8005f58:	a904      	add	r1, sp, #16
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f3af 8000 	nop.w
 8005f60:	4607      	mov	r7, r0
 8005f62:	1c78      	adds	r0, r7, #1
 8005f64:	d1d6      	bne.n	8005f14 <_vfiprintf_r+0x1bc>
 8005f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f68:	07d9      	lsls	r1, r3, #31
 8005f6a:	d405      	bmi.n	8005f78 <_vfiprintf_r+0x220>
 8005f6c:	89ab      	ldrh	r3, [r5, #12]
 8005f6e:	059a      	lsls	r2, r3, #22
 8005f70:	d402      	bmi.n	8005f78 <_vfiprintf_r+0x220>
 8005f72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f74:	f7ff fb9b 	bl	80056ae <__retarget_lock_release_recursive>
 8005f78:	89ab      	ldrh	r3, [r5, #12]
 8005f7a:	065b      	lsls	r3, r3, #25
 8005f7c:	f53f af12 	bmi.w	8005da4 <_vfiprintf_r+0x4c>
 8005f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f82:	e711      	b.n	8005da8 <_vfiprintf_r+0x50>
 8005f84:	ab03      	add	r3, sp, #12
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	462a      	mov	r2, r5
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_vfiprintf_r+0x258>)
 8005f8c:	a904      	add	r1, sp, #16
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f880 	bl	8006094 <_printf_i>
 8005f94:	e7e4      	b.n	8005f60 <_vfiprintf_r+0x208>
 8005f96:	bf00      	nop
 8005f98:	08006a90 	.word	0x08006a90
 8005f9c:	08006ab0 	.word	0x08006ab0
 8005fa0:	08006a70 	.word	0x08006a70
 8005fa4:	08006ad4 	.word	0x08006ad4
 8005fa8:	08006ada 	.word	0x08006ada
 8005fac:	00000000 	.word	0x00000000
 8005fb0:	08005d33 	.word	0x08005d33
 8005fb4:	08006ad0 	.word	0x08006ad0

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4699      	mov	r9, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfb8      	it	lt
 8005fcc:	4613      	movlt	r3, r2
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc26      	bgt.n	800604e <_printf_common+0x96>
 8006000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006004:	1e13      	subs	r3, r2, #0
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d42b      	bmi.n	8006068 <_printf_common+0xb0>
 8006010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006014:	4649      	mov	r1, r9
 8006016:	4638      	mov	r0, r7
 8006018:	47c0      	blx	r8
 800601a:	3001      	adds	r0, #1
 800601c:	d01e      	beq.n	800605c <_printf_common+0xa4>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	68e5      	ldr	r5, [r4, #12]
 8006022:	6832      	ldr	r2, [r6, #0]
 8006024:	f003 0306 	and.w	r3, r3, #6
 8006028:	2b04      	cmp	r3, #4
 800602a:	bf08      	it	eq
 800602c:	1aad      	subeq	r5, r5, r2
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	bf0c      	ite	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	2500      	movne	r5, #0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfc4      	itt	gt
 800603e:	1a9b      	subgt	r3, r3, r2
 8006040:	18ed      	addgt	r5, r5, r3
 8006042:	2600      	movs	r6, #0
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xc8>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xa8>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4649      	mov	r1, r9
 8006054:	4638      	mov	r0, r7
 8006056:	47c0      	blx	r8
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xac>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c6      	b.n	8005ff6 <_printf_common+0x3e>
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	2030      	movs	r0, #48	; 0x30
 800606e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006072:	4422      	add	r2, r4
 8006074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800607c:	3302      	adds	r3, #2
 800607e:	e7c7      	b.n	8006010 <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4649      	mov	r1, r9
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa4>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x8e>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800609c:	2f78      	cmp	r7, #120	; 0x78
 800609e:	4691      	mov	r9, r2
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	469a      	mov	sl, r3
 80060a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	; 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d8 	beq.w	8006266 <_printf_i+0x1d2>
 80060b6:	2f58      	cmp	r7, #88	; 0x58
 80060b8:	f000 80a3 	beq.w	8006202 <_printf_i+0x16e>
 80060bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	; (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	0800624d 	.word	0x0800624d
 8006104:	08006171 	.word	0x08006171
 8006108:	0800622f 	.word	0x0800622f
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	0800626f 	.word	0x0800626f
 8006118:	080060bd 	.word	0x080060bd
 800611c:	08006171 	.word	0x08006171
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006237 	.word	0x08006237
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	602a      	str	r2, [r5, #0]
 8006134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e0a3      	b.n	8006288 <_printf_i+0x1f4>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	6829      	ldr	r1, [r5, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	f101 0304 	add.w	r3, r1, #4
 800614a:	d50a      	bpl.n	8006162 <_printf_i+0xce>
 800614c:	680e      	ldr	r6, [r1, #0]
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	2e00      	cmp	r6, #0
 8006152:	da03      	bge.n	800615c <_printf_i+0xc8>
 8006154:	232d      	movs	r3, #45	; 0x2d
 8006156:	4276      	negs	r6, r6
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615c:	485e      	ldr	r0, [pc, #376]	; (80062d8 <_printf_i+0x244>)
 800615e:	230a      	movs	r3, #10
 8006160:	e019      	b.n	8006196 <_printf_i+0x102>
 8006162:	680e      	ldr	r6, [r1, #0]
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800616a:	bf18      	it	ne
 800616c:	b236      	sxthne	r6, r6
 800616e:	e7ef      	b.n	8006150 <_printf_i+0xbc>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	6029      	str	r1, [r5, #0]
 8006178:	0601      	lsls	r1, r0, #24
 800617a:	d501      	bpl.n	8006180 <_printf_i+0xec>
 800617c:	681e      	ldr	r6, [r3, #0]
 800617e:	e002      	b.n	8006186 <_printf_i+0xf2>
 8006180:	0646      	lsls	r6, r0, #25
 8006182:	d5fb      	bpl.n	800617c <_printf_i+0xe8>
 8006184:	881e      	ldrh	r6, [r3, #0]
 8006186:	4854      	ldr	r0, [pc, #336]	; (80062d8 <_printf_i+0x244>)
 8006188:	2f6f      	cmp	r7, #111	; 0x6f
 800618a:	bf0c      	ite	eq
 800618c:	2308      	moveq	r3, #8
 800618e:	230a      	movne	r3, #10
 8006190:	2100      	movs	r1, #0
 8006192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006196:	6865      	ldr	r5, [r4, #4]
 8006198:	60a5      	str	r5, [r4, #8]
 800619a:	2d00      	cmp	r5, #0
 800619c:	bfa2      	ittt	ge
 800619e:	6821      	ldrge	r1, [r4, #0]
 80061a0:	f021 0104 	bicge.w	r1, r1, #4
 80061a4:	6021      	strge	r1, [r4, #0]
 80061a6:	b90e      	cbnz	r6, 80061ac <_printf_i+0x118>
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	d04d      	beq.n	8006248 <_printf_i+0x1b4>
 80061ac:	4615      	mov	r5, r2
 80061ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80061b2:	fb03 6711 	mls	r7, r3, r1, r6
 80061b6:	5dc7      	ldrb	r7, [r0, r7]
 80061b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061bc:	4637      	mov	r7, r6
 80061be:	42bb      	cmp	r3, r7
 80061c0:	460e      	mov	r6, r1
 80061c2:	d9f4      	bls.n	80061ae <_printf_i+0x11a>
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d10b      	bne.n	80061e0 <_printf_i+0x14c>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	07de      	lsls	r6, r3, #31
 80061cc:	d508      	bpl.n	80061e0 <_printf_i+0x14c>
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	6861      	ldr	r1, [r4, #4]
 80061d2:	4299      	cmp	r1, r3
 80061d4:	bfde      	ittt	le
 80061d6:	2330      	movle	r3, #48	; 0x30
 80061d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061e0:	1b52      	subs	r2, r2, r5
 80061e2:	6122      	str	r2, [r4, #16]
 80061e4:	f8cd a000 	str.w	sl, [sp]
 80061e8:	464b      	mov	r3, r9
 80061ea:	aa03      	add	r2, sp, #12
 80061ec:	4621      	mov	r1, r4
 80061ee:	4640      	mov	r0, r8
 80061f0:	f7ff fee2 	bl	8005fb8 <_printf_common>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d14c      	bne.n	8006292 <_printf_i+0x1fe>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	b004      	add	sp, #16
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006202:	4835      	ldr	r0, [pc, #212]	; (80062d8 <_printf_i+0x244>)
 8006204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006210:	6029      	str	r1, [r5, #0]
 8006212:	061d      	lsls	r5, r3, #24
 8006214:	d514      	bpl.n	8006240 <_printf_i+0x1ac>
 8006216:	07df      	lsls	r7, r3, #31
 8006218:	bf44      	itt	mi
 800621a:	f043 0320 	orrmi.w	r3, r3, #32
 800621e:	6023      	strmi	r3, [r4, #0]
 8006220:	b91e      	cbnz	r6, 800622a <_printf_i+0x196>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f023 0320 	bic.w	r3, r3, #32
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	2310      	movs	r3, #16
 800622c:	e7b0      	b.n	8006190 <_printf_i+0xfc>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f043 0320 	orr.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	2378      	movs	r3, #120	; 0x78
 8006238:	4828      	ldr	r0, [pc, #160]	; (80062dc <_printf_i+0x248>)
 800623a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800623e:	e7e3      	b.n	8006208 <_printf_i+0x174>
 8006240:	0659      	lsls	r1, r3, #25
 8006242:	bf48      	it	mi
 8006244:	b2b6      	uxthmi	r6, r6
 8006246:	e7e6      	b.n	8006216 <_printf_i+0x182>
 8006248:	4615      	mov	r5, r2
 800624a:	e7bb      	b.n	80061c4 <_printf_i+0x130>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6826      	ldr	r6, [r4, #0]
 8006250:	6961      	ldr	r1, [r4, #20]
 8006252:	1d18      	adds	r0, r3, #4
 8006254:	6028      	str	r0, [r5, #0]
 8006256:	0635      	lsls	r5, r6, #24
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	d501      	bpl.n	8006260 <_printf_i+0x1cc>
 800625c:	6019      	str	r1, [r3, #0]
 800625e:	e002      	b.n	8006266 <_printf_i+0x1d2>
 8006260:	0670      	lsls	r0, r6, #25
 8006262:	d5fb      	bpl.n	800625c <_printf_i+0x1c8>
 8006264:	8019      	strh	r1, [r3, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	4615      	mov	r5, r2
 800626c:	e7ba      	b.n	80061e4 <_printf_i+0x150>
 800626e:	682b      	ldr	r3, [r5, #0]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	2100      	movs	r1, #0
 800627a:	4628      	mov	r0, r5
 800627c:	f7f9 ffc0 	bl	8000200 <memchr>
 8006280:	b108      	cbz	r0, 8006286 <_printf_i+0x1f2>
 8006282:	1b40      	subs	r0, r0, r5
 8006284:	6060      	str	r0, [r4, #4]
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	2300      	movs	r3, #0
 800628c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006290:	e7a8      	b.n	80061e4 <_printf_i+0x150>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	462a      	mov	r2, r5
 8006296:	4649      	mov	r1, r9
 8006298:	4640      	mov	r0, r8
 800629a:	47d0      	blx	sl
 800629c:	3001      	adds	r0, #1
 800629e:	d0ab      	beq.n	80061f8 <_printf_i+0x164>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	079b      	lsls	r3, r3, #30
 80062a4:	d413      	bmi.n	80062ce <_printf_i+0x23a>
 80062a6:	68e0      	ldr	r0, [r4, #12]
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	4298      	cmp	r0, r3
 80062ac:	bfb8      	it	lt
 80062ae:	4618      	movlt	r0, r3
 80062b0:	e7a4      	b.n	80061fc <_printf_i+0x168>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4632      	mov	r2, r6
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	47d0      	blx	sl
 80062bc:	3001      	adds	r0, #1
 80062be:	d09b      	beq.n	80061f8 <_printf_i+0x164>
 80062c0:	3501      	adds	r5, #1
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	1a5b      	subs	r3, r3, r1
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	dcf2      	bgt.n	80062b2 <_printf_i+0x21e>
 80062cc:	e7eb      	b.n	80062a6 <_printf_i+0x212>
 80062ce:	2500      	movs	r5, #0
 80062d0:	f104 0619 	add.w	r6, r4, #25
 80062d4:	e7f5      	b.n	80062c2 <_printf_i+0x22e>
 80062d6:	bf00      	nop
 80062d8:	08006ae1 	.word	0x08006ae1
 80062dc:	08006af2 	.word	0x08006af2

080062e0 <_scanf_chars>:
 80062e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e4:	4615      	mov	r5, r2
 80062e6:	688a      	ldr	r2, [r1, #8]
 80062e8:	4680      	mov	r8, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	b932      	cbnz	r2, 80062fc <_scanf_chars+0x1c>
 80062ee:	698a      	ldr	r2, [r1, #24]
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2201      	moveq	r2, #1
 80062f6:	f04f 32ff 	movne.w	r2, #4294967295
 80062fa:	608a      	str	r2, [r1, #8]
 80062fc:	6822      	ldr	r2, [r4, #0]
 80062fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006390 <_scanf_chars+0xb0>
 8006302:	06d1      	lsls	r1, r2, #27
 8006304:	bf5f      	itttt	pl
 8006306:	681a      	ldrpl	r2, [r3, #0]
 8006308:	1d11      	addpl	r1, r2, #4
 800630a:	6019      	strpl	r1, [r3, #0]
 800630c:	6816      	ldrpl	r6, [r2, #0]
 800630e:	2700      	movs	r7, #0
 8006310:	69a0      	ldr	r0, [r4, #24]
 8006312:	b188      	cbz	r0, 8006338 <_scanf_chars+0x58>
 8006314:	2801      	cmp	r0, #1
 8006316:	d107      	bne.n	8006328 <_scanf_chars+0x48>
 8006318:	682a      	ldr	r2, [r5, #0]
 800631a:	7811      	ldrb	r1, [r2, #0]
 800631c:	6962      	ldr	r2, [r4, #20]
 800631e:	5c52      	ldrb	r2, [r2, r1]
 8006320:	b952      	cbnz	r2, 8006338 <_scanf_chars+0x58>
 8006322:	2f00      	cmp	r7, #0
 8006324:	d031      	beq.n	800638a <_scanf_chars+0xaa>
 8006326:	e022      	b.n	800636e <_scanf_chars+0x8e>
 8006328:	2802      	cmp	r0, #2
 800632a:	d120      	bne.n	800636e <_scanf_chars+0x8e>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006334:	071b      	lsls	r3, r3, #28
 8006336:	d41a      	bmi.n	800636e <_scanf_chars+0x8e>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	06da      	lsls	r2, r3, #27
 800633c:	bf5e      	ittt	pl
 800633e:	682b      	ldrpl	r3, [r5, #0]
 8006340:	781b      	ldrbpl	r3, [r3, #0]
 8006342:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006346:	682a      	ldr	r2, [r5, #0]
 8006348:	686b      	ldr	r3, [r5, #4]
 800634a:	3201      	adds	r2, #1
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	68a2      	ldr	r2, [r4, #8]
 8006350:	3b01      	subs	r3, #1
 8006352:	3a01      	subs	r2, #1
 8006354:	606b      	str	r3, [r5, #4]
 8006356:	3701      	adds	r7, #1
 8006358:	60a2      	str	r2, [r4, #8]
 800635a:	b142      	cbz	r2, 800636e <_scanf_chars+0x8e>
 800635c:	2b00      	cmp	r3, #0
 800635e:	dcd7      	bgt.n	8006310 <_scanf_chars+0x30>
 8006360:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006364:	4629      	mov	r1, r5
 8006366:	4640      	mov	r0, r8
 8006368:	4798      	blx	r3
 800636a:	2800      	cmp	r0, #0
 800636c:	d0d0      	beq.n	8006310 <_scanf_chars+0x30>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f013 0310 	ands.w	r3, r3, #16
 8006374:	d105      	bne.n	8006382 <_scanf_chars+0xa2>
 8006376:	68e2      	ldr	r2, [r4, #12]
 8006378:	3201      	adds	r2, #1
 800637a:	60e2      	str	r2, [r4, #12]
 800637c:	69a2      	ldr	r2, [r4, #24]
 800637e:	b102      	cbz	r2, 8006382 <_scanf_chars+0xa2>
 8006380:	7033      	strb	r3, [r6, #0]
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	443b      	add	r3, r7
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	2000      	movs	r0, #0
 800638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638e:	bf00      	nop
 8006390:	08006b1f 	.word	0x08006b1f

08006394 <_scanf_i>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	4698      	mov	r8, r3
 800639a:	4b76      	ldr	r3, [pc, #472]	; (8006574 <_scanf_i+0x1e0>)
 800639c:	460c      	mov	r4, r1
 800639e:	4682      	mov	sl, r0
 80063a0:	4616      	mov	r6, r2
 80063a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063a6:	b087      	sub	sp, #28
 80063a8:	ab03      	add	r3, sp, #12
 80063aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063ae:	4b72      	ldr	r3, [pc, #456]	; (8006578 <_scanf_i+0x1e4>)
 80063b0:	69a1      	ldr	r1, [r4, #24]
 80063b2:	4a72      	ldr	r2, [pc, #456]	; (800657c <_scanf_i+0x1e8>)
 80063b4:	2903      	cmp	r1, #3
 80063b6:	bf18      	it	ne
 80063b8:	461a      	movne	r2, r3
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	9201      	str	r2, [sp, #4]
 80063be:	1e5a      	subs	r2, r3, #1
 80063c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063c4:	bf88      	it	hi
 80063c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80063ca:	4627      	mov	r7, r4
 80063cc:	bf82      	ittt	hi
 80063ce:	eb03 0905 	addhi.w	r9, r3, r5
 80063d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063d6:	60a3      	strhi	r3, [r4, #8]
 80063d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80063dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80063e0:	bf98      	it	ls
 80063e2:	f04f 0900 	movls.w	r9, #0
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	463d      	mov	r5, r7
 80063ea:	f04f 0b00 	mov.w	fp, #0
 80063ee:	6831      	ldr	r1, [r6, #0]
 80063f0:	ab03      	add	r3, sp, #12
 80063f2:	7809      	ldrb	r1, [r1, #0]
 80063f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80063f8:	2202      	movs	r2, #2
 80063fa:	f7f9 ff01 	bl	8000200 <memchr>
 80063fe:	b328      	cbz	r0, 800644c <_scanf_i+0xb8>
 8006400:	f1bb 0f01 	cmp.w	fp, #1
 8006404:	d159      	bne.n	80064ba <_scanf_i+0x126>
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	b92a      	cbnz	r2, 8006416 <_scanf_i+0x82>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	2308      	movs	r3, #8
 800640e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006412:	6063      	str	r3, [r4, #4]
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	68a2      	ldr	r2, [r4, #8]
 8006420:	1e51      	subs	r1, r2, #1
 8006422:	60a1      	str	r1, [r4, #8]
 8006424:	b192      	cbz	r2, 800644c <_scanf_i+0xb8>
 8006426:	6832      	ldr	r2, [r6, #0]
 8006428:	1c51      	adds	r1, r2, #1
 800642a:	6031      	str	r1, [r6, #0]
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	f805 2b01 	strb.w	r2, [r5], #1
 8006432:	6872      	ldr	r2, [r6, #4]
 8006434:	3a01      	subs	r2, #1
 8006436:	2a00      	cmp	r2, #0
 8006438:	6072      	str	r2, [r6, #4]
 800643a:	dc07      	bgt.n	800644c <_scanf_i+0xb8>
 800643c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006440:	4631      	mov	r1, r6
 8006442:	4650      	mov	r0, sl
 8006444:	4790      	blx	r2
 8006446:	2800      	cmp	r0, #0
 8006448:	f040 8085 	bne.w	8006556 <_scanf_i+0x1c2>
 800644c:	f10b 0b01 	add.w	fp, fp, #1
 8006450:	f1bb 0f03 	cmp.w	fp, #3
 8006454:	d1cb      	bne.n	80063ee <_scanf_i+0x5a>
 8006456:	6863      	ldr	r3, [r4, #4]
 8006458:	b90b      	cbnz	r3, 800645e <_scanf_i+0xca>
 800645a:	230a      	movs	r3, #10
 800645c:	6063      	str	r3, [r4, #4]
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	4947      	ldr	r1, [pc, #284]	; (8006580 <_scanf_i+0x1ec>)
 8006462:	6960      	ldr	r0, [r4, #20]
 8006464:	1ac9      	subs	r1, r1, r3
 8006466:	f000 f8af 	bl	80065c8 <__sccl>
 800646a:	f04f 0b00 	mov.w	fp, #0
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d03d      	beq.n	80064f2 <_scanf_i+0x15e>
 8006476:	6831      	ldr	r1, [r6, #0]
 8006478:	6960      	ldr	r0, [r4, #20]
 800647a:	f891 c000 	ldrb.w	ip, [r1]
 800647e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006482:	2800      	cmp	r0, #0
 8006484:	d035      	beq.n	80064f2 <_scanf_i+0x15e>
 8006486:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800648a:	d124      	bne.n	80064d6 <_scanf_i+0x142>
 800648c:	0510      	lsls	r0, r2, #20
 800648e:	d522      	bpl.n	80064d6 <_scanf_i+0x142>
 8006490:	f10b 0b01 	add.w	fp, fp, #1
 8006494:	f1b9 0f00 	cmp.w	r9, #0
 8006498:	d003      	beq.n	80064a2 <_scanf_i+0x10e>
 800649a:	3301      	adds	r3, #1
 800649c:	f109 39ff 	add.w	r9, r9, #4294967295
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	6873      	ldr	r3, [r6, #4]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	6073      	str	r3, [r6, #4]
 80064aa:	dd1b      	ble.n	80064e4 <_scanf_i+0x150>
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	e7d9      	b.n	800646e <_scanf_i+0xda>
 80064ba:	f1bb 0f02 	cmp.w	fp, #2
 80064be:	d1ae      	bne.n	800641e <_scanf_i+0x8a>
 80064c0:	6822      	ldr	r2, [r4, #0]
 80064c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80064c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80064ca:	d1bf      	bne.n	800644c <_scanf_i+0xb8>
 80064cc:	2310      	movs	r3, #16
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d4:	e7a2      	b.n	800641c <_scanf_i+0x88>
 80064d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	780b      	ldrb	r3, [r1, #0]
 80064de:	f805 3b01 	strb.w	r3, [r5], #1
 80064e2:	e7de      	b.n	80064a2 <_scanf_i+0x10e>
 80064e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064e8:	4631      	mov	r1, r6
 80064ea:	4650      	mov	r0, sl
 80064ec:	4798      	blx	r3
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d0df      	beq.n	80064b2 <_scanf_i+0x11e>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	05db      	lsls	r3, r3, #23
 80064f6:	d50d      	bpl.n	8006514 <_scanf_i+0x180>
 80064f8:	42bd      	cmp	r5, r7
 80064fa:	d909      	bls.n	8006510 <_scanf_i+0x17c>
 80064fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006504:	4632      	mov	r2, r6
 8006506:	4650      	mov	r0, sl
 8006508:	4798      	blx	r3
 800650a:	f105 39ff 	add.w	r9, r5, #4294967295
 800650e:	464d      	mov	r5, r9
 8006510:	42bd      	cmp	r5, r7
 8006512:	d02d      	beq.n	8006570 <_scanf_i+0x1dc>
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	f012 0210 	ands.w	r2, r2, #16
 800651a:	d113      	bne.n	8006544 <_scanf_i+0x1b0>
 800651c:	702a      	strb	r2, [r5, #0]
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	9e01      	ldr	r6, [sp, #4]
 8006522:	4639      	mov	r1, r7
 8006524:	4650      	mov	r0, sl
 8006526:	47b0      	blx	r6
 8006528:	6821      	ldr	r1, [r4, #0]
 800652a:	f8d8 3000 	ldr.w	r3, [r8]
 800652e:	f011 0f20 	tst.w	r1, #32
 8006532:	d013      	beq.n	800655c <_scanf_i+0x1c8>
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	f8c8 2000 	str.w	r2, [r8]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60e3      	str	r3, [r4, #12]
 8006544:	1bed      	subs	r5, r5, r7
 8006546:	44ab      	add	fp, r5
 8006548:	6925      	ldr	r5, [r4, #16]
 800654a:	445d      	add	r5, fp
 800654c:	6125      	str	r5, [r4, #16]
 800654e:	2000      	movs	r0, #0
 8006550:	b007      	add	sp, #28
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	e7ca      	b.n	80064f2 <_scanf_i+0x15e>
 800655c:	1d1a      	adds	r2, r3, #4
 800655e:	f8c8 2000 	str.w	r2, [r8]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f011 0f01 	tst.w	r1, #1
 8006568:	bf14      	ite	ne
 800656a:	8018      	strhne	r0, [r3, #0]
 800656c:	6018      	streq	r0, [r3, #0]
 800656e:	e7e6      	b.n	800653e <_scanf_i+0x1aa>
 8006570:	2001      	movs	r0, #1
 8006572:	e7ed      	b.n	8006550 <_scanf_i+0x1bc>
 8006574:	08006a18 	.word	0x08006a18
 8006578:	08006825 	.word	0x08006825
 800657c:	0800673d 	.word	0x0800673d
 8006580:	08006b1c 	.word	0x08006b1c

08006584 <_read_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d07      	ldr	r5, [pc, #28]	; (80065a4 <_read_r+0x20>)
 8006588:	4604      	mov	r4, r0
 800658a:	4608      	mov	r0, r1
 800658c:	4611      	mov	r1, r2
 800658e:	2200      	movs	r2, #0
 8006590:	602a      	str	r2, [r5, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	f7fa fe54 	bl	8001240 <_read>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_read_r+0x1e>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_read_r+0x1e>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	200002cc 	.word	0x200002cc

080065a8 <_sbrk_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d06      	ldr	r5, [pc, #24]	; (80065c4 <_sbrk_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	602b      	str	r3, [r5, #0]
 80065b4:	f7fa fe96 	bl	80012e4 <_sbrk>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_sbrk_r+0x1a>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_sbrk_r+0x1a>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	200002cc 	.word	0x200002cc

080065c8 <__sccl>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	780b      	ldrb	r3, [r1, #0]
 80065cc:	4604      	mov	r4, r0
 80065ce:	2b5e      	cmp	r3, #94	; 0x5e
 80065d0:	bf0b      	itete	eq
 80065d2:	784b      	ldrbeq	r3, [r1, #1]
 80065d4:	1c48      	addne	r0, r1, #1
 80065d6:	1c88      	addeq	r0, r1, #2
 80065d8:	2200      	movne	r2, #0
 80065da:	bf08      	it	eq
 80065dc:	2201      	moveq	r2, #1
 80065de:	1e61      	subs	r1, r4, #1
 80065e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80065e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80065e8:	42a9      	cmp	r1, r5
 80065ea:	d1fb      	bne.n	80065e4 <__sccl+0x1c>
 80065ec:	b90b      	cbnz	r3, 80065f2 <__sccl+0x2a>
 80065ee:	3801      	subs	r0, #1
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	f082 0201 	eor.w	r2, r2, #1
 80065f6:	54e2      	strb	r2, [r4, r3]
 80065f8:	4605      	mov	r5, r0
 80065fa:	4628      	mov	r0, r5
 80065fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006600:	292d      	cmp	r1, #45	; 0x2d
 8006602:	d006      	beq.n	8006612 <__sccl+0x4a>
 8006604:	295d      	cmp	r1, #93	; 0x5d
 8006606:	d0f3      	beq.n	80065f0 <__sccl+0x28>
 8006608:	b909      	cbnz	r1, 800660e <__sccl+0x46>
 800660a:	4628      	mov	r0, r5
 800660c:	e7f0      	b.n	80065f0 <__sccl+0x28>
 800660e:	460b      	mov	r3, r1
 8006610:	e7f1      	b.n	80065f6 <__sccl+0x2e>
 8006612:	786e      	ldrb	r6, [r5, #1]
 8006614:	2e5d      	cmp	r6, #93	; 0x5d
 8006616:	d0fa      	beq.n	800660e <__sccl+0x46>
 8006618:	42b3      	cmp	r3, r6
 800661a:	dcf8      	bgt.n	800660e <__sccl+0x46>
 800661c:	3502      	adds	r5, #2
 800661e:	4619      	mov	r1, r3
 8006620:	3101      	adds	r1, #1
 8006622:	428e      	cmp	r6, r1
 8006624:	5462      	strb	r2, [r4, r1]
 8006626:	dcfb      	bgt.n	8006620 <__sccl+0x58>
 8006628:	1af1      	subs	r1, r6, r3
 800662a:	3901      	subs	r1, #1
 800662c:	1c58      	adds	r0, r3, #1
 800662e:	42b3      	cmp	r3, r6
 8006630:	bfa8      	it	ge
 8006632:	2100      	movge	r1, #0
 8006634:	1843      	adds	r3, r0, r1
 8006636:	e7e0      	b.n	80065fa <__sccl+0x32>

08006638 <_strtol_l.constprop.0>:
 8006638:	2b01      	cmp	r3, #1
 800663a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663e:	d001      	beq.n	8006644 <_strtol_l.constprop.0+0xc>
 8006640:	2b24      	cmp	r3, #36	; 0x24
 8006642:	d906      	bls.n	8006652 <_strtol_l.constprop.0+0x1a>
 8006644:	f7fe fc66 	bl	8004f14 <__errno>
 8006648:	2316      	movs	r3, #22
 800664a:	6003      	str	r3, [r0, #0]
 800664c:	2000      	movs	r0, #0
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006738 <_strtol_l.constprop.0+0x100>
 8006656:	460d      	mov	r5, r1
 8006658:	462e      	mov	r6, r5
 800665a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800665e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006662:	f017 0708 	ands.w	r7, r7, #8
 8006666:	d1f7      	bne.n	8006658 <_strtol_l.constprop.0+0x20>
 8006668:	2c2d      	cmp	r4, #45	; 0x2d
 800666a:	d132      	bne.n	80066d2 <_strtol_l.constprop.0+0x9a>
 800666c:	782c      	ldrb	r4, [r5, #0]
 800666e:	2701      	movs	r7, #1
 8006670:	1cb5      	adds	r5, r6, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d05b      	beq.n	800672e <_strtol_l.constprop.0+0xf6>
 8006676:	2b10      	cmp	r3, #16
 8006678:	d109      	bne.n	800668e <_strtol_l.constprop.0+0x56>
 800667a:	2c30      	cmp	r4, #48	; 0x30
 800667c:	d107      	bne.n	800668e <_strtol_l.constprop.0+0x56>
 800667e:	782c      	ldrb	r4, [r5, #0]
 8006680:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006684:	2c58      	cmp	r4, #88	; 0x58
 8006686:	d14d      	bne.n	8006724 <_strtol_l.constprop.0+0xec>
 8006688:	786c      	ldrb	r4, [r5, #1]
 800668a:	2310      	movs	r3, #16
 800668c:	3502      	adds	r5, #2
 800668e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006692:	f108 38ff 	add.w	r8, r8, #4294967295
 8006696:	f04f 0c00 	mov.w	ip, #0
 800669a:	fbb8 f9f3 	udiv	r9, r8, r3
 800669e:	4666      	mov	r6, ip
 80066a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80066a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80066a8:	f1be 0f09 	cmp.w	lr, #9
 80066ac:	d816      	bhi.n	80066dc <_strtol_l.constprop.0+0xa4>
 80066ae:	4674      	mov	r4, lr
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	dd24      	ble.n	80066fe <_strtol_l.constprop.0+0xc6>
 80066b4:	f1bc 0f00 	cmp.w	ip, #0
 80066b8:	db1e      	blt.n	80066f8 <_strtol_l.constprop.0+0xc0>
 80066ba:	45b1      	cmp	r9, r6
 80066bc:	d31c      	bcc.n	80066f8 <_strtol_l.constprop.0+0xc0>
 80066be:	d101      	bne.n	80066c4 <_strtol_l.constprop.0+0x8c>
 80066c0:	45a2      	cmp	sl, r4
 80066c2:	db19      	blt.n	80066f8 <_strtol_l.constprop.0+0xc0>
 80066c4:	fb06 4603 	mla	r6, r6, r3, r4
 80066c8:	f04f 0c01 	mov.w	ip, #1
 80066cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066d0:	e7e8      	b.n	80066a4 <_strtol_l.constprop.0+0x6c>
 80066d2:	2c2b      	cmp	r4, #43	; 0x2b
 80066d4:	bf04      	itt	eq
 80066d6:	782c      	ldrbeq	r4, [r5, #0]
 80066d8:	1cb5      	addeq	r5, r6, #2
 80066da:	e7ca      	b.n	8006672 <_strtol_l.constprop.0+0x3a>
 80066dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80066e0:	f1be 0f19 	cmp.w	lr, #25
 80066e4:	d801      	bhi.n	80066ea <_strtol_l.constprop.0+0xb2>
 80066e6:	3c37      	subs	r4, #55	; 0x37
 80066e8:	e7e2      	b.n	80066b0 <_strtol_l.constprop.0+0x78>
 80066ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80066ee:	f1be 0f19 	cmp.w	lr, #25
 80066f2:	d804      	bhi.n	80066fe <_strtol_l.constprop.0+0xc6>
 80066f4:	3c57      	subs	r4, #87	; 0x57
 80066f6:	e7db      	b.n	80066b0 <_strtol_l.constprop.0+0x78>
 80066f8:	f04f 3cff 	mov.w	ip, #4294967295
 80066fc:	e7e6      	b.n	80066cc <_strtol_l.constprop.0+0x94>
 80066fe:	f1bc 0f00 	cmp.w	ip, #0
 8006702:	da05      	bge.n	8006710 <_strtol_l.constprop.0+0xd8>
 8006704:	2322      	movs	r3, #34	; 0x22
 8006706:	6003      	str	r3, [r0, #0]
 8006708:	4646      	mov	r6, r8
 800670a:	b942      	cbnz	r2, 800671e <_strtol_l.constprop.0+0xe6>
 800670c:	4630      	mov	r0, r6
 800670e:	e79e      	b.n	800664e <_strtol_l.constprop.0+0x16>
 8006710:	b107      	cbz	r7, 8006714 <_strtol_l.constprop.0+0xdc>
 8006712:	4276      	negs	r6, r6
 8006714:	2a00      	cmp	r2, #0
 8006716:	d0f9      	beq.n	800670c <_strtol_l.constprop.0+0xd4>
 8006718:	f1bc 0f00 	cmp.w	ip, #0
 800671c:	d000      	beq.n	8006720 <_strtol_l.constprop.0+0xe8>
 800671e:	1e69      	subs	r1, r5, #1
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	e7f3      	b.n	800670c <_strtol_l.constprop.0+0xd4>
 8006724:	2430      	movs	r4, #48	; 0x30
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1b1      	bne.n	800668e <_strtol_l.constprop.0+0x56>
 800672a:	2308      	movs	r3, #8
 800672c:	e7af      	b.n	800668e <_strtol_l.constprop.0+0x56>
 800672e:	2c30      	cmp	r4, #48	; 0x30
 8006730:	d0a5      	beq.n	800667e <_strtol_l.constprop.0+0x46>
 8006732:	230a      	movs	r3, #10
 8006734:	e7ab      	b.n	800668e <_strtol_l.constprop.0+0x56>
 8006736:	bf00      	nop
 8006738:	08006b1f 	.word	0x08006b1f

0800673c <_strtol_r>:
 800673c:	f7ff bf7c 	b.w	8006638 <_strtol_l.constprop.0>

08006740 <_strtoul_l.constprop.0>:
 8006740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006744:	4f36      	ldr	r7, [pc, #216]	; (8006820 <_strtoul_l.constprop.0+0xe0>)
 8006746:	4686      	mov	lr, r0
 8006748:	460d      	mov	r5, r1
 800674a:	4628      	mov	r0, r5
 800674c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006750:	5de6      	ldrb	r6, [r4, r7]
 8006752:	f016 0608 	ands.w	r6, r6, #8
 8006756:	d1f8      	bne.n	800674a <_strtoul_l.constprop.0+0xa>
 8006758:	2c2d      	cmp	r4, #45	; 0x2d
 800675a:	d12f      	bne.n	80067bc <_strtoul_l.constprop.0+0x7c>
 800675c:	782c      	ldrb	r4, [r5, #0]
 800675e:	2601      	movs	r6, #1
 8006760:	1c85      	adds	r5, r0, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d057      	beq.n	8006816 <_strtoul_l.constprop.0+0xd6>
 8006766:	2b10      	cmp	r3, #16
 8006768:	d109      	bne.n	800677e <_strtoul_l.constprop.0+0x3e>
 800676a:	2c30      	cmp	r4, #48	; 0x30
 800676c:	d107      	bne.n	800677e <_strtoul_l.constprop.0+0x3e>
 800676e:	7828      	ldrb	r0, [r5, #0]
 8006770:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006774:	2858      	cmp	r0, #88	; 0x58
 8006776:	d149      	bne.n	800680c <_strtoul_l.constprop.0+0xcc>
 8006778:	786c      	ldrb	r4, [r5, #1]
 800677a:	2310      	movs	r3, #16
 800677c:	3502      	adds	r5, #2
 800677e:	f04f 38ff 	mov.w	r8, #4294967295
 8006782:	2700      	movs	r7, #0
 8006784:	fbb8 f8f3 	udiv	r8, r8, r3
 8006788:	fb03 f908 	mul.w	r9, r3, r8
 800678c:	ea6f 0909 	mvn.w	r9, r9
 8006790:	4638      	mov	r0, r7
 8006792:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006796:	f1bc 0f09 	cmp.w	ip, #9
 800679a:	d814      	bhi.n	80067c6 <_strtoul_l.constprop.0+0x86>
 800679c:	4664      	mov	r4, ip
 800679e:	42a3      	cmp	r3, r4
 80067a0:	dd22      	ble.n	80067e8 <_strtoul_l.constprop.0+0xa8>
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	db1d      	blt.n	80067e2 <_strtoul_l.constprop.0+0xa2>
 80067a6:	4580      	cmp	r8, r0
 80067a8:	d31b      	bcc.n	80067e2 <_strtoul_l.constprop.0+0xa2>
 80067aa:	d101      	bne.n	80067b0 <_strtoul_l.constprop.0+0x70>
 80067ac:	45a1      	cmp	r9, r4
 80067ae:	db18      	blt.n	80067e2 <_strtoul_l.constprop.0+0xa2>
 80067b0:	fb00 4003 	mla	r0, r0, r3, r4
 80067b4:	2701      	movs	r7, #1
 80067b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067ba:	e7ea      	b.n	8006792 <_strtoul_l.constprop.0+0x52>
 80067bc:	2c2b      	cmp	r4, #43	; 0x2b
 80067be:	bf04      	itt	eq
 80067c0:	782c      	ldrbeq	r4, [r5, #0]
 80067c2:	1c85      	addeq	r5, r0, #2
 80067c4:	e7cd      	b.n	8006762 <_strtoul_l.constprop.0+0x22>
 80067c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80067ca:	f1bc 0f19 	cmp.w	ip, #25
 80067ce:	d801      	bhi.n	80067d4 <_strtoul_l.constprop.0+0x94>
 80067d0:	3c37      	subs	r4, #55	; 0x37
 80067d2:	e7e4      	b.n	800679e <_strtoul_l.constprop.0+0x5e>
 80067d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80067d8:	f1bc 0f19 	cmp.w	ip, #25
 80067dc:	d804      	bhi.n	80067e8 <_strtoul_l.constprop.0+0xa8>
 80067de:	3c57      	subs	r4, #87	; 0x57
 80067e0:	e7dd      	b.n	800679e <_strtoul_l.constprop.0+0x5e>
 80067e2:	f04f 37ff 	mov.w	r7, #4294967295
 80067e6:	e7e6      	b.n	80067b6 <_strtoul_l.constprop.0+0x76>
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	da07      	bge.n	80067fc <_strtoul_l.constprop.0+0xbc>
 80067ec:	2322      	movs	r3, #34	; 0x22
 80067ee:	f8ce 3000 	str.w	r3, [lr]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	b932      	cbnz	r2, 8006806 <_strtoul_l.constprop.0+0xc6>
 80067f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067fc:	b106      	cbz	r6, 8006800 <_strtoul_l.constprop.0+0xc0>
 80067fe:	4240      	negs	r0, r0
 8006800:	2a00      	cmp	r2, #0
 8006802:	d0f9      	beq.n	80067f8 <_strtoul_l.constprop.0+0xb8>
 8006804:	b107      	cbz	r7, 8006808 <_strtoul_l.constprop.0+0xc8>
 8006806:	1e69      	subs	r1, r5, #1
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	e7f5      	b.n	80067f8 <_strtoul_l.constprop.0+0xb8>
 800680c:	2430      	movs	r4, #48	; 0x30
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1b5      	bne.n	800677e <_strtoul_l.constprop.0+0x3e>
 8006812:	2308      	movs	r3, #8
 8006814:	e7b3      	b.n	800677e <_strtoul_l.constprop.0+0x3e>
 8006816:	2c30      	cmp	r4, #48	; 0x30
 8006818:	d0a9      	beq.n	800676e <_strtoul_l.constprop.0+0x2e>
 800681a:	230a      	movs	r3, #10
 800681c:	e7af      	b.n	800677e <_strtoul_l.constprop.0+0x3e>
 800681e:	bf00      	nop
 8006820:	08006b1f 	.word	0x08006b1f

08006824 <_strtoul_r>:
 8006824:	f7ff bf8c 	b.w	8006740 <_strtoul_l.constprop.0>

08006828 <__submore>:
 8006828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682c:	460c      	mov	r4, r1
 800682e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006834:	4299      	cmp	r1, r3
 8006836:	d11d      	bne.n	8006874 <__submore+0x4c>
 8006838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800683c:	f7ff f81c 	bl	8005878 <_malloc_r>
 8006840:	b918      	cbnz	r0, 800684a <__submore+0x22>
 8006842:	f04f 30ff 	mov.w	r0, #4294967295
 8006846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800684a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006850:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006854:	6360      	str	r0, [r4, #52]	; 0x34
 8006856:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800685a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800685e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006862:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006866:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800686a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800686e:	6020      	str	r0, [r4, #0]
 8006870:	2000      	movs	r0, #0
 8006872:	e7e8      	b.n	8006846 <__submore+0x1e>
 8006874:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006876:	0077      	lsls	r7, r6, #1
 8006878:	463a      	mov	r2, r7
 800687a:	f000 f84b 	bl	8006914 <_realloc_r>
 800687e:	4605      	mov	r5, r0
 8006880:	2800      	cmp	r0, #0
 8006882:	d0de      	beq.n	8006842 <__submore+0x1a>
 8006884:	eb00 0806 	add.w	r8, r0, r6
 8006888:	4601      	mov	r1, r0
 800688a:	4632      	mov	r2, r6
 800688c:	4640      	mov	r0, r8
 800688e:	f000 f827 	bl	80068e0 <memcpy>
 8006892:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006896:	f8c4 8000 	str.w	r8, [r4]
 800689a:	e7e9      	b.n	8006870 <__submore+0x48>

0800689c <_fstat_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4d07      	ldr	r5, [pc, #28]	; (80068bc <_fstat_r+0x20>)
 80068a0:	2300      	movs	r3, #0
 80068a2:	4604      	mov	r4, r0
 80068a4:	4608      	mov	r0, r1
 80068a6:	4611      	mov	r1, r2
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	f7fa fcf2 	bl	8001292 <_fstat>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d102      	bne.n	80068b8 <_fstat_r+0x1c>
 80068b2:	682b      	ldr	r3, [r5, #0]
 80068b4:	b103      	cbz	r3, 80068b8 <_fstat_r+0x1c>
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	bf00      	nop
 80068bc:	200002cc 	.word	0x200002cc

080068c0 <_isatty_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4d06      	ldr	r5, [pc, #24]	; (80068dc <_isatty_r+0x1c>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	f7fa fcf1 	bl	80012b2 <_isatty>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_isatty_r+0x1a>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_isatty_r+0x1a>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	200002cc 	.word	0x200002cc

080068e0 <memcpy>:
 80068e0:	440a      	add	r2, r1
 80068e2:	4291      	cmp	r1, r2
 80068e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068e8:	d100      	bne.n	80068ec <memcpy+0xc>
 80068ea:	4770      	bx	lr
 80068ec:	b510      	push	{r4, lr}
 80068ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d1f9      	bne.n	80068ee <memcpy+0xe>
 80068fa:	bd10      	pop	{r4, pc}

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_lock+0x8>)
 80068fe:	f7fe bed5 	b.w	80056ac <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	200002c0 	.word	0x200002c0

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__malloc_unlock+0x8>)
 800690a:	f7fe bed0 	b.w	80056ae <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	200002c0 	.word	0x200002c0

08006914 <_realloc_r>:
 8006914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006918:	4680      	mov	r8, r0
 800691a:	4614      	mov	r4, r2
 800691c:	460e      	mov	r6, r1
 800691e:	b921      	cbnz	r1, 800692a <_realloc_r+0x16>
 8006920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006924:	4611      	mov	r1, r2
 8006926:	f7fe bfa7 	b.w	8005878 <_malloc_r>
 800692a:	b92a      	cbnz	r2, 8006938 <_realloc_r+0x24>
 800692c:	f7fe ff38 	bl	80057a0 <_free_r>
 8006930:	4625      	mov	r5, r4
 8006932:	4628      	mov	r0, r5
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006938:	f000 f81b 	bl	8006972 <_malloc_usable_size_r>
 800693c:	4284      	cmp	r4, r0
 800693e:	4607      	mov	r7, r0
 8006940:	d802      	bhi.n	8006948 <_realloc_r+0x34>
 8006942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006946:	d812      	bhi.n	800696e <_realloc_r+0x5a>
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7fe ff94 	bl	8005878 <_malloc_r>
 8006950:	4605      	mov	r5, r0
 8006952:	2800      	cmp	r0, #0
 8006954:	d0ed      	beq.n	8006932 <_realloc_r+0x1e>
 8006956:	42bc      	cmp	r4, r7
 8006958:	4622      	mov	r2, r4
 800695a:	4631      	mov	r1, r6
 800695c:	bf28      	it	cs
 800695e:	463a      	movcs	r2, r7
 8006960:	f7ff ffbe 	bl	80068e0 <memcpy>
 8006964:	4631      	mov	r1, r6
 8006966:	4640      	mov	r0, r8
 8006968:	f7fe ff1a 	bl	80057a0 <_free_r>
 800696c:	e7e1      	b.n	8006932 <_realloc_r+0x1e>
 800696e:	4635      	mov	r5, r6
 8006970:	e7df      	b.n	8006932 <_realloc_r+0x1e>

08006972 <_malloc_usable_size_r>:
 8006972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006976:	1f18      	subs	r0, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfbc      	itt	lt
 800697c:	580b      	ldrlt	r3, [r1, r0]
 800697e:	18c0      	addlt	r0, r0, r3
 8006980:	4770      	bx	lr
	...

08006984 <_init>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr

08006990 <_fini>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	bf00      	nop
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr
